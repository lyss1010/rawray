#line 2 "lexer.yy.cc"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern int yylineno;
int yylineno = 1;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 167
#define YY_END_OF_BUFFER 168
static yyconst short int yy_acclist[520] =
    {   0,
      168,  166,  167,  164,  166,  167,   39,  167,  166,  167,
      165,  166,  167,  166,  167,   28,  166,  167,   29,  166,
      167,   34,  166,  167,   32,  166,  167,   30,  164,  166,
      167,   33,  166,  167,  163,  166,  167,   35,  166,  167,
      162,  166,  167,   22,  166,  167,   31,  166,  167,   23,
      166,  167,   24,  166,  167,   37,  166,  167,   25,  166,
      167,   36,  166,  167,  166,  167,  166,  167,  166,  167,
      166,  167,   20,  166,  167,  166,  167,  166,  167,  166,
      167,  166,  167,  166,  167,  166,  167,  166,  167,  166,
      167,  166,  167,  166,  167,   38,  166,  167,  166,  167,

       26,  166,  167,   27,  166,  167,  167,  164,  167,  167,
      165,  167,  167,   28,  167,   29,  167,   34,  167,   32,
      167,   30,  164,  167,   33,  167,  163,  167,   35,  167,
      162,  167,   22,  167,   31,  167,   23,  167,   24,  167,
       37,  167,   25,  167,   36,  167,  167,  167,  167,  167,
       20,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,   38,  167,  167,   26,  167,   27,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,

      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  134,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  167,  167,  167,  164,  161,  165,
       28,   29,   34,   32,   30,  164,   33,  163,  163,   35,
      162,  163,  162,   22,   31,   23,   24,   37,   25,   36,
       20,   16,    6,    4,   78,   21,   26,   27,   73,  106,
      107,  134,    9,   18,   16,   17,    6,    8,    4,   78,
       21,   10,   11,    2,   42,   71,   74,   70,   73,   98,
      108,  106,  107,  102,  137,  148,  149,  150,  151,  156,

       12,   13,   14,    9,   18,   17,   90,    8,   10,   19,
       11,    1,    2,   42,   41,   71,   74,   70,   91,   98,
      108,  102,  137,  148,  149,  150,  151,  156,  155,   12,
       13,   14,   15,    5,   94,   90,   19,    1,   41,   91,
       95,   99,  109,  103,  119,  121,  120,  122,  129,  133,
      155,  160,   15,   69,    3,    5,   40,   94,  154,  144,
       64,   61,   75,   72,   95,   96,   97,   99,  109,  112,
      103,  119,  121,  120,  122,  129,  130,  131,  133,  135,
      139,  140,  141,  143,  136,  138,  145,  146,  158,  160,
      147,   69,    7,    3,   40,  154,  144,   62,   64,   61,

       60,   75,   72,   77,   76,   96,   97,  100,  112,  110,
      104,  115,  132,  116,  130,  131,  135,  139,  140,  141,
      143,  136,  138,  145,  146,  158,  147,    7,   92,  113,
       62,   56,   60,   93,  100,  110,  104,  115,  132,  116,
       81,   92,  113,   65,   56,   93,  123,  124,  142,   85,
      159,   49,   63,   58,  101,  111,  105,  125,  127,  123,
      126,  128,  124,  142,   86,  159,   59,   63,  101,  111,
      105,  125,  127,  126,  128,  152,  153,   84,   89,  157,
       59,   45,   48,   67,   57,  152,  153,   87,   80,  157,
      114,   45,   68,   67,   50,   57,  114,   47,   68,   54,

       43,   44,  117,  118,   46,   43,   44,   66,  117,  118,
       88,   79,   55,   66,   52,   83,   82,   51,   53
    } ;

static yyconst short int yy_accept[1183] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        4,    7,    9,   11,   14,   16,   19,   22,   25,   28,
       32,   35,   38,   41,   44,   47,   50,   53,   56,   59,
       62,   65,   67,   69,   71,   73,   76,   78,   80,   82,
       84,   86,   88,   90,   92,   94,   96,   99,  101,  104,
      107,  108,  110,  111,  113,  114,  116,  118,  120,  122,

      125,  127,  129,  131,  133,  135,  137,  139,  141,  143,
      145,  147,  148,  149,  150,  151,  153,  154,  155,  156,
      157,  158,  159,  160,  161,  162,  163,  164,  165,  167,
      168,  170,  172,  173,  174,  175,  176,  177,  178,  179,
      180,  181,  182,  183,  184,  185,  186,  187,  188,  189,
      190,  191,  192,  193,  194,  195,  196,  197,  198,  199,
      200,  201,  202,  203,  204,  205,  206,  207,  208,  209,
      210,  211,  212,  213,  214,  215,  216,  217,  219,  220,
      221,  222,  223,  224,  225,  226,  227,  228,  229,  230,
      231,  232,  233,  234,  235,  236,  237,  238,  239,  239,

      240,  241,  241,  242,  243,  244,  245,  247,  248,  249,
      250,  251,  252,  253,  254,  255,  256,  257,  258,  259,
      260,  261,  261,  261,  261,  261,  261,  261,  261,  262,
      262,  262,  262,  262,  262,  262,  263,  263,  263,  263,
      263,  264,  264,  265,  266,  267,  267,  267,  267,  267,
      267,  267,  268,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      270,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  271,  272,  272,

      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  274,  274,  274,  275,
      275,  275,  275,  275,  276,  277,  277,  277,  277,  278,
      279,  280,  281,  282,  283,  283,  283,  284,  284,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  286,  286,  286,  286,
      286,  286,  286,  287,  288,  288,  288,  288,  289,  290,

      290,  290,  290,  290,  290,  290,  290,  291,  291,  291,
      291,  292,  292,  292,  292,  292,  293,  294,  295,  295,
      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      295,  296,  296,  296,  296,  297,  298,  299,  300,  300,
      300,  300,  300,  301,  301,  301,  301,  301,  301,  302,
      303,  304,  304,  304,  305,  305,  305,  306,  306,  306,
      306,  306,  307,  307,  307,  308,  308,  309,  310,  310,
      311,  312,  313,  314,  314,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,

      314,  314,  314,  314,  314,  315,  315,  315,  316,  316,
      316,  316,  317,  318,  318,  318,  318,  318,  318,  319,
      320,  320,  320,  320,  320,  320,  320,  320,  321,  321,
      321,  321,  321,  322,  322,  322,  322,  322,  322,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  324,  324,  324,  324,  325,  326,
      327,  328,  328,  328,  328,  328,  329,  330,  330,  330,
      330,  330,  330,  331,  332,  333,  334,  334,  334,  334,
      334,  335,  335,  335,  336,  336,  336,  337,  337,  337,

      338,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  340,  340,  340,  340,  340,  340,  340,  340,
      341,  341,  342,  342,  342,  343,  343,  343,  344,  344,
      344,  344,  345,  345,  345,  345,  345,  346,  346,  346,
      347,  347,  347,  347,  348,  348,  348,  349,  350,  350,
      350,  351,  351,  351,  351,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  352,  352,  353,  353,  353,
      354,  354,  355,  355,  356,  357,  358,  358,  359,  359,
      360,  360,  361,  361,  361,  361,  361,  361,  361,  361,

      361,  362,  362,  362,  362,  362,  362,  362,  363,  363,
      363,  363,  363,  363,  363,  363,  364,  365,  365,  365,
      365,  366,  367,  368,  369,  369,  369,  370,  370,  371,
      371,  372,  372,  372,  372,  372,  373,  373,  373,  374,
      374,  374,  374,  374,  375,  375,  375,  376,  376,  377,
      378,  379,  380,  381,  381,  382,  383,  384,  384,  385,
      386,  387,  388,  389,  389,  389,  389,  389,  390,  391,
      391,  391,  392,  393,  394,  395,  396,  396,  396,  397,
      397,  398,  398,  398,  399,  399,  399,  399,  399,  399,
      400,  400,  400,  400,  400,  400,  400,  401,  401,  401,

      401,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      403,  404,  405,  406,  406,  407,  408,  408,  409,  409,
      410,  411,  411,  412,  413,  413,  413,  413,  413,  414,
      415,  415,  415,  415,  415,  416,  417,  418,  419,  420,
      421,  421,  422,  423,  424,  425,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  426,  426,  426,  426,  427,
      427,  427,  428,  429,  430,  431,  431,  431,  431,  432,
      432,  432,  432,  432,  432,  433,  433,  433,  433,  433,
      433,  433,  434,  434,  434,  434,  434,  434,  434,  435,
      435,  436,  436,  437,  437,  438,  439,  439,  439,  439,

      439,  440,  441,  441,  441,  441,  441,  441,  441,  441,
      441,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      442,  442,  442,  443,  444,  444,  445,  445,  445,  445,
      445,  445,  445,  445,  445,  445,  445,  445,  446,  446,
      446,  446,  446,  446,  446,  446,  446,  446,  446,  446,
      446,  446,  447,  447,  447,  447,  447,  447,  447,  447,
      448,  448,  448,  448,  448,  449,  450,  450,  450,  450,
      450,  450,  450,  450,  451,  451,  451,  451,  451,  451,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  452,  453,  454,  455,  455,  455,  455,  455,

      455,  455,  456,  457,  458,  458,  459,  460,  461,  461,
      462,  463,  464,  465,  465,  465,  466,  466,  466,  466,
      466,  466,  466,  466,  466,  466,  466,  466,  466,  466,
      467,  467,  468,  468,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  469,  469,  469,  469,  469,  469,
      470,  471,  472,  472,  473,  474,  474,  475,  476,  477,
      478,  478,  478,  478,  478,  479,  480,  480,  480,  481,
      481,  482,  482,  483,  484,  484,  484,  484,  484,  484,
      484,  485,  485,  485,  485,  485,  486,  486,  486,  487,
      488,  488,  488,  488,  489,  489,  490,  491,  492,  492,

      492,  492,  493,  493,  493,  494,  494,  494,  494,  495,
      495,  495,  495,  495,  496,  497,  497,  497,  497,  497,
      497,  497,  498,  498,  498,  499,  499,  500,  500,  500,
      500,  500,  500,  500,  500,  500,  500,  500,  500,  500,
      500,  501,  501,  501,  502,  503,  503,  503,  503,  503,
      503,  504,  505,  505,  505,  505,  505,  505,  506,  507,
      508,  509,  509,  509,  509,  510,  511,  511,  511,  512,
      513,  514,  515,  515,  515,  516,  517,  518,  519,  519,
      520,  520
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
       19,   19,   19,   19,   19,   19,   19,    1,    1,   20,
       21,   22,    1,    1,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       23,   24,   25,   26,    1,    1,   27,   28,   29,   30,

       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,   53,    1,   54,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[55] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1
    } ;

static yyconst short int yy_base[1185] =
    {   0,
        0,    0,   54,    0,   82,    0,  103,  116,  129,  142,
      155,  168,  181,  195,  216,  239,  262,    0,  268,  274,
      290,  298,  321,  344,  315,  338,  352,  362,  368,  374,
      380,  386,  392,  398,  404,  410,  416,  426,  434,  440,
      448,  458,  470,  480,  488,  498,  506,  512, 1762, 1763,
      132, 1763, 1756,    0, 1753, 1757, 1756, 1755, 1754,  135,
     1753,  233, 1752,  549, 1751, 1750, 1749, 1748, 1747, 1746,
     1745,  120, 1708,   84, 1710,  181, 1717, 1705, 1702,   78,
      126, 1700,  100,  135,  161,  133, 1763, 1709, 1737, 1736,
     1763,  212, 1732,    0, 1729, 1733, 1732, 1731, 1730,  255,

     1729,  555, 1728,  562, 1727, 1726, 1725, 1724, 1723, 1722,
     1721,  146,  111, 1681, 1686,  230, 1693,  152,  187, 1680,
      189,  137,  158,  232,  203, 1687,  218,  249, 1763, 1686,
     1714, 1713,  253, 1679,  246,  234,  278, 1672,  275,  249,
      286,  297, 1670,  307, 1676,  255, 1679,  296,  333, 1668,
      313,  342, 1681, 1666,  358,  372, 1679, 1678, 1663,  390,
      542, 1676, 1667, 1661,  311, 1669,  458,  546, 1664, 1658,
      437, 1666,  547, 1655, 1664, 1663, 1652,  462, 1661, 1650,
     1659,  555, 1658, 1657, 1646, 1655,  331, 1658,  553,  207,
      210,  445,  554,  432, 1643,  573,  467,  519, 1678, 1763,

        0, 1675, 1679, 1678, 1677, 1676,  601, 1675, 1674,  593,
     1673, 1672,  604,  612, 1671, 1670, 1669, 1668, 1667, 1666,
     1665, 1625, 1630, 1637, 1621, 1623, 1616, 1615, 1657, 1631,
     1615, 1618, 1614, 1609, 1620, 1650, 1618, 1604, 1604, 1610,
     1645, 1614, 1643, 1642, 1641, 1602, 1607, 1596, 1599, 1591,
     1592, 1634, 1633, 1588, 1589, 1582, 1584,  596, 1586, 1602,
     1601, 1577, 1588, 1586, 1588, 1576, 1577, 1580, 1580,  547,
     1575,  572,  583,  588, 1570,  357, 1567, 1576, 1570, 1612,
      416, 1572, 1577, 1577,  469,  589, 1571, 1564, 1562,  597,
     1568, 1561, 1575, 1558,  598, 1564, 1600, 1599, 1555, 1553,

      494, 1568, 1556, 1564, 1554, 1566,  504, 1563, 1551, 1559,
     1549,  599, 1554, 1553,  600, 1585, 1551,  601, 1550, 1542,
     1548, 1547, 1537, 1545, 1539, 1548,  631,  633,  320, 1536,
      356, 1535,  618, 1540, 1532, 1528, 1526, 1544, 1524,  625,
     1524, 1528, 1527, 1539, 1534, 1562, 1536, 1534, 1559, 1515,
     1531, 1512, 1523, 1554, 1553,  514, 1520, 1507, 1550, 1549,
     1548, 1547, 1546, 1545, 1515, 1499, 1542, 1512, 1540, 1506,
     1489,  651, 1494,  653, 1511, 1506, 1494,  654, 1505, 1501,
      655, 1495,  613, 1501, 1502, 1528, 1493, 1498, 1496, 1495,
     1498, 1493, 1521, 1520, 1484,  656,  658, 1518, 1517, 1488,

     1478, 1476, 1484, 1487, 1472,  324, 1510, 1465, 1469,  659,
     1507, 1473, 1461, 1465,  661, 1503, 1502, 1501, 1456, 1469,
     1465, 1459,  626, 1458, 1462, 1464, 1460, 1454,  627, 1453,
     1451, 1458, 1457, 1448, 1455, 1446, 1453, 1447, 1451, 1450,
     1480, 1448, 1434, 1444, 1476, 1475, 1474, 1473, 1434, 1433,
     1441, 1427, 1468, 1435, 1441, 1429,  551, 1426, 1463, 1462,
      665, 1417, 1418, 1459, 1432, 1421, 1456, 1426, 1429, 1428,
     1408, 1451, 1408, 1416, 1448, 1414, 1446, 1445, 1402, 1443,
     1442, 1441, 1440,  652, 1412,  664, 1399, 1394, 1409, 1397,
     1402,  666, 1397, 1402, 1395, 1401,  672, 1396, 1389, 1398,

      667, 1394, 1398, 1389, 1423, 1393, 1392, 1420, 1394, 1380,
     1390, 1416, 1415,  673,  671, 1372,  675, 1371, 1412, 1411,
     1381, 1365, 1366, 1365, 1364,  674, 1380, 1404, 1378, 1360,
      676, 1376, 1400, 1354, 1373, 1355,  682, 1371, 1395, 1369,
     1348, 1350, 1360, 1361, 1364, 1359, 1358, 1341, 1343, 1353,
     1354, 1357, 1352, 1338, 1347, 1346, 1335, 1344, 1333, 1342,
     1340, 1340, 1339, 1370, 1337, 1339, 1322, 1366, 1365, 1364,
     1363, 1319, 1318, 1322, 1334, 1358, 1357, 1312, 1326,  685,
     1326, 1310, 1352, 1351, 1350, 1349, 1321, 1322, 1310, 1316,
     1344, 1307, 1304, 1341, 1307, 1291, 1338, 1300, 1307, 1335,

     1334,  687, 1297, 1303, 1288, 1297, 1294, 1300, 1298, 1287,
     1288, 1295,  690, 1293, 1280, 1279, 1278, 1275, 1289, 1290,
     1274, 1315, 1286, 1282, 1268,  689, 1267, 1285, 1284, 1308,
     1263, 1306, 1276, 1275, 1303, 1265, 1270, 1300, 1262, 1255,
     1266, 1296, 1258, 1263, 1250, 1263, 1291, 1263, 1262,  697,
     1250, 1244, 1257, 1285, 1257, 1256,  701, 1282, 1237, 1236,
     1279, 1234,  707, 1233, 1232, 1226, 1225, 1224, 1225, 1223,
     1221, 1220, 1213, 1226, 1261, 1231, 1259, 1229, 1221,  129,
      128,  260,  254,  393,  398,  455,  433,  479,  464,  560,
      590,  693,  675,  671,  666,  688,  684,  692,  680,  685,

      726,  685,  729,  705,  692,  704,  735,  736,  708,  738,
      697,  696,  741,  742,  707,  744,  745,  699,  700,  706,
      749,  750,  751,  752,  713,  725,  756,  717,  758,  731,
      762,  723,  735,  737,  740,  768,  725,  726,  771,  727,
      730,  746,  750,  778,  735,  736,  781,  737,  783,  786,
      787,  788,  789,  790,  791,  792,  793,  749,  795,  796,
      797,  798,  799,  758,  759,  802,  804,  803,  805,  768,
      782,  808,  809,  810,  811,  812,  784,  778,  817,  774,
      819,  795,  777,  822,  785,  782,  783,  797,  790,  829,
      788,  805,  791,  789,  835,  797,  837,  813,  841,  804,

      847,  815,  849,  825,  811,  820,  853,  815,  826,  856,
      857, 1763, 1763,  809,  859,  860,  826,  863,  828,  865,
      866,  831,  869,  870,  827,  839,  840,  837,  875,  876,
      833,  845,  846,  843,  882,  883,  884,  885,  886,  888,
      861,  890,  891,  894,  895,  896,  872,  873,  899,  871,
      857,  877,  858,  879,  872,  906,  862,  883,  909,  868,
      869,  914,  915,  917,  918,  890,  877,  879,  922,  923,
      885,  926,  928,  929,  930,  896,  903,  890,  889,  907,
      895,  939,  901,  905,  912,  904,  921,  950,  951,  924,
      954,  926,  956,  928,  958,  959,  960,  915,  917,  924,

      965,  966,  967,  922,  924,  932,  944,  941,  942,  932,
     1763,  929,  940,  942,  952,  942,  951,  958,  947,  957,
      953,  958,  989,  990,  949, 1763,  959,  993,  960,  952,
      998,  973,  967, 1001,  973, 1003,  965, 1005,  975,  976,
      979,  971,  967,  967,  974,  985,  976,  986, 1016, 1017,
      989, 1020,  978,  979,  980, 1025,  993,  998,  999, 1029,
     1030,  998, 1003, 1004, 1035, 1036,  999, 1000, 1014, 1040,
     1041, 1042, 1012, 1763, 1009, 1005, 1048, 1016, 1006, 1051,
     1019, 1027, 1010, 1018, 1018, 1029, 1035, 1016, 1022, 1023,
     1066, 1040, 1763, 1070, 1763, 1035, 1036, 1048, 1074, 1042,

     1033, 1077, 1078, 1079, 1050, 1081, 1082, 1083, 1054, 1086,
     1087, 1088, 1089, 1046, 1049, 1763, 1094, 1062, 1096, 1064,
     1098, 1059, 1055, 1076, 1058, 1103, 1064, 1060, 1057, 1107,
     1083, 1109, 1068, 1083, 1064, 1081, 1070, 1086, 1077, 1079,
     1119, 1081, 1092, 1123, 1096, 1087, 1099, 1078, 1085, 1130,
     1131, 1132, 1103, 1134, 1135, 1106, 1137, 1138, 1139, 1140,
     1099, 1100, 1112, 1104, 1763, 1763, 1116, 1106, 1150, 1115,
     1152, 1153, 1154, 1763, 1111, 1123, 1115, 1113, 1114, 1115,
     1161, 1120, 1136, 1164, 1136, 1166, 1122, 1123, 1169, 1170,
     1127, 1128, 1144, 1763, 1145, 1763, 1175, 1176, 1177, 1153,

     1146, 1180, 1138, 1143, 1183, 1146, 1147, 1148, 1187, 1188,
     1154, 1191, 1156, 1763, 1193, 1151, 1152, 1172, 1173, 1157,
     1158, 1201, 1154, 1172, 1763, 1166, 1205, 1178, 1180, 1182,
     1210, 1175, 1212, 1184, 1186, 1187, 1179, 1180, 1190, 1192,
     1763, 1185, 1180, 1224, 1225, 1197, 1198, 1228, 1193, 1201,
     1232, 1233, 1208, 1209, 1194, 1195, 1214, 1763, 1240, 1241,
     1242, 1214, 1215, 1205, 1246, 1247, 1219, 1220, 1763, 1763,
     1763, 1250, 1211, 1223, 1763, 1763, 1763, 1763, 1214, 1763,
     1763, 1273, 1257, 1275
    } ;

static yyconst short int yy_def[1185] =
    {   0,
     1181,    1, 1181,    3,    3,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17, 1181, 1181,
     1181, 1181, 1182, 1183, 1184, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1182, 1183, 1184, 1181, 1181, 1181, 1181, 1181,

     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1182, 1181,

     1183, 1184, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,

     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,

     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,

     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,

     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,

     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,

     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,

     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,

     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,

     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
        0, 1181, 1181, 1181
    } ;

static yyconst short int yy_nxt[1818] =
    {   0,
       50,   51,   52,   51,   53,   54,   55,   56,   57,   58,
       59,   60,   61,   62,   63,   64,   64,   64,   64,   65,
       66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
       76,   77,   78,   50,   79,   50,   50,   80,   81,   82,
       83,   84,   50,   50,   85,   86,   50,   50,   50,   87,
       88,   50,   89,   90,   91,   92,   52,   92,   93,   94,
       95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
      104,  104,  104,  105,  106,  107,  108,  109,  110,  111,
      112,  113,  114,  115,  116,  117,  118,  119,  120,   91,
       91,  121,  122,  123,  124,  125,   91,  126,  127,  128,

       91,   91,   91,  129,  130,   91,  131,  132,  133,   91,
      226,  134,  235,  135,   91,   91,   91,  236,  237,  136,
      137,  138,  139,  140,  227,   91,  141,  142,  143,  144,
      680,  242,  115,  198,  117,  198,  207,  255,  198,  243,
      121,   91,  144,  198,  145,  115,  198,  117,  222,   91,
      244,  256,  238,  121,   91,  144,  239,  145,  115,  249,
      117,  772,   91,  262,  223,  224,  146,   91,  144,  245,
      145,  115,  240,  117,  222,   91,  250,  263,  257,  146,
       91,  144,  229,  145,  115,  254,  117,  147,   91,  258,
      223,  224,  121,   91,  144,  246,  145,  115,  241,  117,

      147,   91,  247,  248,  264,  121,   91,  144,  329,  145,
      115,  331,  117,  198,   91,  198,  259,  260,  121,   91,
      230,  144,  148,  198,  115,  149,  117,   91,  236,  237,
      231,  229,  121,   91,  209,  330,  148,  245,  332,  149,
      266,   91,  144,  267,  150,  115,  268,  117,  210,  210,
      210,  210,  270,  121,   91,  151,  207,  152,  198,  265,
      248,  773,   91,  242,  153,  144,  198,  150,  115,  230,
      117,  243,  232,  236,  276,  249,  121,   91,  151,  231,
      152,  222,  271,  245,  774,   91,  275,  153,  144,  279,
      154,  115,  272,  117,  236,  281,  159,  273,  224,  121,

       91,  155,  159,  156,  277,  157,  242,  160,   91,  161,
      158,   91,  278,  160,  243,  161,  162,   91,  114,  163,
      246,  329,  162,  249,  164,  526,  114,  163,  248,  138,
      245,  165,  164,  166,  167,  222,  283,  138,   91,  165,
      250,  166,  167,  174,  303,  245,   91,  168,  330,  114,
      169,  223,  224,  241,  138,  170,  145,  331,   91,  287,
      138,  325,  171,  175,  172,  173,  174,  246,  527,   91,
      168,  227,  114,  169,  284,  285,  245,  138,  170,  145,
      114,   91,  288,  138,  332,  171,  175,  172,  173,  355,
      114,  138,   91,  145,  775,   91,  177,  395,  241,  685,

      176,  138,  177,  145,  291,   91,  245,  178,  180,  145,
      176,   91,  292,  178,  180,  145,  179,   91,  182,  138,
      114,  145,  179,   91,  182,  138,  114,  145,  181,   91,
      241,  138,  114,  145,  181,   91,  296,  138,  114,  145,
      183,   91,  400,  138,  114,  145,  183,   91,  355,  138,
      185,  145,  184,   91,  114,  138,  776,  145,  184,   91,
      185,  777,  187,  316,  186,  138,  245,  145,  187,   91,
      309,  245,  335,  138,  186,  145,  114,  188,  336,  138,
      688,  145,   91,  188,  236,  333,  114,  138,   91,  189,
      778,   91,  246,  249,  190,  191,   91,  138,  114,  189,

      248,   91,  241,  305,  190,  191,   91,  192,  114,  138,
      340,  145,  366,   91,  193,  404,  114,  192,   91,  138,
      198,  145,  198,   91,  193,  420,  114,  138,   91,  194,
      198,  195,  196,  197,  114,  426,   91,  138,  347,  194,
      114,  195,  196,  197,  473,  138,   91,  145,  347,   91,
      212,  138,  580,  145,   91,   91,  209,  474,  297,  298,
       91,  779,  213,  212,  214,  214,  214,  214,  327,  328,
      210,  210,  210,  210,  222,  213,  245,  214,  214,  214,
      214,  246,  299,  222,  306,  581,  364,  245,  246,  248,
      223,  224,  311,  320,  209,  334,  248,  374,  389,  223,

      224,  338,  207,  339,  198,  209,  391,  246,  210,  210,
      210,  210,  198,  212,  501,  248,  780,  342,  368,  210,
      210,  210,  210,  375,  392,  213,  405,  214,  214,  214,
      214,  393,  347,  346,  409,  414,  431,  434,  436,  376,
      377,  346,  346,  346,  346,  346,  445,  446,  447,  448,
      355,  458,  486,  602,  374,  492,  497,  515,  502,  517,
      531,  451,  537,  544,  551,  486,  585,  492,  501,  545,
      552,  368,  515,  497,  626,  526,  517,  531,  603,  487,
      375,  493,  586,  537,  498,  516,  580,  518,  602,  499,
      626,  703,  487,  493,  781,  494,  376,  377,  739,  627,

      516,  498,  747,  532,  518,  538,  499,  494,  754,  782,
      783,  784,  502,  603,  785,  627,  786,  704,  527,  581,
      532,  705,  787,  788,  740,  789,  538,  790,  748,  791,
      703,  792,  793,  755,  756,  794,  795,  797,  798,  799,
      801,  802,  803,  807,  809,  810,  811,  812,  813,  814,
      721,  815,  816,  724,  817,  818,  704,  727,  819,  820,
      705,  821,  796,  731,  822,  823,  800,  824,  825,  736,
      826,  827,  739,  828,  804,  829,  830,  808,  831,  744,
      832,  833,  747,  834,  749,  805,  806,  835,  836,  752,
      837,  754,  838,  839,  840,  841,  842,  843,  844,  845,

      846,  847,  848,  849,  859,  856,  769,  860,  861,  862,
      773,  863,  775,  776,  864,  865,  755,  756,  779,  866,
      781,  867,  868,  869,  870,  871,  872,  873,  874,  850,
      790,  851,  875,  876,  877,  878,  795,  879,  797,  880,
      852,  853,  799,  857,  881,  854,  855,  858,  882,  883,
      803,  884,  885,  886,  807,  887,  888,  810,  811,  889,
      815,  816,  796,  890,  891,  892,  820,  893,  894,  800,
      895,  896,  897,  898,  899,  900,  901,  902,  903,  904,
      905,  906,  804,  835,  836,  837,  838,  839,  808,  840,
      907,  842,  843,  805,  806,  844,  845,  846,  908,  909,

      849,  910,  911,  912,  914,  915,  917,  856,  919,  920,
      859,  913,  916,  921,  922,  862,  863,  918,  923,  924,
      925,  926,  927,  869,  928,  930,  850,  931,  851,  934,
      936,  938,  939,  940,  941,  942,  943,  852,  853,  944,
      882,  945,  854,  855,  946,  857,  947,  948,  949,  858,
      929,  950,  952,  932,  953,  891,  954,  893,  955,  895,
      896,  956,  958,  933,  959,  960,  901,  902,  961,  963,
      937,  964,  935,  965,  966,  967,  968,  969,  970,  971,
      972,  973,  974,  975,  976,  977,  978,  979,  980,  957,
      923,  924,  981,  982,  928,  951,  962,  983,  984,  931,

      985,  986,  934,  987,  936,  988,  938,  989,  990,  991,
      992,  993,  994,  995,  996,  997,  998,  999,  950, 1001,
      929,  952, 1002, 1003, 1004,  932,  956, 1005, 1006, 1007,
     1008,  961, 1009, 1010, 1011,  933, 1012, 1013, 1014, 1015,
     1016, 1017, 1019, 1021,  937,  935, 1023, 1024, 1025, 1026,
     1028, 1029, 1030, 1031,  957, 1032, 1033, 1034, 1035,  962,
     1000, 1036,  951, 1037, 1038, 1039, 1040, 1041, 1043, 1018,
     1020, 1044, 1045, 1046, 1047,  999, 1048, 1049, 1050, 1051,
     1052, 1053, 1054, 1055, 1008, 1056, 1022, 1057, 1058, 1012,
     1013, 1059, 1027, 1042, 1060, 1017, 1061, 1019, 1062, 1021,

     1063, 1064, 1065, 1066, 1026, 1067, 1068, 1069, 1030, 1070,
     1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1000, 1079,
     1041, 1080, 1081, 1018, 1044, 1020, 1082, 1083, 1084, 1085,
     1086, 1050, 1051, 1052, 1087, 1054, 1055, 1088, 1057, 1058,
     1089, 1090, 1022, 1091, 1092, 1093, 1042, 1027, 1094, 1095,
     1096, 1097, 1098, 1071, 1099, 1102, 1103, 1104, 1105, 1106,
     1107, 1108, 1109, 1110, 1111, 1112, 1114, 1115, 1116, 1117,
     1089, 1090, 1118, 1119, 1120, 1121, 1097, 1122, 1099, 1123,
     1124, 1102, 1125, 1126, 1127, 1128, 1129, 1130, 1109, 1131,
     1133, 1100, 1112, 1134, 1115, 1135, 1136, 1101, 1137, 1138,

     1139, 1140, 1122, 1141, 1142, 1143, 1127, 1144, 1113, 1145,
     1146, 1131, 1147, 1148, 1150, 1100, 1151, 1152, 1153, 1154,
     1155, 1101, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1148,
     1163, 1164, 1132, 1165, 1166, 1113, 1167, 1168, 1169, 1170,
     1171, 1159, 1160, 1172, 1173, 1174, 1175, 1165, 1166, 1176,
     1177, 1172, 1178, 1179, 1132, 1180, 1149,  201,  771,  770,
      769,  768,  675,  767,  766,  765,  764,  763,  762,  761,
      760,  759, 1149,  199,  199,  202,  202,  758,  757,  753,
      752,  751,  750,  749,  746,  745,  744,  743,  742,  741,
      738,  737,  736,  735,  734,  733,  732,  731,  730,  729,

      728,  727,  726,  725,  724,  723,  722,  721,  720,  630,
      719,  718,  717,  716,  715,  714,  622,  713,  712,  711,
      710,  709,  708,  707,  706,  702,  701,  700,  699,  698,
      697,  696,  695,  694,  693,  601,  600,  692,  691,  597,
      690,  689,  688,  687,  686,  685,  684,  683,  682,  681,
      680,  585,  584,  583,  679,  678,  677,  676,  675,  576,
      674,  673,  672,  671,  571,  570,  569,  568,  670,  669,
      668,  564,  667,  666,  665,  664,  663,  662,  661,  660,
      659,  658,  657,  656,  655,  654,  653,  652,  651,  650,
      649,  648,  647,  646,  645,  644,  539,  643,  642,  641,

      640,  533,  639,  638,  637,  528,  636,  635,  634,  633,
      632,  631,  630,  519,  629,  628,  513,  512,  625,  624,
      623,  622,  621,  620,  505,  619,  618,  617,  616,  615,
      614,  613,  612,  611,  610,  609,  608,  607,  606,  605,
      604,  483,  601,  481,  600,  599,  478,  477,  598,  597,
      596,  595,  472,  594,  593,  592,  591,  467,  590,  589,
      464,  588,  587,  584,  583,  582,  579,  578,  577,  576,
      575,  574,  573,  572,  571,  570,  569,  568,  567,  566,
      565,  564,  563,  562,  561,  560,  559,  558,  557,  556,
      555,  554,  553,  550,  549,  548,  547,  546,  543,  542,

      541,  540,  539,  417,  416,  536,  535,  534,  533,  530,
      529,  528,  525,  524,  523,  522,  521,  520,  399,  519,
      514,  513,  512,  511,  510,  509,  508,  507,  506,  505,
      504,  503,  500,  496,  495,  491,  490,  489,  488,  485,
      484,  483,  482,  481,  480,  479,  478,  363,  362,  361,
      477,  359,  476,  475,  472,  354,  471,  470,  469,  468,
      467,  466,  465,  464,  463,  462,  461,  460,  459,  457,
      456,  455,  454,  453,  452,  450,  449,  444,  443,  442,
      441,  440,  439,  438,  437,  435,  316,  433,  432,  430,
      429,  428,  427,  425,  424,  423,  422,  421,  419,  418,

      417,  416,  415,  413,  412,  411,  410,  408,  407,  406,
      403,  402,  401,  399,  398,  397,  396,  394,  390,  388,
      387,  386,  385,  384,  383,  382,  381,  380,  379,  378,
      373,  372,  371,  370,  253,  252,  369,  368,  367,  366,
      365,  364,  363,  362,  361,  360,  359,  358,  357,  356,
      355,  354,  353,  352,  351,  350,  349,  348,  229,  347,
      346,  345,  344,  343,  342,  341,  221,  220,  219,  218,
      217,  216,  215,  212,  211,  209,  208,  206,  205,  204,
      203,  200,  200,  337,  326,  324,  323,  322,  321,  319,
      318,  317,  315,  314,  313,  312,  310,  308,  307,  304,

      302,  301,  300,  295,  294,  293,  290,  289,  286,  282,
      245,  280,  241,  274,  253,  252,  251,  269,  261,  232,
      228,  227,  221,  220,  219,  218,  217,  216,  215,  211,
      208,  206,  205,  204,  203,  200,  200,  253,  252,  251,
      241,  234,  233,  232,  228,  225,  221,  220,  219,  218,
      217,  216,  215,  211,  208,  206,  205,  204,  203,  200,
      200, 1181,   49, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,

     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181
    } ;

static yyconst short int yy_chk[1818] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    5,    5,
       74,    5,   80,    5,    5,    5,    5,   80,   80,    5,
        5,    5,    5,    5,   74,    5,    5,    5,    5,    7,
      680,   83,    7,   51,    7,   51,   60,  113,   60,   83,
        7,    7,    8,   51,    7,    8,   60,    8,   72,    7,
       84,  113,   81,    8,    8,    9,   81,    8,    9,   86,
        9,  681,    8,  122,   72,   72,    9,    9,   10,   84,
        9,   10,   81,   10,  112,    9,   86,  122,  118,   10,
       10,   11,   76,   10,   11,  112,   11,   11,   10,  118,
      112,  112,   11,   11,   12,   85,   11,   12,  123,   12,

       12,   11,   85,   85,  123,   12,   12,   13,  190,   12,
       13,  191,   13,   92,   12,   92,  119,  119,   13,   13,
       76,   14,   13,   92,   14,   13,   14,   13,  121,  121,
       76,  116,   14,   14,   62,  190,   14,  125,  191,   14,
      125,   14,   15,  125,   15,   15,  125,   15,   62,   62,
       62,   62,  127,   15,   15,   15,  100,   15,  100,  124,
      127,  682,   15,  124,   15,   16,  100,   16,   16,  116,
       16,  124,  135,  136,  136,  128,   16,   16,   16,  116,
       16,  133,  128,  140,  683,   16,  135,   16,   17,  140,
       17,   17,  128,   17,  146,  146,   19,  133,  133,   17,

       17,   17,   20,   17,  137,   17,  139,   19,   17,   19,
       17,   19,  137,   20,  139,   20,   19,   20,   21,   21,
      141,  329,   20,  142,   21,  406,   22,   22,  141,   21,
      148,   21,   22,   21,   21,  144,  148,   22,   21,   22,
      142,   22,   22,   25,  165,  165,   22,   23,  329,   23,
       23,  144,  144,  151,   25,   23,   25,  331,   25,  151,
       23,  187,   23,   25,   23,   23,   26,  149,  406,   23,
       24,  187,   24,   24,  149,  149,  152,   26,   24,   26,
       27,   26,  152,   24,  331,   24,   26,   24,   24,  276,
       28,   27,   24,   27,  684,   27,   29,  276,  155,  685,

       27,   28,   30,   28,  155,   28,  156,   29,   31,   29,
       28,   29,  156,   30,   32,   30,   29,   30,   33,   31,
       33,   31,   30,   31,   34,   32,   34,   32,   31,   32,
      160,   33,   35,   33,   32,   33,  160,   34,   36,   34,
       33,   34,  281,   35,   37,   35,   34,   35,  281,   36,
       37,   36,   35,   36,   38,   37,  686,   37,   36,   37,
       38,  687,   39,  178,   37,   38,  194,   38,   40,   38,
      171,  171,  194,   39,   38,   39,   41,   39,  194,   40,
      688,   40,   39,   40,  192,  192,   42,   41,   40,   41,
      689,   41,  167,  197,   41,   41,   41,   42,   43,   42,

      167,   42,  178,  167,   42,   42,   42,   43,   44,   43,
      197,   43,  285,   43,   43,  285,   45,   44,   43,   44,
      198,   44,  198,   44,   44,  301,   46,   45,   44,   45,
      198,   45,   45,   45,   47,  307,   45,   46,  301,   46,
       48,   46,   46,   46,  356,   47,   46,   47,  307,   47,
       64,   48,  457,   48,   47,   48,  102,  356,  161,  161,
       48,  690,   64,  104,   64,   64,   64,   64,  189,  189,
      102,  102,  102,  102,  168,  104,  161,  104,  104,  104,
      104,  173,  161,  182,  168,  457,  270,  189,  193,  173,
      168,  168,  173,  182,  210,  193,  193,  258,  270,  182,

      182,  196,  207,  196,  207,  213,  272,  196,  210,  210,
      210,  210,  207,  214,  383,  196,  691,  273,  272,  213,
      213,  213,  213,  258,  273,  214,  286,  214,  214,  214,
      214,  274,  274,  286,  290,  295,  312,  315,  318,  258,
      258,  290,  295,  312,  315,  318,  327,  327,  328,  328,
      333,  340,  372,  484,  374,  378,  381,  396,  383,  397,
      410,  333,  415,  423,  429,  486,  461,  492,  501,  423,
      429,  340,  515,  497,  514,  526,  517,  531,  484,  372,
      374,  378,  461,  537,  381,  396,  580,  397,  602,  381,
      626,  613,  486,  492,  692,  378,  374,  374,  650,  514,

      515,  497,  657,  410,  517,  415,  497,  492,  663,  693,
      694,  695,  501,  602,  696,  626,  697,  613,  526,  580,
      531,  613,  698,  699,  650,  700,  537,  701,  657,  702,
      703,  704,  705,  663,  663,  706,  707,  708,  709,  710,
      711,  712,  713,  714,  715,  716,  717,  718,  719,  720,
      721,  722,  723,  724,  725,  726,  703,  727,  728,  729,
      703,  730,  707,  731,  732,  733,  710,  734,  735,  736,
      737,  738,  739,  740,  713,  741,  742,  714,  743,  744,
      745,  746,  747,  748,  749,  713,  713,  750,  751,  752,
      753,  754,  755,  756,  757,  758,  759,  760,  761,  762,

      763,  764,  765,  766,  768,  767,  769,  770,  771,  772,
      773,  774,  775,  776,  777,  778,  754,  754,  779,  780,
      781,  782,  783,  784,  785,  786,  787,  788,  789,  766,
      790,  766,  791,  792,  793,  794,  795,  796,  797,  798,
      766,  766,  799,  767,  800,  766,  766,  767,  801,  802,
      803,  804,  805,  806,  807,  808,  809,  810,  811,  814,
      815,  816,  795,  817,  818,  819,  820,  821,  822,  799,
      823,  824,  825,  826,  827,  828,  829,  830,  831,  832,
      833,  834,  803,  835,  836,  837,  838,  839,  807,  840,
      841,  842,  843,  803,  803,  844,  845,  846,  847,  848,

      849,  850,  851,  852,  853,  854,  855,  856,  857,  858,
      859,  852,  854,  860,  861,  862,  863,  855,  864,  865,
      866,  867,  868,  869,  870,  871,  849,  872,  849,  873,
      874,  875,  876,  877,  878,  879,  880,  849,  849,  881,
      882,  883,  849,  849,  884,  856,  885,  886,  887,  856,
      870,  888,  889,  872,  890,  891,  892,  893,  894,  895,
      896,  897,  898,  872,  899,  900,  901,  902,  903,  904,
      874,  905,  873,  906,  907,  908,  909,  910,  912,  913,
      914,  915,  916,  917,  918,  919,  920,  921,  922,  897,
      923,  924,  925,  927,  928,  888,  903,  929,  930,  931,

      932,  933,  934,  935,  936,  937,  938,  939,  940,  941,
      942,  943,  944,  945,  946,  947,  948,  949,  950,  951,
      928,  952,  953,  954,  955,  931,  956,  957,  958,  959,
      960,  961,  962,  963,  964,  931,  965,  966,  967,  968,
      969,  970,  971,  972,  936,  934,  973,  975,  976,  977,
      978,  979,  980,  981,  956,  982,  983,  984,  985,  961,
      949,  986,  950,  987,  988,  989,  990,  991,  992,  970,
      971,  994,  996,  997,  998,  999, 1000, 1001, 1002, 1003,
     1004, 1005, 1006, 1007, 1008, 1009,  972, 1010, 1011, 1012,
     1013, 1014,  977,  991, 1015, 1017, 1018, 1019, 1020, 1021,

     1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031,
     1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039,  999, 1040,
     1041, 1042, 1043, 1017, 1044, 1019, 1045, 1046, 1047, 1048,
     1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058,
     1059, 1060, 1021, 1061, 1062, 1063, 1041, 1026, 1064, 1067,
     1068, 1069, 1070, 1071, 1072, 1073, 1075, 1076, 1077, 1078,
     1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088,
     1089, 1090, 1091, 1092, 1093, 1095, 1097, 1098, 1099, 1100,
     1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110,
     1111, 1072, 1112, 1113, 1115, 1116, 1117, 1072, 1118, 1119,

     1120, 1121, 1122, 1123, 1124, 1126, 1127, 1128, 1084, 1129,
     1130, 1131, 1132, 1133, 1134, 1099, 1135, 1136, 1137, 1138,
     1139, 1099, 1140, 1142, 1143, 1144, 1145, 1146, 1147, 1148,
     1149, 1150, 1110, 1151, 1152, 1112, 1153, 1154, 1155, 1156,
     1157, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167,
     1168, 1172, 1173, 1174, 1131, 1179, 1133, 1183,  679,  678,
      677,  676,  675,  674,  673,  672,  671,  670,  669,  668,
      667,  666, 1148, 1182, 1182, 1184, 1184,  665,  664,  662,
      661,  660,  659,  658,  656,  655,  654,  653,  652,  651,
      649,  648,  647,  646,  645,  644,  643,  642,  641,  640,

      639,  638,  637,  636,  635,  634,  633,  632,  631,  630,
      629,  628,  627,  625,  624,  623,  622,  621,  620,  619,
      618,  617,  616,  615,  614,  612,  611,  610,  609,  608,
      607,  606,  605,  604,  603,  601,  600,  599,  598,  597,
      596,  595,  594,  593,  592,  591,  590,  589,  588,  587,
      586,  585,  584,  583,  582,  581,  579,  578,  577,  576,
      575,  574,  573,  572,  571,  570,  569,  568,  567,  566,
      565,  564,  563,  562,  561,  560,  559,  558,  557,  556,
      555,  554,  553,  552,  551,  550,  549,  548,  547,  546,
      545,  544,  543,  542,  541,  540,  539,  538,  536,  535,

      534,  533,  532,  530,  529,  528,  527,  525,  524,  523,
      522,  521,  520,  519,  518,  516,  513,  512,  511,  510,
      509,  508,  507,  506,  505,  504,  503,  502,  500,  499,
      498,  496,  495,  494,  493,  491,  490,  489,  488,  487,
      485,  483,  482,  481,  480,  479,  478,  477,  476,  475,
      474,  473,  472,  471,  470,  469,  468,  467,  466,  465,
      464,  463,  462,  460,  459,  458,  456,  455,  454,  453,
      452,  451,  450,  449,  448,  447,  446,  445,  444,  443,
      442,  441,  440,  439,  438,  437,  436,  435,  434,  433,
      432,  431,  430,  428,  427,  426,  425,  424,  422,  421,

      420,  419,  418,  417,  416,  414,  413,  412,  411,  409,
      408,  407,  405,  404,  403,  402,  401,  400,  399,  398,
      395,  394,  393,  392,  391,  390,  389,  388,  387,  386,
      385,  384,  382,  380,  379,  377,  376,  375,  373,  371,
      370,  369,  368,  367,  366,  365,  364,  363,  362,  361,
      360,  359,  358,  357,  355,  354,  353,  352,  351,  350,
      349,  348,  347,  346,  345,  344,  343,  342,  341,  339,
      338,  337,  336,  335,  334,  332,  330,  326,  325,  324,
      323,  322,  321,  320,  319,  317,  316,  314,  313,  311,
      310,  309,  308,  306,  305,  304,  303,  302,  300,  299,

      298,  297,  296,  294,  293,  292,  291,  289,  288,  287,
      284,  283,  282,  280,  279,  278,  277,  275,  271,  269,
      268,  267,  266,  265,  264,  263,  262,  261,  260,  259,
      257,  256,  255,  254,  253,  252,  251,  250,  249,  248,
      247,  246,  245,  244,  243,  242,  241,  240,  239,  238,
      237,  236,  235,  234,  233,  232,  231,  230,  229,  228,
      227,  226,  225,  224,  223,  222,  221,  220,  219,  218,
      217,  216,  215,  212,  211,  209,  208,  206,  205,  204,
      203,  202,  199,  195,  188,  186,  185,  184,  183,  181,
      180,  179,  177,  176,  175,  174,  172,  170,  169,  166,

      164,  163,  162,  159,  158,  157,  154,  153,  150,  147,
      145,  143,  138,  134,  132,  131,  130,  126,  120,  117,
      115,  114,  111,  110,  109,  108,  107,  106,  105,  103,
      101,   99,   98,   97,   96,   95,   93,   90,   89,   88,
       82,   79,   78,   77,   75,   73,   71,   70,   69,   68,
       67,   66,   65,   63,   61,   59,   58,   57,   56,   55,
       53,   49, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,

     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.lex"
#define INITIAL 0
#define YY_NEVER_INTERACTIVE 1
#define YY_STACK_USED 1
#line 10 "lexer.lex"
#ifdef WIN32
#pragma warning(disable:4127) // while(1) warning
#pragma warning(disable:4102) // unreferenced label warning
#pragma warning(disable:4505) // unreferenced local function
#pragma warning(disable:4267) // smaller type conversion warnings
#pragma warning(disable:4244) // smaller type conversion warnings
#pragma warning(disable:4702) // unreachable code in stl library on relesae
#pragma warning(disable:4211) // defining something as extern and then later on as static
#endif

#include <cstdlib>
#include <stdio.h>
#include <string.h>
#include "lexer.h"
#include "parser.yy.cc.h"

int yyline=1;
int yyerr=0;

void yy_done_parsing() {
	yy_delete_buffer( YY_CURRENT_BUFFER );
	
	delete yy_start_stack;
	yy_start_stack = 0;
	
	yy_init = 1;
}
#define s_global 1

#define s_camera 2

#define s_bbox 3

#define s_mesh 4

#define s_instance 5

#define s_light 6

#define s_pointlight 7

#define s_spherelight 8

#define s_squarelight 9

#define s_material 10

#define s_multimaterial 11

#define s_diffuse 12

#define s_indirectdiffuse 13

#define s_phong 14

#define s_stone 15

#define s_stonebump 16

#define s_reflective 17

#define s_refractive 18

#define s_sphere 19

#define s_blpatch 20

#define s_p0 21

#define s_matrix 22

#define s_hdr 23

#line 1301 "lexer.yy.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 75 "lexer.lex"


#line 1455 "lexer.yy.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1182 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 1181 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 77 "lexer.lex"
{ return YY_TRUE; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 78 "lexer.lex"
{ return YY_TRUE; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 79 "lexer.lex"
{ return YY_TRUE; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 80 "lexer.lex"
{ return YY_TRUE; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 82 "lexer.lex"
{ return YY_FALSE; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 83 "lexer.lex"
{ return YY_FALSE; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 84 "lexer.lex"
{ return YY_FALSE; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 85 "lexer.lex"
{ return YY_FALSE; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 87 "lexer.lex"
{ return YY_MATH_COS; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 88 "lexer.lex"
{ return YY_MATH_SIN; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 89 "lexer.lex"
{ return YY_MATH_TAN; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 90 "lexer.lex"
{ return YY_MATH_ACOS; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 91 "lexer.lex"
{ return YY_MATH_ASIN; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 92 "lexer.lex"
{ return YY_MATH_ATAN; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 93 "lexer.lex"
{ return YY_MATH_ATAN2; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 94 "lexer.lex"
{ return YY_MATH_LN; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 95 "lexer.lex"
{ return YY_MATH_LOG; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 96 "lexer.lex"
{ return YY_MATH_EXP; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 97 "lexer.lex"
{ return YY_MATH_SQRT; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 98 "lexer.lex"
{ return YY_MATH_E; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 99 "lexer.lex"
{ return YY_MATH_PI; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 101 "lexer.lex"
{ return YY_LT; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 102 "lexer.lex"
{ return YY_GT; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 103 "lexer.lex"
{ return YY_LBOX; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 104 "lexer.lex"
{ return YY_LBOX; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 105 "lexer.lex"
{ return YY_LCURLY; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 106 "lexer.lex"
{ yy_pop_state(); return YY_RCURLY; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 107 "lexer.lex"
{ return YY_LPAREN; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 108 "lexer.lex"
{ return YY_RPAREN; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 109 "lexer.lex"
{ return YY_COMMA; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 110 "lexer.lex"
{ return YY_EQUAL; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 111 "lexer.lex"
{ return YY_PLUS; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 112 "lexer.lex"
{ return YY_MINUS; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 113 "lexer.lex"
{ return YY_MUL; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 114 "lexer.lex"
{ return YY_DIV; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 115 "lexer.lex"
{ return YY_CARAT; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 116 "lexer.lex"
{ return YY_BSLASH; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 117 "lexer.lex"
{ return YY_X; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 118 "lexer.lex"
{ yyline++; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 122 "lexer.lex"
{ yy_push_state(s_global); return YY_S_GLOBAL; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 123 "lexer.lex"
{ return YY_SIZE; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 124 "lexer.lex"
{ return YY_POS; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 125 "lexer.lex"
{ return YY_IMG_BGCOLOR; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 126 "lexer.lex"
{ return YY_IMG_FGCOLOR; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 127 "lexer.lex"
{ return YY_GL_BGCOLOR; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 128 "lexer.lex"
{ return YY_GL_SPHERE_SECTIONS; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 129 "lexer.lex"
{ return YY_GL_RENDER_LIGHTS; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 130 "lexer.lex"
{ return YY_GL_RENDER_BBOX; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 131 "lexer.lex"
{ return YY_NUM_THREADS; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 132 "lexer.lex"
{ return YY_THREAD_JOB_SIZE; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 133 "lexer.lex"
{ return YY_RENDER_HANDLER_SLEEP; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 134 "lexer.lex"
{ return YY_RENDER_THREAD_SLEEP; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 135 "lexer.lex"
{ return YY_RENDER_SPINLOCK_SLEEP; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 136 "lexer.lex"
{ return YY_GAUSSIAN_BLUR_MAX; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 137 "lexer.lex"
{ return YY_GAUSSIAN_BLUR_SIGMA; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 138 "lexer.lex"
{ return YY_HEADLESS; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 139 "lexer.lex"
{ return YY_TRIANGLE_TEST; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 140 "lexer.lex"
{ return YY_PROJECTION; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 141 "lexer.lex"
{ return YY_BARYCENTRIC; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 142 "lexer.lex"
{ return YY_PLUCKER; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 143 "lexer.lex"
{ return YY_MOLLER; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 144 "lexer.lex"
{ return YY_BOX_COST; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 145 "lexer.lex"
{ return YY_OBJECT_COST; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 146 "lexer.lex"
{ return YY_PFM; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 147 "lexer.lex"
{ return YY_ANTI_ALIAS; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 148 "lexer.lex"
{ return YY_MAX_DIFFUSE_BOUNCE; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 149 "lexer.lex"
{ return YY_MAX_IOR_BOUNCE; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 150 "lexer.lex"
{ return YY_HDR_BLOOM_POWER; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 152 "lexer.lex"
{ yy_push_state(s_camera); return YY_S_CAMERA; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 153 "lexer.lex"
{ return YY_POS; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 154 "lexer.lex"
{ return YY_DIR; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 155 "lexer.lex"
{ return YY_LOOKAT; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 156 "lexer.lex"
{ return YY_UP; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 157 "lexer.lex"
{ return YY_FOV; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 158 "lexer.lex"
{ return YY_ASPECT; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 159 "lexer.lex"
{ return YY_MIN_DRAW; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 160 "lexer.lex"
{ return YY_MAX_DRAW; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 162 "lexer.lex"
{ yy_push_state(s_p0); return YY_S_P0; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 163 "lexer.lex"
{ return YY_SPIRAL_NUM_SPHERES; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 164 "lexer.lex"
{ return YY_SPIRAL_RADIUS; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 165 "lexer.lex"
{ return YY_LORENZ_DT; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 166 "lexer.lex"
{ return YY_LORENZ_MIN_DISTANCE; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 167 "lexer.lex"
{ return YY_LORENZ_MAX_DISTANCE; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 168 "lexer.lex"
{ return YY_LORENZ_SIGMA; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 169 "lexer.lex"
{ return YY_LORENZ_RHO; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 170 "lexer.lex"
{ return YY_LORENZ_BETA; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 171 "lexer.lex"
{ return YY_LORENZ_RADIUS; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 172 "lexer.lex"
{ return YY_LORENZ_NUM_SPHERES; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 173 "lexer.lex"
{ return YY_LORENZ_START; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 175 "lexer.lex"
{ yy_push_state(s_mesh); return YY_S_MESH; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 176 "lexer.lex"
{ return YY_LOAD; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 178 "lexer.lex"
{ yy_push_state(s_instance); return YY_S_INSTANCE; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 179 "lexer.lex"
{ return YY_GEOMETRY; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 181 "lexer.lex"
{ yy_push_state(s_light); return YY_S_LIGHT; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 182 "lexer.lex"
{ yy_pop_state(); yy_push_state(s_pointlight); return YY_S_POINTLIGHT; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 183 "lexer.lex"
{ yy_pop_state(); yy_push_state(s_spherelight); return YY_S_SPHERELIGHT; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 184 "lexer.lex"
{ yy_pop_state(); yy_push_state(s_squarelight); return YY_S_SQUARELIGHT; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 186 "lexer.lex"
{ return YY_POS; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 187 "lexer.lex"
{ return YY_COLOR; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 188 "lexer.lex"
{ return YY_WATTAGE; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 189 "lexer.lex"
{ return YY_NUM_SAMPLES; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 191 "lexer.lex"
{ return YY_POS; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 192 "lexer.lex"
{ return YY_COLOR; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 193 "lexer.lex"
{ return YY_WATTAGE; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 194 "lexer.lex"
{ return YY_NUM_SAMPLES; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 195 "lexer.lex"
{ return YY_P1; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 196 "lexer.lex"
{ return YY_P2; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 198 "lexer.lex"
{ return YY_POS; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 199 "lexer.lex"
{ return YY_COLOR; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 200 "lexer.lex"
{ return YY_WATTAGE; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 201 "lexer.lex"
{ return YY_NUM_SAMPLES; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 202 "lexer.lex"
{ return YY_RADIUS; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 204 "lexer.lex"
{ yy_push_state(s_material); return YY_S_MATERIAL; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 205 "lexer.lex"
{ yy_push_state(s_multimaterial); return YY_S_MULTIMATERIAL; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 207 "lexer.lex"
{ yy_pop_state(); yy_push_state(s_diffuse); return YY_S_DIFFUSE; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 208 "lexer.lex"
{                 yy_push_state(s_diffuse); return YY_S_DIFFUSE; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 210 "lexer.lex"
{ yy_pop_state(); yy_push_state(s_indirectdiffuse); return YY_S_INDIRECT_DIFFUSE; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 211 "lexer.lex"
{                yy_push_state(s_indirectdiffuse); return YY_S_INDIRECT_DIFFUSE; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 213 "lexer.lex"
{ yy_pop_state(); yy_push_state(s_phong); return YY_S_PHONG; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 214 "lexer.lex"
{                 yy_push_state(s_phong); return YY_S_PHONG; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 216 "lexer.lex"
{ yy_pop_state(); yy_push_state(s_stone); return YY_S_STONE; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 217 "lexer.lex"
{                 yy_push_state(s_stone); return YY_S_STONE; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 219 "lexer.lex"
{ yy_pop_state(); yy_push_state(s_stonebump); return YY_S_STONEBUMP; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 220 "lexer.lex"
{                 yy_push_state(s_stonebump); return YY_S_STONEBUMP; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 222 "lexer.lex"
{ yy_pop_state(); yy_push_state(s_reflective); return YY_S_REFLECTIVE; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 223 "lexer.lex"
{                 yy_push_state(s_reflective); return YY_S_REFLECTIVE; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 225 "lexer.lex"
{ yy_pop_state(); yy_push_state(s_refractive); return YY_S_REFRACTIVE; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 226 "lexer.lex"
{                 yy_push_state(s_refractive); return YY_S_REFRACTIVE; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 228 "lexer.lex"
{ return YY_COLOR; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 229 "lexer.lex"
{ return YY_WEIGHT; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 230 "lexer.lex"
{ return YY_WEIGHT; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 231 "lexer.lex"
{ return YY_AMBIENT; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 232 "lexer.lex"
{ return YY_COLOR; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 233 "lexer.lex"
{ return YY_N; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 234 "lexer.lex"
{ return YY_WEIGHT; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 235 "lexer.lex"
{ return YY_WEIGHT; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 236 "lexer.lex"
{ return YY_IOR; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 237 "lexer.lex"
{ return YY_WEIGHT; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 238 "lexer.lex"
{ return YY_COLOR_A; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 239 "lexer.lex"
{ return YY_COLOR_B; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 240 "lexer.lex"
{ return YY_WEIGHT; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 241 "lexer.lex"
{ return YY_AMPLITUDE; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 242 "lexer.lex"
{ return YY_WEIGHT; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 245 "lexer.lex"
{ yy_push_state(s_sphere); return YY_S_SPHERE; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 246 "lexer.lex"
{ return YY_CENTER; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 247 "lexer.lex"
{ return YY_RADIUS; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 249 "lexer.lex"
{ yy_push_state(s_blpatch); return YY_S_BLPATCH; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 250 "lexer.lex"
{ return YY_P00; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 251 "lexer.lex"
{ return YY_P01; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 252 "lexer.lex"
{ return YY_P10; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 253 "lexer.lex"
{ return YY_P11; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 254 "lexer.lex"
{ return YY_U_CONSTRAINT; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 255 "lexer.lex"
{ return YY_V_CONSTRAINT; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 257 "lexer.lex"
{ yy_push_state(s_matrix); return YY_S_MATRIX; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 258 "lexer.lex"
{ return YY_PUSH; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 259 "lexer.lex"
{ return YY_POP; }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 260 "lexer.lex"
{ return YY_SET_IDENTITY; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 261 "lexer.lex"
{ return YY_ROTATE; }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 262 "lexer.lex"
{ return YY_TRANSLATE; }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 263 "lexer.lex"
{ return YY_SCALE; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 265 "lexer.lex"
{ yylval.str = _strdup(yytext); return YY_STRING; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 266 "lexer.lex"
{ yylval.integer = atoi(yytext); return YY_PARSE_INT; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 267 "lexer.lex"
{ yylval.real = (float)atof(yytext); return YY_REAL; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 269 "lexer.lex"
// eat up whitespace
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 270 "lexer.lex"
// eat up comments 
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 271 "lexer.lex"
{ printf("\nParse error #%d line %d near: %s\n", ++yyerr, yyline, yytext); }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 273 "lexer.lex"
ECHO;
	YY_BREAK
#line 2381 "lexer.yy.cc"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(s_global):
			case YY_STATE_EOF(s_camera):
			case YY_STATE_EOF(s_bbox):
			case YY_STATE_EOF(s_mesh):
			case YY_STATE_EOF(s_instance):
			case YY_STATE_EOF(s_light):
			case YY_STATE_EOF(s_pointlight):
			case YY_STATE_EOF(s_spherelight):
			case YY_STATE_EOF(s_squarelight):
			case YY_STATE_EOF(s_material):
			case YY_STATE_EOF(s_multimaterial):
			case YY_STATE_EOF(s_diffuse):
			case YY_STATE_EOF(s_indirectdiffuse):
			case YY_STATE_EOF(s_phong):
			case YY_STATE_EOF(s_stone):
			case YY_STATE_EOF(s_stonebump):
			case YY_STATE_EOF(s_reflective):
			case YY_STATE_EOF(s_refractive):
			case YY_STATE_EOF(s_sphere):
			case YY_STATE_EOF(s_blpatch):
			case YY_STATE_EOF(s_p0):
			case YY_STATE_EOF(s_matrix):
			case YY_STATE_EOF(s_hdr):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1182 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1182 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1181);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 273 "lexer.lex"

