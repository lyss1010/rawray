#line 2 "lexer.yy.cc"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern int yylineno;
int yylineno = 1;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 86
#define YY_END_OF_BUFFER 87
static yyconst short int yy_acclist[251] =
    {   0,
       87,   85,   86,   83,   85,   86,   84,   86,   80,   85,
       86,   85,   86,   82,   85,   86,   85,   86,   80,   83,
       85,   86,   79,   85,   86,   78,   85,   86,   85,   86,
       85,   86,   85,   86,   14,   85,   86,   85,   86,   85,
       86,   85,   86,   85,   86,   85,   86,   85,   86,   85,
       86,   85,   86,   81,   85,   86,   86,   83,   86,   80,
       86,   86,   82,   86,   86,   80,   83,   86,   79,   86,
       78,   86,   86,   86,   86,   14,   86,   86,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   81,   86,   86,
       86,   86,   86,   86,   86,   86,   86,   86,   86,   86,

       86,   86,   86,   86,   86,   86,   86,   86,   86,   83,
       80,   77,   82,   80,   83,   79,   79,   78,   79,   78,
       14,   10,   41,   15,   81,   36,   57,   58,   59,   54,
       55,   56,   77,    3,   12,   10,   11,   41,   15,    4,
        5,   19,   34,   37,   33,   36,   57,   58,   59,   54,
       55,   56,   72,    6,    7,    8,    3,   12,   11,   60,
        4,   13,    5,   19,   34,   37,   33,   61,   72,    6,
        7,    8,    9,   69,   60,   68,   13,   17,   61,   70,
       71,    9,   32,    1,   16,   69,   66,   68,   74,   18,
       17,   38,   35,   70,   71,   75,   76,   32,    2,    1,

       16,   66,   74,   18,   38,   35,   40,   39,   73,   75,
       76,    2,   62,   53,   63,   73,   44,   62,   65,   67,
       53,   63,   48,   65,   64,   67,   23,   49,   64,   47,
       52,   21,   24,   25,   50,   43,   21,   31,   29,   20,
       22,   20,   51,   42,   30,   27,   46,   45,   26,   28
    } ;

static yyconst short int yy_accept[582] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    7,    9,   12,   14,   17,   19,   23,
       26,   29,   31,   33,   35,   38,   40,   42,   44,   46,
       48,   50,   52,   54,   57,   58,   60,   62,   63,   65,
       66,   69,   71,   73,   74,   75,   76,   78,   79,   80,
       81,   82,   83,   84,   85,   86,   87,   88,   90,   91,
       92,   93,   94,   95,   96,   97,   98,   99,  100,  101,
      102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
      112,  112,  113,  114,  114,  116,  117,  118,  119,  120,

      121,  121,  121,  121,  121,  121,  121,  122,  122,  122,
      122,  122,  122,  123,  123,  123,  124,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  126,  126,  126,  126,
      126,  126,  126,  127,  128,  129,  130,  131,  132,  133,
      133,  133,  133,  133,  133,  133,  133,  133,  133,  133,
      134,  134,  134,  134,  134,  135,  135,  135,  136,  136,
      136,  136,  137,  138,  138,  139,  140,  140,  140,  140,
      140,  141,  141,  141,  142,  142,  142,  142,  142,  142,
      142,  142,  142,  142,  142,  143,  143,  143,  143,  144,

      145,  145,  145,  145,  146,  147,  148,  149,  150,  151,
      152,  153,  153,  153,  153,  153,  154,  154,  154,  154,
      154,  154,  155,  156,  157,  157,  158,  158,  158,  159,
      159,  159,  159,  160,  161,  161,  161,  161,  161,  161,
      162,  162,  163,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  164,  165,  165,  165,  165,  166,  167,
      167,  167,  167,  167,  167,  168,  169,  169,  169,  169,
      170,  170,  170,  170,  170,  170,  171,  172,  173,  174,
      174,  174,  174,  174,  174,  175,  176,  176,  176,  176,
      176,  177,  177,  178,  178,  178,  178,  178,  178,  178,

      178,  178,  178,  178,  179,  179,  179,  179,  179,  179,
      180,  180,  181,  182,  182,  182,  182,  182,  182,  183,
      184,  184,  185,  186,  186,  187,  187,  187,  188,  189,
      190,  190,  190,  190,  190,  190,  190,  191,  191,  191,
      191,  191,  192,  193,  194,  194,  194,  194,  195,  196,
      196,  197,  198,  198,  198,  199,  200,  201,  202,  202,
      202,  202,  203,  204,  204,  204,  204,  204,  204,  204,
      205,  205,  205,  205,  205,  205,  205,  205,  205,  206,
      207,  208,  209,  209,  210,  211,  212,  212,  212,  212,
      212,  212,  212,  212,  212,  212,  212,  213,  214,  214,

      214,  214,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  216,  217,  217,  218,
      218,  218,  218,  218,  218,  218,  218,  218,  218,  219,
      220,  220,  221,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  223,  223,
      223,  223,  223,  223,  224,  224,  224,  224,  224,  225,
      226,  227,  227,  227,  227,  227,  227,  228,  228,  228,
      228,  228,  228,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  230,  230,  230,  230,
      230,  230,  230,  230,  230,  230,  230,  230,  230,  230,

      230,  231,  232,  232,  232,  232,  233,  233,  233,  233,
      233,  233,  233,  234,  235,  235,  235,  235,  236,  236,
      237,  237,  237,  237,  238,  238,  238,  238,  238,  238,
      238,  238,  238,  238,  238,  238,  238,  238,  239,  239,
      239,  239,  239,  239,  239,  239,  239,  239,  239,  240,
      240,  240,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  242,  243,  243,  243,  243,  243,  243,  244,
      245,  246,  246,  246,  247,  248,  249,  250,  250,  251,
      251
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    7,    1,    1,    1,    8,    5,
        5,    5,    5,    9,    5,   10,    5,   11,   12,   13,
       14,   15,   15,   15,   15,   15,   15,    1,    1,    1,
        5,    1,    1,    1,   16,   17,   18,   19,   20,   21,
       22,   23,   24,    1,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
        1,    5,    1,    1,    1,    1,   16,   17,   18,   19,

       20,   21,   22,   23,   24,    1,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,    5,    1,   41,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[42] =
    {   0,
        1,    2,    3,    1,    1,    1,    1,    1,    1,    2,
        2,    2,    2,    2,    2,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1
    } ;

static yyconst short int yy_base[585] =
    {   0,
        0,    0,   41,    0,   67,    0,   83,   99,  121,  141,
      155,  171,  187,  203,  223,  243,  263,  283,  305,  325,
      889,  890,   83,  890,  886,  881,    0,  878,   94,  351,
       98,   83,   96,  861,  116,  858,  855,  104,  862,  134,
      852,  135,   94,  878,  890,  137,  877,  872,    0,  869,
      171,  357,  128,  116,  847,  851,  153,   98,  854,  846,
      160,  837,  173,  851,  174,  854,  845,  866,  188,  843,
      837,  184,  148,  194,  835,  216,  840,  224,  214,  843,
      210,  833,  220,  845,  123,  844,  228,  228,  260,  857,
      852,  855,    0,  848,  268,  853,  365,  852,  371,    0,

      824,  828,  835,  823,  816,  815,  845,  830,  815,  815,
      810,  820,  839,  818,  806,  836,  835,  806,  802,  800,
      817,  804,  808,  798,  801,  158,  826,  792,  246,  802,
      809,  797,  790,  794,  802,  160,  250,  784,  178,  781,
      790,  784,  814,  813,  812,  811,  810,  809,  808,  198,
      780,  784,  263,  774,  772,  777,  785,  164,  779,  800,
      768,  772,  771,  778,  795,  780,  778,  792,  776,  758,
      768,  788,  787,  765,  785,  784,   82,  762,  768,  757,
      780,  761,  746,  777,  750,  761,  743,  286,  759,  754,
      743,  750,  749,  274,  768,  750,  734,  747,  764,  763,

      739,  290,  295,  761,  760,  759,  758,  757,  756,  755,
      754,  736,  727,  725,  723,  749,  716,  715,  724,  727,
      714,  743,  742,  297,  711,  740,  724,  714,  737,  722,
      721,  702,  733,  732,  296,  717,  300,  698,  711,  728,
      697,  726,  725,  693,  697,  691,  705,  694,  698,  697,
      699,  282,  695,  715,  696,  692,  696,  711,  710,  252,
      310,  679,  315,  678,  707,  706,  687,  672,  673,  702,
      687,  682,  666,  672,  683,  696,  695,  694,  693,  678,
      667,  672,  665,  662,  687,  686,  653,  320,  670,  665,
      682,  663,  680,  655,  658,  655,  653,  658,  656,  641,

      326,  642,  641,  670,  637,  288,  636,  653,  652,  665,
      632,  663,  662,  641,  630,  628,  620,  633,  656,  655,
      636,  653,  652,  635,  650,  619,  616,  647,  646,  645,
      630,  619,  628,  621,  622,  609,  638,  328,  623,  618,
      372,  635,  634,  633,  597,  596,  600,  629,  628,  609,
      626,  625,  410,  359,  624,  623,  622,  621,  602,  597,
      588,  617,  616,  583,  596,  587,  582,  581,  592,  609,
      592,  593,  386,  592,  577,  583,  331,  337,  603,  602,
      890,  890,  564,  600,  599,  598,    0,  579,  564,  326,
      562,  333,  365,  390,  561,  579,  592,  591,  554,  567,

      570,  587,  373,  559,  248,  292,  562,  567,  557,  560,
      551,  379,  556,  391,  555,  578,  577,  544,  890,  539,
      548,  548,  555,  544,  550,  555,  543,  550,  566,  565,
      528,  563,  562,  396,  537,  527,  395,  537,  398,  540,
      537,  525,  538,  528,  535,  525,  524,  550,  535,  413,
      414,  401,  526,  890,  522,  516,  402,  523,  544,  543,
      542,  508,  514,  519,  522,  507,  890,  512,  511,  520,
      517,  516,  890,  421,  509,  426,  508,  415,  501,  495,
      513,  494,  424,  497,  491,  523,  492,  504,  499,  487,
      491,  499,  489,  498,  491,  490,  481,  480,  489,  478,

      890,  890,  487,  476,  428,  506,  473,  482,  470,  472,
      485,  434,  890,  890,  468,  467,  480,  890,  479,  890,
      437,  482,  473,  494,  462,  465,  465,  439,  467,  442,
      465,  474,  473,  447,  444,  436,  451,  890,  443,  450,
      444,  442,  445,  446,  437,  435,  442,  440,  890,  432,
      425,  454,  434,  447,  427,  432,  433,  432,  381,  374,
      386,  890,  399,  374,  337,  307,  316,  212,  890,  890,
      890,  186,  184,  890,  890,  890,  890,  140,  890,  890,
      480,  483,  485,  159
    } ;

static yyconst short int yy_def[585] =
    {   0,
      580,    1,  580,    3,    3,    5,    3,    3,    5,    5,
        3,    3,    3,    3,    3,    3,    3,    3,    5,    5,
      580,  580,  580,  580,  580,  581,  582,  583,  580,  580,
      584,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  581,  582,  583,
      580,  580,  584,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      581,  580,  582,  583,  580,  580,  580,  580,  580,   53,

      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,

      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,

      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  353,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,

      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,

      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,    0,
      580,  580,  580,  580
    } ;

static yyconst short int yy_nxt[932] =
    {   0,
       22,   23,   24,   23,   25,   26,   27,   28,   29,   30,
       31,   31,   31,   31,   31,   32,   22,   33,   34,   35,
       22,   36,   22,   37,   22,   38,   39,   22,   22,   40,
       22,   41,   42,   43,   22,   22,   22,   22,   22,   22,
       44,   45,   46,   24,   46,   47,   48,   49,   50,   51,
       52,   53,   53,   53,   53,   53,   54,   45,   55,   56,
       57,   45,   58,   59,   60,   45,   61,   45,   62,   45,
       63,   45,   64,   65,   66,   45,   45,   67,   45,   45,
       45,   68,   69,  235,   89,   70,   89,   71,   45,   45,
       45,   89,   72,   73,   45,   95,   74,   89,   45,   98,

      101,   75,   89,   45,   45,   45,   45,   99,  236,  125,
       76,  104,   77,  128,   45,  102,  103,  107,   78,   45,
       45,   45,   45,  129,  105,  126,   76,  112,   77,   98,
       45,  113,  114,  101,   78,   45,   54,   99,   89,   56,
       89,   45,  156,  108,  116,   89,   79,   45,  102,  103,
       77,  105,  121,  109,  107,   45,   54,  117,  122,   56,
      100,   45,  118,  140,  123,  124,   79,   45,  119,  579,
       77,  141,   95,  185,   89,   45,   80,   45,   45,   89,
      108,  186,   45,  162,   77,  173,   45,  113,  114,  198,
      109,   45,   80,   45,   45,  220,  117,  122,   45,  173,

       77,  133,   45,  578,  124,  101,  201,   45,   45,   45,
       45,  113,  139,  212,   45,  577,   81,  117,   45,  173,
      136,  103,  142,   45,   45,   45,   45,  144,  145,  146,
       45,  576,   81,  117,   45,  147,  148,  149,  152,   45,
       82,  113,  150,  117,   45,   45,   45,  188,  154,  437,
       45,  122,   83,  306,   45,  113,  158,  159,  124,   84,
       82,   89,  189,   89,   45,   45,   45,  307,   89,   95,
       45,   89,   83,  438,   45,  252,   89,  190,  191,   84,
       85,  199,  166,  252,   45,   45,   45,  188,  215,  306,
       45,  261,   77,  439,   86,  165,  263,  235,  278,   45,

       85,  288,  189,  307,   45,   45,   45,  253,  262,  279,
       45,  261,   77,  264,   86,  253,  263,  190,  191,   45,
       54,  288,  236,   56,  440,   45,  289,  338,  262,  338,
       87,   45,  412,  264,   77,  575,  574,   88,  414,   45,
       54,  420,  339,   56,  339,   45,  289,  413,  423,  421,
       87,   45,   96,  415,   77,  424,  573,   88,   96,   45,
      394,   97,   97,   97,   97,   97,   96,   97,   97,   97,
       97,   97,   96,  373,  434,   97,   97,   97,   97,   97,
      412,   97,   97,   97,   97,   97,  395,  373,  425,  435,
      396,  394,  414,  572,  374,  413,  437,  434,  426,  439,

      563,  571,  478,  483,  375,  376,  570,  415,  374,  377,
      378,  387,  435,  569,  474,  476,  478,  395,  375,  376,
      438,  396,  474,  377,  378,  483,  388,  476,  389,  521,
      440,  475,  477,  479,  484,  530,  390,  391,  521,  475,
      541,  392,  393,  530,  477,  541,  554,  479,  554,  568,
      567,  566,  565,  564,  522,  563,  484,  562,  561,  560,
      523,  559,  558,  522,  557,  556,  531,  553,  552,  523,
      551,  542,  550,  549,  531,  548,  542,  555,  547,  555,
       91,   91,   91,   93,   93,   94,   94,   94,  546,  545,
      544,  543,  540,  539,  538,  524,  537,  536,  535,  534,

      533,  532,  529,  528,  527,  526,  525,  524,  520,  519,
      518,  517,  516,  515,  514,  513,  512,  511,  510,  509,
      508,  507,  506,  505,  486,  504,  503,  502,  501,  500,
      499,  498,  497,  496,  495,  494,  493,  492,  491,  490,
      489,  488,  487,  461,  486,  459,  485,  482,  481,  480,
      473,  448,  472,  471,  470,  469,  468,  467,  466,  465,
      464,  463,  462,  433,  461,  460,  459,  429,  458,  457,
      456,  455,  454,  453,  452,  451,  450,  449,  417,  448,
      447,  446,  445,  444,  443,  442,  441,  436,  433,  432,
      431,  430,  429,  397,  428,  427,  422,  419,  418,  386,

      385,  417,  416,  380,  379,  411,  410,  409,  408,  407,
      370,  406,  405,  404,  403,  402,  401,  363,  362,  400,
      399,  398,  358,  357,  397,  355,  386,  385,  384,  349,
      348,  383,  382,  381,  380,  379,  342,  372,  371,  370,
      369,  368,  367,  366,  365,  364,  363,  329,  362,  361,
      360,  325,  359,  358,  357,  356,  355,  319,  354,  353,
      352,  351,  350,  349,  348,  347,  310,  346,  345,  344,
      343,  342,  341,  340,  337,  336,  335,  334,  333,  332,
      331,  293,  330,  329,  328,  327,  326,  286,  325,  324,
      323,  322,  321,  320,  319,  278,  277,  276,  318,  317,

      316,  315,  314,  270,  313,  312,  311,  310,  265,  309,
      308,  259,  258,  305,  304,  303,  254,  302,  301,  300,
      299,  298,  297,  296,  295,  294,  243,  293,  292,  240,
      291,  290,  287,  286,  233,  285,  284,  283,  229,  282,
      281,  226,  280,  277,  276,  275,  274,  273,  272,  271,
      270,  269,  268,  267,  266,  211,  210,  209,  208,  207,
      206,  205,  265,  260,  259,  258,  257,  256,  255,  254,
      251,  250,  249,  248,  247,  246,  245,  244,  243,  242,
      241,  240,  239,  238,  237,  176,  175,  234,  233,  172,
      232,  231,  230,  229,  228,  227,  226,  225,  224,  223,

      222,  160,  221,  219,  218,  217,  216,  214,  213,  211,
      210,  209,  208,  207,  206,  205,  204,  203,  202,  200,
      197,  196,  195,  194,  193,  192,  187,  127,  184,  183,
      182,  181,  180,  179,  178,  177,  176,  175,  174,  173,
      172,  171,  170,  169,  168,  167,  107,  166,  165,  164,
      163,  162,  161,   98,   96,   92,  160,   92,   90,  157,
      155,  153,  151,  117,  143,  138,  137,  127,  135,  125,
      134,  132,  131,  130,  106,  105,   92,   92,   90,  127,
      120,  115,  111,  110,  106,   92,   92,   90,  580,   21,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,

      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580
    } ;

static yyconst short int yy_chk[932] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    5,  177,   23,    5,   23,    5,    5,    5,
        5,   23,    5,    5,    5,   29,    5,   29,    5,   31,

       32,    5,   29,    5,    7,    7,    7,   31,  177,   43,
        7,   33,    7,   58,    7,   32,   32,   35,    7,    7,
        8,    8,    8,   58,   33,   43,    8,   38,    8,   53,
        8,   38,   38,   54,    8,    8,    9,   53,   46,    9,
       46,    9,   85,   35,   40,   46,    9,    9,   54,   54,
        9,   85,   42,   35,   57,    9,   10,   40,   42,   10,
      584,   10,   40,   73,   42,   42,   10,   10,   40,  578,
       10,   73,   51,  126,   51,   10,   11,   11,   11,   51,
       57,  126,   11,  136,   11,  158,   11,   61,   61,  136,
       57,   11,   12,   12,   12,  158,   63,   65,   12,  139,

       12,   63,   12,  573,   65,   69,  139,   12,   13,   13,
       13,   72,   72,  150,   13,  572,   13,   74,   13,  150,
       69,   69,   74,   13,   14,   14,   14,   76,   76,   76,
       14,  568,   14,   81,   14,   78,   78,   78,   81,   14,
       15,   79,   79,   83,   15,   15,   15,  129,   83,  405,
       15,   88,   15,  260,   15,   87,   87,   88,   88,   15,
       16,   89,  129,   89,   16,   16,   16,  260,   89,   95,
       16,   95,   16,  405,   16,  194,   95,  129,  129,   16,
       17,  137,  137,  252,   17,   17,   17,  188,  153,  306,
       17,  202,   17,  406,   17,  153,  203,  235,  224,   17,

       18,  237,  188,  306,   18,   18,   18,  194,  202,  224,
       18,  261,   18,  203,   18,  252,  263,  188,  188,   18,
       19,  288,  235,   19,  406,   19,  237,  301,  261,  338,
       19,   19,  377,  263,   19,  567,  566,   19,  378,   19,
       20,  390,  301,   20,  338,   20,  288,  377,  392,  390,
       20,   20,   30,  378,   20,  392,  565,   20,   52,   20,
      354,   30,   30,   30,   30,   30,   97,   52,   52,   52,
       52,   52,   99,  341,  403,   97,   97,   97,   97,   97,
      412,   99,   99,   99,   99,   99,  354,  373,  393,  403,
      354,  394,  414,  564,  341,  412,  437,  434,  393,  439,

      563,  561,  452,  457,  341,  341,  560,  414,  373,  341,
      341,  353,  434,  559,  450,  451,  478,  394,  373,  373,
      437,  394,  474,  373,  373,  483,  353,  476,  353,  505,
      439,  450,  451,  452,  457,  512,  353,  353,  521,  474,
      528,  353,  353,  530,  476,  541,  543,  478,  554,  558,
      557,  556,  555,  553,  505,  552,  483,  551,  550,  548,
      505,  547,  546,  521,  545,  544,  512,  542,  540,  521,
      539,  528,  537,  536,  530,  535,  541,  543,  534,  554,
      581,  581,  581,  582,  582,  583,  583,  583,  533,  532,
      531,  529,  527,  526,  525,  524,  523,  522,  519,  517,

      516,  515,  511,  510,  509,  508,  507,  506,  504,  503,
      500,  499,  498,  497,  496,  495,  494,  493,  492,  491,
      490,  489,  488,  487,  486,  485,  484,  482,  481,  480,
      479,  477,  475,  472,  471,  470,  469,  468,  466,  465,
      464,  463,  462,  461,  460,  459,  458,  456,  455,  453,
      449,  448,  447,  446,  445,  444,  443,  442,  441,  440,
      438,  436,  435,  433,  432,  431,  430,  429,  428,  427,
      426,  425,  424,  423,  422,  421,  420,  418,  417,  416,
      415,  413,  411,  410,  409,  408,  407,  404,  402,  401,
      400,  399,  398,  397,  396,  395,  391,  389,  388,  386,

      385,  384,  383,  380,  379,  376,  375,  374,  372,  371,
      370,  369,  368,  367,  366,  365,  364,  363,  362,  361,
      360,  359,  358,  357,  356,  355,  352,  351,  350,  349,
      348,  347,  346,  345,  344,  343,  342,  340,  339,  337,
      336,  335,  334,  333,  332,  331,  330,  329,  328,  327,
      326,  325,  324,  323,  322,  321,  320,  319,  318,  317,
      316,  315,  314,  313,  312,  311,  310,  309,  308,  307,
      305,  304,  303,  302,  300,  299,  298,  297,  296,  295,
      294,  293,  292,  291,  290,  289,  287,  286,  285,  284,
      283,  282,  281,  280,  279,  278,  277,  276,  275,  274,

      273,  272,  271,  270,  269,  268,  267,  266,  265,  264,
      262,  259,  258,  257,  256,  255,  254,  253,  251,  250,
      249,  248,  247,  246,  245,  244,  243,  242,  241,  240,
      239,  238,  236,  234,  233,  232,  231,  230,  229,  228,
      227,  226,  225,  223,  222,  221,  220,  219,  218,  217,
      216,  215,  214,  213,  212,  211,  210,  209,  208,  207,
      206,  205,  204,  201,  200,  199,  198,  197,  196,  195,
      193,  192,  191,  190,  189,  187,  186,  185,  184,  183,
      182,  181,  180,  179,  178,  176,  175,  174,  173,  172,
      171,  170,  169,  168,  167,  166,  165,  164,  163,  162,

      161,  160,  159,  157,  156,  155,  154,  152,  151,  149,
      148,  147,  146,  145,  144,  143,  142,  141,  140,  138,
      135,  134,  133,  132,  131,  130,  128,  127,  125,  124,
      123,  122,  121,  120,  119,  118,  117,  116,  115,  114,
      113,  112,  111,  110,  109,  108,  107,  106,  105,  104,
      103,  102,  101,   98,   96,   94,   92,   91,   90,   86,
       84,   82,   80,   77,   75,   71,   70,   68,   67,   66,
       64,   62,   60,   59,   56,   55,   50,   48,   47,   44,
       41,   39,   37,   36,   34,   28,   26,   25,   21,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,

      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580,  580,  580,  580,  580,  580,  580,  580,  580,  580,
      580
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.lex"
#define INITIAL 0
#define YY_NEVER_INTERACTIVE 1
#define YY_STACK_USED 1
#line 10 "lexer.lex"
#ifdef WIN32
#pragma warning(disable:4127) // while(1) warning
#pragma warning(disable:4102) // unreferenced label warning
#pragma warning(disable:4505) // unreferenced local function
#pragma warning(disable:4267) // smaller type conversion warnings
#pragma warning(disable:4244) // smaller type conversion warnings
#endif

#include <cstdlib>
#include <stdio.h>
#include <string.h>
#include "parser.yy.cc.h"

int yyline=1;
#define global 1

#define camera 2

#define triangle 3

#define mesh 4

#define instance 5

#define light 6

#define pointlight 7

#define sphere 8

#define p0 9

#line 837 "lexer.yy.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 48 "lexer.lex"


#line 991 "lexer.yy.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 581 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 580 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 50 "lexer.lex"
{ return ENABLE; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 51 "lexer.lex"
{ return DISABLE; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 52 "lexer.lex"
{ return MATH_COS; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 53 "lexer.lex"
{ return MATH_SIN; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 54 "lexer.lex"
{ return MATH_TAN; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 55 "lexer.lex"
{ return MATH_ACOS; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 56 "lexer.lex"
{ return MATH_ASIN; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 57 "lexer.lex"
{ return MATH_ATAN; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 58 "lexer.lex"
{ return MATH_ATAN2; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 59 "lexer.lex"
{ return MATH_LN; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 60 "lexer.lex"
{ return MATH_LOG; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 61 "lexer.lex"
{ return MATH_EXP; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 62 "lexer.lex"
{ return MATH_SQRT; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 63 "lexer.lex"
{ return MATH_E; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 64 "lexer.lex"
{ return MATH_PI; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 66 "lexer.lex"
{ yy_push_state(global); return GLOBAL; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 67 "lexer.lex"
{ return WIDTH; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 68 "lexer.lex"
{ return HEIGHT; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 69 "lexer.lex"
{ return POS; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 70 "lexer.lex"
{ return IMG_BGCOLOR; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 71 "lexer.lex"
{ return GL_BGCOLOR; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 72 "lexer.lex"
{ return GL_SPHERE_SECTIONS; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 73 "lexer.lex"
{ return NUM_THREADS; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 74 "lexer.lex"
{ return RENDER_X_BLOCK; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 75 "lexer.lex"
{ return RENDER_Y_BLOCK; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 76 "lexer.lex"
{ return RENDER_HANDLER_SLEEP; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 77 "lexer.lex"
{ return RENDER_THREAD_SLEEP; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 78 "lexer.lex"
{ return RENDER_SPINLOCK_SLEEP; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 79 "lexer.lex"
{ return GAUSSIAN_BLUR_MAX; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 80 "lexer.lex"
{ return GAUSSIAN_BLUR_SIGMA; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 81 "lexer.lex"
{ return GL_RENDER_LIGHTS; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 83 "lexer.lex"
{ yy_push_state(camera); return CAMERA; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 84 "lexer.lex"
{ return POS; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 85 "lexer.lex"
{ return DIR; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 86 "lexer.lex"
{ return LOOKAT; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 87 "lexer.lex"
{ return UP; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 88 "lexer.lex"
{ return FOV; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 89 "lexer.lex"
{ return ASPECT; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 90 "lexer.lex"
{ return MIN_DRAW; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 91 "lexer.lex"
{ return MAX_DRAW; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 93 "lexer.lex"
{ yy_push_state(p0); return P0; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 94 "lexer.lex"
{ return SPIRAL_NUM_SPHERES; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 95 "lexer.lex"
{ return SPIRAL_RADIUS; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 96 "lexer.lex"
{ return LORENZ_DT; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 97 "lexer.lex"
{ return LORENZ_MIN_DISTANCE; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 98 "lexer.lex"
{ return LORENZ_MAX_DISTANCE; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 99 "lexer.lex"
{ return LORENZ_SIGMA; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 100 "lexer.lex"
{ return LORENZ_RHO; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 101 "lexer.lex"
{ return LORENZ_BETA; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 102 "lexer.lex"
{ return LORENZ_RADIUS; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 103 "lexer.lex"
{ return LORENZ_NUM_SPHERES; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 104 "lexer.lex"
{ return LORENZ_START; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 106 "lexer.lex"
{ yy_push_state(triangle); return TRIANGLE; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 107 "lexer.lex"
{ return V1; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 108 "lexer.lex"
{ return V2; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 109 "lexer.lex"
{ return V3; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 110 "lexer.lex"
{ return N1; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 111 "lexer.lex"
{ return N2; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 112 "lexer.lex"
{ return N3; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 114 "lexer.lex"
{ yy_push_state(mesh); return MESH; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 115 "lexer.lex"
{ return LOAD; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 117 "lexer.lex"
{ yy_push_state(instance); return INSTANCE; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 118 "lexer.lex"
{ return GEOMETRY; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 120 "lexer.lex"
{ return PUSHMATRIX; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 121 "lexer.lex"
{ return POPMATRIX; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 122 "lexer.lex"
{ return ROTATE; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 123 "lexer.lex"
{ return TRANSLATE; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 124 "lexer.lex"
{ return SCALE; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 126 "lexer.lex"
{ yy_push_state(light); return LIGHT; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 127 "lexer.lex"
{ yy_pop_state(); yy_push_state(pointlight); return POINTLIGHT; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 128 "lexer.lex"
{ return COLOR; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 129 "lexer.lex"
{ return POS; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 130 "lexer.lex"
{ return WATTAGE; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 132 "lexer.lex"
{ yy_push_state(sphere); return SPHERE; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 133 "lexer.lex"
{ return CENTER; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 134 "lexer.lex"
{ return RADIUS; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 136 "lexer.lex"
{ yylval.str = _strdup(yytext); return STRING; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 137 "lexer.lex"
{ yylval.integer = atoi(yytext); return PARSE_INT; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 138 "lexer.lex"
{ yylval.real = (float)atof(yytext); return REAL; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 140 "lexer.lex"
{ return yytext[0]; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 141 "lexer.lex"
{ yy_pop_state(); return yytext[0]; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 142 "lexer.lex"
// eat up comments 
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 143 "lexer.lex"
// eat up whitespace
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 144 "lexer.lex"
{ yyline++; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 145 "lexer.lex"
{ printf("\nParse error line %d near: %s\n", yyline, yytext); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 147 "lexer.lex"
ECHO;
	YY_BREAK
#line 1512 "lexer.yy.cc"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(global):
			case YY_STATE_EOF(camera):
			case YY_STATE_EOF(triangle):
			case YY_STATE_EOF(mesh):
			case YY_STATE_EOF(instance):
			case YY_STATE_EOF(light):
			case YY_STATE_EOF(pointlight):
			case YY_STATE_EOF(sphere):
			case YY_STATE_EOF(p0):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 581 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 581 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 580);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 147 "lexer.lex"

