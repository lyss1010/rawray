#line 2 "lexer.yy.cc"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern int yylineno;
int yylineno = 1;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 123
#define YY_END_OF_BUFFER 124
static yyconst short int yy_acclist[390] =
    {   0,
      124,  122,  123,  120,  122,  123,   32,  123,  122,  123,
      121,  122,  123,  122,  123,   22,  122,  123,   23,  122,
      123,   28,  122,  123,   26,  122,  123,   24,  120,  122,
      123,   27,  122,  123,  119,  122,  123,   29,  122,  123,
      118,  122,  123,   16,  122,  123,   25,  122,  123,   17,
      122,  123,   18,  122,  123,   31,  122,  123,   19,  122,
      123,   30,  122,  123,  122,  123,  122,  123,  122,  123,
      122,  123,   14,  122,  123,  122,  123,  122,  123,  122,
      123,  122,  123,  122,  123,  122,  123,  122,  123,  122,
      123,   20,  122,  123,   21,  122,  123,  123,  120,  123,

      123,  121,  123,  123,   22,  123,   23,  123,   28,  123,
       26,  123,   24,  120,  123,   27,  123,  119,  123,   29,
      123,  118,  123,   16,  123,   25,  123,   17,  123,   18,
      123,   31,  123,   19,  123,   30,  123,  123,  123,  123,
      123,   14,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,   20,  123,   21,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      120,  117,  121,   22,   23,   28,   26,   24,  120,   27,

      119,  119,   29,  118,  119,  118,   16,   25,   17,   18,
       31,   19,   30,   14,   10,   65,   15,   20,   21,   60,
       81,   82,   83,   78,   79,   80,  117,    3,   12,   10,
       11,   65,   15,    4,    5,   36,   58,   61,   57,   60,
       81,   82,   83,   78,   79,   80,   96,  100,  113,  114,
      115,  116,    6,    7,    8,    3,   12,   11,   84,    4,
       13,    5,   36,   58,   61,   57,   85,   96,  100,  113,
      114,  115,  116,    6,    7,    8,    9,   93,   84,   92,
       13,   34,   85,   94,   95,   99,    9,   56,    1,   33,
       93,   90,   92,  109,   35,   55,   34,   62,   59,   94,

       95,   99,  110,  111,  112,   56,    2,    1,   33,   90,
      109,   35,   55,   54,   62,   59,   64,   63,   97,  101,
      103,  105,  104,  108,  107,  110,  111,  112,    2,   86,
      102,   77,   50,   54,   87,   98,   97,  101,  103,  106,
      105,  104,  108,  107,   68,   86,  102,   89,   91,   77,
       50,   87,   98,  106,   72,   89,   88,   91,   41,   52,
       73,   88,   53,   71,   76,   53,   39,   42,   43,   51,
       74,   67,   39,   51,   49,   47,   37,   38,   40,   37,
       38,   75,   66,   48,   45,   70,   69,   44,   46
    } ;

static yyconst short int yy_accept[801] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    7,    9,   11,   14,   16,   19,   22,
       25,   28,   32,   35,   38,   41,   44,   47,   50,   53,
       56,   59,   62,   65,   67,   69,   71,   73,   76,   78,
       80,   82,   84,   86,   88,   90,   92,   95,   98,   99,
      101,  102,  104,  105,  107,  109,  111,  113,  116,  118,
      120,  122,  124,  126,  128,  130,  132,  134,  136,  138,
      139,  140,  141,  142,  144,  145,  146,  147,  148,  149,

      150,  151,  152,  153,  154,  155,  157,  159,  160,  161,
      162,  163,  164,  165,  166,  167,  168,  169,  170,  171,
      172,  173,  174,  175,  176,  177,  178,  179,  180,  181,
      182,  183,  184,  185,  186,  187,  188,  189,  190,  191,
      192,  192,  193,  194,  194,  195,  196,  197,  198,  200,
      201,  202,  203,  204,  205,  206,  207,  208,  209,  210,
      211,  212,  213,  214,  214,  214,  214,  214,  214,  214,
      214,  215,  215,  215,  215,  215,  215,  216,  216,  216,
      216,  217,  218,  218,  218,  218,  218,  218,  218,  218,
      218,  218,  219,  220,  220,  220,  220,  220,  220,  220,

      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  221,  222,  223,  224,  225,  226,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  228,  228,  228,  228,  228,  228,  229,
      229,  229,  230,  230,  230,  230,  231,  232,  232,  232,
      233,  234,  234,  234,  234,  234,  235,  235,  235,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  237,  237,  237,  237,  237,  237,
      238,  239,  239,  239,  239,  240,  241,  242,  243,  244,

      245,  246,  247,  247,  247,  247,  247,  247,  248,  248,
      248,  249,  249,  249,  249,  249,  249,  249,  249,  249,
      249,  250,  251,  252,  253,  253,  253,  254,  255,  256,
      256,  256,  257,  257,  257,  258,  258,  258,  258,  259,
      259,  260,  260,  260,  260,  260,  260,  261,  261,  262,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  264,  264,  264,  264,  264,
      264,  265,  266,  266,  266,  266,  266,  266,  267,  268,
      268,  268,  268,  268,  269,  269,  269,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  271,  272,  273,

      274,  274,  274,  275,  276,  277,  278,  278,  278,  278,
      278,  278,  278,  279,  279,  280,  280,  280,  280,  280,
      281,  281,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  283,
      283,  283,  283,  283,  283,  284,  284,  284,  285,  286,
      286,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  288,  288,  289,  289,  290,  291,  291,
      292,  292,  292,  292,  293,  294,  295,  295,  295,  295,
      295,  295,  295,  295,  295,  296,  296,  296,  296,  297,
      297,  297,  297,  297,  297,  298,  299,  300,  300,  300,

      300,  300,  301,  302,  302,  303,  303,  303,  303,  303,
      303,  303,  303,  304,  305,  305,  305,  306,  307,  308,
      309,  310,  310,  310,  310,  310,  311,  312,  312,  312,
      312,  312,  312,  312,  312,  312,  313,  313,  313,  314,
      314,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      316,  317,  318,  319,  319,  319,  320,  321,  322,  322,
      323,  324,  325,  326,  327,  328,  328,  328,  328,  328,
      328,  328,  328,  328,  328,  328,  329,  330,  331,  332,
      332,  332,  332,  333,  333,  333,  333,  333,  333,  334,
      334,  334,  334,  335,  335,  335,  335,  335,  335,  335,

      335,  335,  335,  336,  337,  338,  339,  340,  341,  342,
      343,  344,  345,  345,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  346,  347,  348,  349,  349,  350,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  352,  352,
      352,  352,  352,  352,  352,  352,  352,  352,  352,  352,
      353,  354,  355,  355,  355,  355,  355,  355,  356,  356,
      356,  356,  356,  357,  358,  359,  359,  359,  359,  359,
      359,  359,  359,  360,  361,  361,  361,  361,  361,  361,
      361,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  363,  364,  364,  364,  364,  364,

      364,  364,  364,  364,  364,  364,  364,  364,  364,  364,
      364,  364,  365,  366,  366,  366,  367,  367,  368,  368,
      368,  368,  368,  368,  368,  368,  369,  370,  371,  371,
      371,  371,  372,  372,  373,  373,  373,  373,  374,  374,
      374,  374,  374,  374,  374,  374,  374,  375,  375,  375,
      375,  375,  375,  375,  376,  376,  376,  376,  376,  376,
      376,  376,  376,  376,  376,  376,  377,  377,  377,  378,
      379,  379,  379,  379,  379,  379,  379,  379,  379,  379,
      380,  381,  382,  382,  382,  382,  382,  382,  383,  384,
      385,  385,  385,  386,  387,  388,  389,  389,  390,  390

    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
       19,   20,   20,   20,   20,   20,   20,    1,    1,   21,
       22,   23,    1,    1,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
       24,   25,   26,   27,    1,    1,   28,   29,   30,   31,

       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       52,   53,   54,    1,   55,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[56] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst short int yy_base[803] =
    {   0,
        0,    0,   55,    0,   83,    0,  106,  128,  142,  155,
      168,  181,  195,  209,  230,  253,  276,  299,  312,  325,
      338,  351,  364,  377,  398,  419,  432,  445,  458,  472,
     1258, 1259,  123, 1259, 1252,    0, 1249, 1253, 1252, 1251,
     1250,  136, 1249,  248, 1248,  416, 1247, 1246, 1245, 1244,
     1243, 1242, 1241,  106, 1203,   87, 1205,  176, 1201, 1198,
      121,  132,  240, 1196,  136,  113, 1235, 1234, 1259,  185,
     1230,    0, 1227, 1231, 1230, 1229, 1228,  229, 1227,  437,
     1226,  505, 1225, 1224, 1223, 1222, 1221, 1220, 1219,  200,
     1192, 1177, 1182,  203,   93, 1185, 1176,  101, 1173, 1166,

      255, 1181,  148,  146, 1176, 1209, 1208,  225, 1173, 1166,
      109,  182,  164, 1179, 1163,  293, 1169,  303,  233, 1172,
     1161,  177, 1160,  209, 1173, 1158,  217, 1171,  257,  251,
      288, 1162,  462, 1161,  190, 1168,  297,  295,  318,  355,
     1190, 1192,    0, 1186, 1190, 1189, 1188, 1187,  368, 1186,
     1185,  511, 1184, 1183,  524,  531, 1182, 1181, 1180, 1179,
     1178, 1177, 1176, 1135, 1140, 1147, 1131, 1133, 1126, 1125,
     1168, 1141, 1125, 1125, 1120, 1131, 1162, 1129, 1115, 1115,
     1158, 1157, 1115, 1111, 1109, 1127, 1113, 1118, 1107, 1110,
      289, 1148, 1147, 1103, 1099,  508,  295, 1118, 1106, 1104,

     1095, 1096, 1099, 1099, 1103, 1107,   77,  329, 1088,  351,
     1085, 1094, 1088, 1131, 1130, 1129, 1128, 1127, 1126, 1125,
      261, 1084,  300, 1089,  337, 1078, 1076,  350, 1076, 1074,
     1080, 1091, 1089,  317, 1088,  354, 1075, 1084,  385,  397,
      159, 1078, 1111, 1066, 1070, 1069, 1081, 1076, 1105, 1078,
     1076, 1102, 1074, 1055, 1066, 1098, 1097, 1066, 1062, 1094,
     1093,  404, 1059, 1065, 1053, 1089, 1058, 1042, 1086, 1046,
     1058, 1033, 1038,  530, 1055, 1050, 1038, 1049, 1045, 1044,
     1038,  419, 1046, 1073, 1037, 1042, 1044, 1024, 1038, 1067,
     1066, 1029,  277,  396, 1064, 1063, 1062, 1061, 1060, 1059,

     1058, 1057, 1027, 1017, 1010, 1014, 1012, 1051, 1005, 1009,
     1048, 1002, 1019, 1001, 1010, 1012, 1008, 1010,  995, 1005,
     1038, 1037, 1036, 1035, 1004,  990, 1032, 1031,  422,  985,
      986, 1028, 1000,  989, 1025,  998,  997,  977, 1021,  977,
     1019,  421,  992,  443,  972,  986, 1015,  971, 1013, 1012,
      967,  971,  981,  964,  979,  967,  972,  967,  970,  972,
      971,  440,  967,  963,  998,  967,  966,  956,  961,  965,
      992,  991,  234,  417,  947,  420,  946,  988,  987,  956,
      940,  939,  940,  982,  955,  937,  979,  952,  947,  931,
      945,  928,  943,  926,  941,  924,  969,  968,  967,  966,

      926,  938,  963,  962,  961,  960,  931,  932,  920,  926,
      918,  915,  953,  918,  951,  905,  477,  923,  918,  947,
      916,  945,  907,  911,  912,  907,  904,  910,  908,  907,
      891,  466,  892,  891,  903,  904,  888,  898,  929,  883,
      468,  882,  900,  899,  924,  878,  896,  921,  920,  887,
      918,  885,  873,  881,  875,  869,  873,  867,  867,  865,
      857,  870,  906,  872,  904,  873,  902,  901,  872,  899,
      872,  854,  851,  895,  894,  893,  866,  854,  851,  863,
      856,  857,  843,  841,  884,  532,  857,  842,  881,  850,
      836,  833,  533,  840,  876,  875,  874,  825,  824,  828,

      831,  869,  868,  837,  866,  835,  819,  835,  817,  831,
      815,  829,  858,  857,  558,  303,  856,  855,  854,  853,
      852,  821,  813,  815,  805,  847,  846,  800,  814,  798,
      803,  798,  797,  809,  794,  837,  808,  792,  834,  807,
      832,  797,  555,  804,  788,  795,  386,  534,  797,  826,
      825, 1259, 1259,  774,  778,  822,  821,  820,  793,  818,
      817,  816,  815,  814,  813,  579,  782,  766,  441,  764,
      446,  519,  537,  763,  782,  807,  806,  805,  804,  754,
      768,  771,  800,  756,  544,  758,  554,  492,  797,  760,
      765,  765,  793,  752,  752,  756,  746,  562,  751,  565,

      750,  550,  786,  785,  784,  783,  782,  781,  780,  779,
      778,  772,  726, 1259,  721,  730,  730,  738,  726,  733,
      738,  725,  733,  761,  760,  758,  707,  755,  754,  719,
      567,  715,  705,  556,  108,  568,  133,  275,  268,  375,
      365,  441,  459,  473,  484,  520,  529,  570,  542,  575,
      581,  584,  560,  590,  598,  603,  573, 1259,  571,  567,
      611,  579,  614,  616,  620,  593,  578,  586,  594,  600,
      586,  587, 1259, 1259,  594,  595,  607,  606,  607,  592,
     1259,  637,  604,  639,  606,  641,  601,  597,  618,  600,
      646,  607,  603,  650,  651,  609,  624,  621,  611,  617,

      618,  629,  620,  632,  626,  627,  619,  621,  623,  636,
      626, 1259, 1259,  638,  628,  673,  674,  675,  631,  643,
      632,  633,  637,  653,  682, 1259, 1259,  683,  639,  641,
      657, 1259,  658, 1259,  689,  665,  658,  693,  650,  655,
      657,  658,  698,  663,  700,  664,  702,  677,  678,  662,
      663,  658,  676, 1259,  670,  681,  682,  713,  677,  715,
      686,  678,  680,  690,  691, 1259,  684,  679,  724,  725,
      698,  729,  693,  701,  704,  706,  691,  692,  711, 1259,
      738,  739,  710,  711,  702,  715,  716, 1259, 1259, 1259,
      706,  718, 1259, 1259, 1259, 1259,  708, 1259, 1259,  775,

      751,  777
    } ;

static yyconst short int yy_def[803] =
    {   0,
      799,    1,  799,    3,    3,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
      799,  799,  799,  799,  800,  801,  802,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      800,  801,  802,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,

      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      800,  799,  801,  802,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,

      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,

      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,

      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,

      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,

      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,

      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,    0,  799,

      799,  799
    } ;

static yyconst short int yy_nxt[1315] =
    {   0,
       32,   33,   34,   33,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   46,   46,   46,   46,
       47,   48,   49,   50,   51,   52,   53,   54,   55,   56,
       57,   58,   32,   59,   32,   60,   32,   32,   61,   62,
       32,   32,   63,   32,   64,   65,   66,   32,   32,   32,
       32,   32,   32,   67,   68,   69,   70,   34,   70,   71,
       72,   73,   74,   75,   76,   77,   78,   79,   80,   81,
       82,   82,   82,   82,   82,   83,   84,   85,   86,   87,
       88,   89,   90,   91,   92,   93,   94,   69,   95,   96,
       97,   69,   69,   98,   99,  100,   69,  101,   69,  102,

      103,  104,   69,   69,  105,   69,   69,   69,  106,  107,
      108,   69,  245,  109,  168,  110,   69,   69,   69,  289,
      195,  111,  112,   69,  140,  113,  140,   69,  169,  114,
      115,  196,   69,   90,  140,  164,   93,  149,   69,  140,
      190,  177,  178,  669,   98,   69,  116,  140,  117,  177,
      210,  165,  166,   69,  118,   90,  176,  191,   93,  179,
       69,  177,  178,  180,  670,  186,   98,   69,  116,   90,
      117,  187,   93,  190,   69,   69,  118,  171,  188,  189,
      119,   69,   90,  187,  117,   93,  140,   69,  140,   69,
      205,  189,  257,  119,   69,   90,  140,  117,   93,  182,

       69,  120,   69,  325,  171,  213,   98,   69,   90,  211,
      117,   93,  182,   69,  120,   69,  172,  212,  224,   98,
       69,  237,   90,  117,  121,   93,  173,   69,   69,  164,
      149,  169,  140,   98,   69,  441,   90,  122,  121,   93,
      140,   69,   69,  172,  182,  165,  166,   98,   69,  151,
      226,  122,  182,  173,  164,  181,   69,   90,  229,  123,
       93,  442,   69,  152,  152,  152,  152,  152,   98,   69,
      207,  166,  124,  177,  221,  182,  638,   69,  374,  125,
       90,  183,  123,   93,  231,   69,  182,  184,  303,  232,
      182,   98,   69,  201,  257,  124,  202,  177,  178,  203,

       69,  671,  125,   90,  573,  126,   93,  375,   69,  215,
      216,  217,  239,  240,   98,   69,  270,  164,  127,  218,
      219,  220,  278,   69,  271,  128,   90,  233,  126,   93,
      279,   69,  182,  165,  166,  177,  241,   98,   69,   90,
      305,  127,   93,  574,   69,  249,   69,  575,  128,  316,
      129,   69,   90,  187,  130,   93,  140,   69,  140,   69,
      242,  189,  250,  129,   69,  131,  140,  130,  132,  149,
       69,  140,   69,  290,  250,  307,   98,   69,  131,  140,
      117,  132,  249,   69,  257,   69,  318,  598,  310,   98,
       69,  133,  292,  117,  134,  249,   69,  376,   69,  250,

      321,  322,   98,   69,  133,  342,  117,  134,  672,   69,
      673,   69,  323,  324,  599,   98,   69,  154,  374,  117,
      362,  376,  342,  405,   69,   90,  377,  135,   93,  155,
       69,  156,  156,  156,  156,  156,   98,   69,  151,  406,
      117,  362,  136,  343,  417,   69,   90,  375,  135,   93,
      377,   69,  152,  152,  152,  152,  152,   98,   69,   90,
      343,  117,   93,  136,   69,  363,   69,  486,  615,  441,
       98,   69,   90,  618,  137,   93,  616,   69,  417,   69,
      619,  674,  418,   98,   69,   90,  363,  137,   93,  675,
       69,  164,   69,  636,  487,  442,  138,   69,  488,   90,

      117,  235,   93,  139,   69,   69,  154,  165,  166,  274,
      138,   69,  151,  676,  117,  677,  418,  139,  155,   69,
      156,  156,  156,  156,  156,  151,  152,  152,  152,  152,
      152,  274,  154,  486,  543,  600,  275,  637,  573,  152,
      152,  152,  152,  152,  155,  631,  156,  156,  156,  156,
      156,  648,  276,  277,  620,  634,  543,  634,  275,  566,
      487,  678,  601,  598,  488,  621,  600,  544,  631,  636,
      679,  648,  632,  680,  276,  277,  650,  574,  545,  546,
      566,  575,  651,  547,  548,  652,  567,  681,  568,  544,
      599,  682,  635,  601,  635,  632,  649,  569,  570,  684,

      545,  546,  571,  572,  686,  547,  548,  567,  688,  568,
      689,  690,  691,  637,  693,  663,  649,  694,  569,  570,
      683,  665,  695,  571,  572,  696,  697,  698,  685,  699,
      700,  701,  702,  703,  704,  705,  706,  707,  682,  708,
      684,  709,  686,  710,  711,  712,  713,  691,  687,  714,
      715,  694,  716,  717,  718,  719,  692,  720,  721,  722,
      723,  724,  725,  726,  727,  728,  729,  683,  730,  685,
      731,  732,  733,  734,  716,  735,  738,  739,  740,  741,
      742,  743,  744,  745,  747,  748,  687,  749,  750,  751,
      735,  692,  752,  753,  738,  754,  755,  756,  757,  758,

      760,  745,  761,  747,  762,  763,  764,  765,  766,  767,
      768,  769,  770,  736,  758,  771,  772,  774,  775,  737,
      776,  777,  778,  779,  780,  781,  782,  746,  736,  783,
      772,  784,  785,  786,  737,  787,  788,  789,  790,  781,
      782,  791,  792,  759,  793,  746,  794,  795,  796,  797,
      798,  143,  668,  667,  666,  629,  665,  664,  759,  663,
      773,  625,  624,  662,  661,  660,  659,  658,  657,  656,
      655,  654,  653,  612,  773,  141,  141,  144,  144,  611,
      610,  609,  652,  607,  606,  605,  651,  650,  647,  646,
      645,  644,  643,  642,  593,  641,  640,  639,  638,  633,

      630,  629,  628,  627,  626,  625,  624,  577,  576,  623,
      622,  617,  614,  613,  565,  564,  612,  611,  610,  609,
      608,  607,  606,  605,  604,  603,  551,  550,  602,  597,
      596,  595,  594,  593,  592,  539,  591,  590,  536,  589,
      588,  587,  586,  585,  584,  583,  582,  527,  526,  581,
      580,  579,  578,  521,  520,  577,  518,  576,  565,  564,
      563,  562,  561,  560,  559,  558,  557,  505,  556,  503,
      502,  555,  554,  553,  552,  551,  550,  495,  549,  542,
      541,  540,  539,  538,  537,  536,  535,  534,  533,  532,
      531,  530,  529,  528,  527,  475,  526,  525,  524,  523,

      470,  522,  521,  520,  519,  518,  517,  463,  516,  515,
      514,  513,  512,  511,  510,  509,  508,  507,  506,  505,
      504,  503,  502,  501,  500,  445,  499,  498,  497,  496,
      495,  494,  493,  492,  491,  490,  489,  485,  484,  483,
      482,  481,  480,  479,  478,  477,  422,  476,  475,  474,
      473,  472,  415,  471,  470,  469,  468,  467,  466,  465,
      464,  463,  405,  404,  403,  462,  461,  400,  399,  398,
      397,  460,  459,  458,  457,  456,  455,  454,  453,  452,
      387,  451,  450,  384,  449,  448,  447,  446,  445,  378,
      444,  443,  372,  371,  440,  439,  438,  437,  436,  365,

      435,  434,  433,  432,  431,  430,  429,  428,  427,  426,
      425,  424,  423,  350,  422,  421,  347,  420,  419,  416,
      415,  414,  339,  413,  412,  411,  335,  410,  409,  332,
      408,  407,  404,  403,  402,  401,  400,  399,  398,  397,
      396,  395,  394,  393,  392,  391,  390,  389,  388,  387,
      386,  385,  384,  383,  382,  381,  380,  379,  302,  301,
      300,  299,  298,  297,  296,  378,  373,  372,  371,  370,
      369,  368,  367,  366,  365,  364,  361,  360,  359,  358,
      357,  356,  355,  354,  353,  352,  351,  350,  349,  348,
      347,  346,  345,  344,  261,  260,  341,  340,  339,  256,

      338,  337,  336,  335,  334,  333,  332,  331,  330,  329,
      328,  327,  243,  326,  320,  319,  317,  315,  314,  313,
      312,  311,  309,  308,  306,  304,  302,  301,  300,  299,
      298,  297,  296,  295,  294,  293,  291,  288,  287,  286,
      285,  284,  283,  282,  281,  280,  273,  272,  193,  192,
      269,  268,  267,  266,  265,  264,  263,  262,  261,  260,
      259,  258,  257,  256,  255,  254,  253,  252,  251,  171,
      250,  249,  248,  247,  246,  245,  244,  163,  162,  161,
      160,  159,  158,  157,  154,  153,  151,  150,  148,  147,
      146,  145,  142,  243,  142,  238,  236,  234,  230,  228,

      227,  225,  223,  222,  182,  214,  190,  209,  208,  193,
      192,  206,  204,  200,  199,  198,  197,  170,  169,  194,
      163,  162,  161,  160,  159,  158,  157,  153,  150,  148,
      147,  146,  145,  142,  142,  193,  192,  185,  175,  174,
      170,  167,  163,  162,  161,  160,  159,  158,  157,  153,
      150,  148,  147,  146,  145,  142,  142,  799,   31,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,

      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799
    } ;

static yyconst short int yy_chk[1315] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        5,    5,  207,    5,   56,    5,    5,    5,    5,  207,
       95,    5,    5,    5,   33,    5,   33,    5,   56,    5,
        5,   95,    5,    7,   33,   54,    7,   42,    7,   42,
       66,   98,   98,  635,    7,    7,    7,   42,    7,  111,
      111,   54,   54,    7,    7,    8,   61,   66,    8,   62,
        8,   61,   61,   62,  637,   65,    8,    8,    8,    9,
        8,   65,    9,  104,    9,    8,    8,   58,   65,   65,
        9,    9,   10,  103,    9,   10,   70,   10,   70,    9,
      104,  103,  241,   10,   10,   11,   70,   10,   11,  113,

       11,   11,   10,  241,   94,  113,   11,   11,   12,  112,
       11,   12,  122,   12,   12,   11,   58,  112,  122,   12,
       12,  135,   13,   12,   13,   13,   58,   13,   12,   90,
       78,  135,   78,   13,   13,  373,   14,   13,   14,   14,
       78,   14,   13,   94,  124,   90,   90,   14,   14,   44,
      124,   14,  127,   94,  108,   63,   14,   15,  127,   15,
       15,  373,   15,   44,   44,   44,   44,   44,   15,   15,
      108,  108,   15,  119,  119,   63,  638,   15,  293,   15,
       16,   63,   16,   16,  129,   16,  130,   63,  221,  130,
      101,   16,   16,  101,  221,   16,  101,  129,  129,  101,

       16,  639,   16,   17,  516,   17,   17,  293,   17,  116,
      116,  116,  137,  137,   17,   17,  191,  131,   17,  118,
      118,  118,  197,   17,  191,   17,   18,  131,   18,   18,
      197,   18,  137,  131,  131,  138,  138,   18,   18,   19,
      223,   18,   19,  516,   19,  223,   18,  516,   18,  234,
       19,   19,   20,  139,   19,   20,  140,   20,  140,   19,
      139,  139,  234,   20,   20,   21,  140,   20,   21,  149,
       21,  149,   20,  208,  208,  225,   21,   21,   22,  149,
       21,   22,  225,   22,  210,   21,  236,  547,  228,   22,
       22,   23,  210,   22,   23,  228,   23,  294,   22,  236,

      239,  239,   23,   23,   24,  262,   23,   24,  640,   24,
      641,   23,  240,  240,  547,   24,   24,   46,  374,   24,
      282,  376,  342,  329,   24,   25,  294,   25,   25,   46,
       25,   46,   46,   46,   46,   46,   25,   25,   80,  329,
       25,  362,   25,  262,  344,   25,   26,  374,   26,   26,
      376,   26,   80,   80,   80,   80,   80,   26,   26,   27,
      342,   26,   27,   26,   27,  282,   26,  432,  569,  441,
       27,   27,   28,  571,   27,   28,  569,   28,  417,   27,
      571,  642,  344,   28,   28,   29,  362,   28,   29,  643,
       29,  133,   28,  588,  432,  441,   29,   29,  432,   30,

       29,  133,   30,   29,   30,   29,   82,  133,  133,  196,
       30,   30,  152,  644,   30,  645,  417,   30,   82,   30,
       82,   82,   82,   82,   82,  155,  152,  152,  152,  152,
      152,  274,  156,  486,  493,  548,  196,  588,  573,  155,
      155,  155,  155,  155,  156,  585,  156,  156,  156,  156,
      156,  602,  196,  196,  572,  587,  543,  634,  274,  515,
      486,  646,  548,  598,  486,  572,  600,  493,  631,  636,
      647,  648,  585,  649,  274,  274,  650,  573,  493,  493,
      566,  573,  651,  493,  493,  652,  515,  653,  515,  543,
      598,  654,  587,  600,  634,  631,  602,  515,  515,  655,

      543,  543,  515,  515,  656,  543,  543,  566,  657,  566,
      659,  660,  661,  636,  662,  663,  648,  664,  566,  566,
      654,  665,  666,  566,  566,  667,  668,  669,  655,  670,
      671,  672,  675,  676,  677,  678,  679,  680,  682,  683,
      684,  685,  686,  687,  688,  689,  690,  691,  656,  692,
      693,  694,  695,  696,  697,  698,  661,  699,  700,  701,
      702,  703,  704,  705,  706,  707,  708,  682,  709,  684,
      710,  711,  714,  715,  716,  717,  718,  719,  720,  721,
      722,  723,  724,  725,  728,  729,  686,  730,  731,  733,
      735,  691,  736,  737,  738,  739,  740,  741,  742,  743,

      744,  745,  746,  747,  748,  749,  750,  751,  752,  753,
      755,  756,  757,  717,  758,  759,  760,  761,  762,  717,
      763,  764,  765,  767,  768,  769,  770,  725,  735,  771,
      772,  773,  774,  775,  735,  776,  777,  778,  779,  781,
      782,  783,  784,  743,  785,  745,  786,  787,  791,  792,
      797,  801,  633,  632,  630,  629,  628,  627,  758,  626,
      760,  625,  624,  623,  622,  621,  620,  619,  618,  617,
      616,  615,  613,  612,  772,  800,  800,  802,  802,  611,
      610,  609,  608,  607,  606,  605,  604,  603,  601,  599,
      597,  596,  595,  594,  593,  592,  591,  590,  589,  586,

      584,  583,  582,  581,  580,  579,  578,  577,  576,  575,
      574,  570,  568,  567,  565,  564,  563,  562,  561,  560,
      559,  558,  557,  556,  555,  554,  551,  550,  549,  546,
      545,  544,  542,  541,  540,  539,  538,  537,  536,  535,
      534,  533,  532,  531,  530,  529,  528,  527,  526,  525,
      524,  523,  522,  521,  520,  519,  518,  517,  514,  513,
      512,  511,  510,  509,  508,  507,  506,  505,  504,  503,
      502,  501,  500,  499,  498,  497,  496,  495,  494,  492,
      491,  490,  489,  488,  487,  485,  484,  483,  482,  481,
      480,  479,  478,  477,  476,  475,  474,  473,  472,  471,

      470,  469,  468,  467,  466,  465,  464,  463,  462,  461,
      460,  459,  458,  457,  456,  455,  454,  453,  452,  451,
      450,  449,  448,  447,  446,  445,  444,  443,  442,  440,
      439,  438,  437,  436,  435,  434,  433,  431,  430,  429,
      428,  427,  426,  425,  424,  423,  422,  421,  420,  419,
      418,  416,  415,  414,  413,  412,  411,  410,  409,  408,
      407,  406,  405,  404,  403,  402,  401,  400,  399,  398,
      397,  396,  395,  394,  393,  392,  391,  390,  389,  388,
      387,  386,  385,  384,  383,  382,  381,  380,  379,  378,
      377,  375,  372,  371,  370,  369,  368,  367,  366,  365,

      364,  363,  361,  360,  359,  358,  357,  356,  355,  354,
      353,  352,  351,  350,  349,  348,  347,  346,  345,  343,
      341,  340,  339,  338,  337,  336,  335,  334,  333,  332,
      331,  330,  328,  327,  326,  325,  324,  323,  322,  321,
      320,  319,  318,  317,  316,  315,  314,  313,  312,  311,
      310,  309,  308,  307,  306,  305,  304,  303,  302,  301,
      300,  299,  298,  297,  296,  295,  292,  291,  290,  289,
      288,  287,  286,  285,  284,  283,  281,  280,  279,  278,
      277,  276,  275,  273,  272,  271,  270,  269,  268,  267,
      266,  265,  264,  263,  261,  260,  259,  258,  257,  256,

      255,  254,  253,  252,  251,  250,  249,  248,  247,  246,
      245,  244,  243,  242,  238,  237,  235,  233,  232,  231,
      230,  229,  227,  226,  224,  222,  220,  219,  218,  217,
      216,  215,  214,  213,  212,  211,  209,  206,  205,  204,
      203,  202,  201,  200,  199,  198,  195,  194,  193,  192,
      190,  189,  188,  187,  186,  185,  184,  183,  182,  181,
      180,  179,  178,  177,  176,  175,  174,  173,  172,  171,
      170,  169,  168,  167,  166,  165,  164,  163,  162,  161,
      160,  159,  158,  157,  154,  153,  151,  150,  148,  147,
      146,  145,  144,  142,  141,  136,  134,  132,  128,  126,

      125,  123,  121,  120,  117,  115,  114,  110,  109,  107,
      106,  105,  102,  100,   99,   97,   96,   93,   92,   91,
       89,   88,   87,   86,   85,   84,   83,   81,   79,   77,
       76,   75,   74,   73,   71,   68,   67,   64,   60,   59,
       57,   55,   53,   52,   51,   50,   49,   48,   47,   45,
       43,   41,   40,   39,   38,   37,   35,   31,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,

      799,  799,  799,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.lex"
#define INITIAL 0
#define YY_NEVER_INTERACTIVE 1
#define YY_STACK_USED 1
#line 10 "lexer.lex"
#ifdef WIN32
#pragma warning(disable:4127) // while(1) warning
#pragma warning(disable:4102) // unreferenced label warning
#pragma warning(disable:4505) // unreferenced local function
#pragma warning(disable:4267) // smaller type conversion warnings
#pragma warning(disable:4244) // smaller type conversion warnings
#endif

#include <cstdlib>
#include <stdio.h>
#include <string.h>
#include "lexer.h"
#include "parser.yy.cc.h"

int yyline=1;
int yyerr=0;

void yy_done_parsing() {
	yy_delete_buffer( YY_CURRENT_BUFFER );
	
	delete yy_start_stack;
	yy_start_stack = 0;
	
	yy_init = 1;
}
#define s_global 1

#define s_camera 2

#define s_triangle 3

#define s_mesh 4

#define s_instance 5

#define s_light 6

#define s_pointlight 7

#define s_constantlight 8

#define s_material 9

#define s_lambert 10

#define s_plastica 11

#define s_sphere 12

#define s_blpatch 13

#define s_p0 14

#line 1032 "lexer.yy.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 64 "lexer.lex"


#line 1186 "lexer.yy.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 800 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 799 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 66 "lexer.lex"
{ return YY_ENABLE; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 67 "lexer.lex"
{ return YY_DISABLE; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 68 "lexer.lex"
{ return YY_MATH_COS; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 69 "lexer.lex"
{ return YY_MATH_SIN; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 70 "lexer.lex"
{ return YY_MATH_TAN; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 71 "lexer.lex"
{ return YY_MATH_ACOS; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 72 "lexer.lex"
{ return YY_MATH_ASIN; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 73 "lexer.lex"
{ return YY_MATH_ATAN; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 74 "lexer.lex"
{ return YY_MATH_ATAN2; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 75 "lexer.lex"
{ return YY_MATH_LN; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 76 "lexer.lex"
{ return YY_MATH_LOG; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 77 "lexer.lex"
{ return YY_MATH_EXP; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 78 "lexer.lex"
{ return YY_MATH_SQRT; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 79 "lexer.lex"
{ return YY_MATH_E; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 80 "lexer.lex"
{ return YY_MATH_PI; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 82 "lexer.lex"
{ return YY_LT; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 83 "lexer.lex"
{ return YY_GT; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 84 "lexer.lex"
{ return YY_LBOX; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 85 "lexer.lex"
{ return YY_LBOX; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 86 "lexer.lex"
{ return YY_LCURLY; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 87 "lexer.lex"
{ yy_pop_state(); return YY_RCURLY; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 88 "lexer.lex"
{ return YY_LPAREN; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 89 "lexer.lex"
{ return YY_RPAREN; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 90 "lexer.lex"
{ return YY_COMMA; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 91 "lexer.lex"
{ return YY_EQUAL; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 92 "lexer.lex"
{ return YY_PLUS; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 93 "lexer.lex"
{ return YY_MINUS; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 94 "lexer.lex"
{ return YY_MUL; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 95 "lexer.lex"
{ return YY_DIV; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 96 "lexer.lex"
{ return YY_CARAT; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 97 "lexer.lex"
{ return YY_BSLASH; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 98 "lexer.lex"
{ yyline++; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 101 "lexer.lex"
{ yy_push_state(s_global); return YY_S_GLOBAL; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 102 "lexer.lex"
{ return YY_WIDTH; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 103 "lexer.lex"
{ return YY_HEIGHT; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 104 "lexer.lex"
{ return YY_POS; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 105 "lexer.lex"
{ return YY_IMG_BGCOLOR; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 106 "lexer.lex"
{ return YY_IMG_FGCOLOR; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 107 "lexer.lex"
{ return YY_GL_BGCOLOR; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 108 "lexer.lex"
{ return YY_GL_SPHERE_SECTIONS; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 109 "lexer.lex"
{ return YY_NUM_THREADS; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 110 "lexer.lex"
{ return YY_RENDER_X_BLOCK; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 111 "lexer.lex"
{ return YY_RENDER_Y_BLOCK; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 112 "lexer.lex"
{ return YY_RENDER_HANDLER_SLEEP; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 113 "lexer.lex"
{ return YY_RENDER_THREAD_SLEEP; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 114 "lexer.lex"
{ return YY_RENDER_SPINLOCK_SLEEP; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 115 "lexer.lex"
{ return YY_GAUSSIAN_BLUR_MAX; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 116 "lexer.lex"
{ return YY_GAUSSIAN_BLUR_SIGMA; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 117 "lexer.lex"
{ return YY_GL_RENDER_LIGHTS; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 118 "lexer.lex"
{ return YY_HEADLESS; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 119 "lexer.lex"
{ return YY_TRIANGLE_TEST; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 120 "lexer.lex"
{ return YY_PROJECTION; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 121 "lexer.lex"
{ return YY_BARYCENTRIC; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 122 "lexer.lex"
{ return YY_PLUCKER; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 123 "lexer.lex"
{ return YY_MOLLER; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 126 "lexer.lex"
{ yy_push_state(s_camera); return YY_S_CAMERA; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 127 "lexer.lex"
{ return YY_POS; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 128 "lexer.lex"
{ return YY_DIR; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 129 "lexer.lex"
{ return YY_LOOKAT; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 130 "lexer.lex"
{ return YY_UP; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 131 "lexer.lex"
{ return YY_FOV; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 132 "lexer.lex"
{ return YY_ASPECT; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 133 "lexer.lex"
{ return YY_MIN_DRAW; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 134 "lexer.lex"
{ return YY_MAX_DRAW; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 136 "lexer.lex"
{ yy_push_state(s_p0); return YY_S_P0; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 137 "lexer.lex"
{ return YY_SPIRAL_NUM_SPHERES; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 138 "lexer.lex"
{ return YY_SPIRAL_RADIUS; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 139 "lexer.lex"
{ return YY_LORENZ_DT; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 140 "lexer.lex"
{ return YY_LORENZ_MIN_DISTANCE; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 141 "lexer.lex"
{ return YY_LORENZ_MAX_DISTANCE; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 142 "lexer.lex"
{ return YY_LORENZ_SIGMA; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 143 "lexer.lex"
{ return YY_LORENZ_RHO; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 144 "lexer.lex"
{ return YY_LORENZ_BETA; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 145 "lexer.lex"
{ return YY_LORENZ_RADIUS; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 146 "lexer.lex"
{ return YY_LORENZ_NUM_SPHERES; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 147 "lexer.lex"
{ return YY_LORENZ_START; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 149 "lexer.lex"
{ yy_push_state(s_triangle); return YY_S_TRIANGLE; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 150 "lexer.lex"
{ return YY_V1; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 151 "lexer.lex"
{ return YY_V2; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 152 "lexer.lex"
{ return YY_V3; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 153 "lexer.lex"
{ return YY_N1; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 154 "lexer.lex"
{ return YY_N2; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 155 "lexer.lex"
{ return YY_N3; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 157 "lexer.lex"
{ yy_push_state(s_mesh); return YY_S_MESH; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 158 "lexer.lex"
{ return YY_LOAD; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 160 "lexer.lex"
{ yy_push_state(s_instance); return YY_S_INSTANCE; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 161 "lexer.lex"
{ return YY_GEOMETRY; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 163 "lexer.lex"
{ return YY_PUSHMATRIX; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 164 "lexer.lex"
{ return YY_POPMATRIX; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 165 "lexer.lex"
{ return YY_ROTATE; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 166 "lexer.lex"
{ return YY_TRANSLATE; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 167 "lexer.lex"
{ return YY_SCALE; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 169 "lexer.lex"
{ yy_push_state(s_light); return YY_S_LIGHT; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 171 "lexer.lex"
{ yy_pop_state(); yy_push_state(s_pointlight); return YY_S_POINTLIGHT; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 172 "lexer.lex"
{ return YY_COLOR; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 173 "lexer.lex"
{ return YY_POS; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 174 "lexer.lex"
{ return YY_WATTAGE; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 176 "lexer.lex"
{ yy_pop_state(); yy_push_state(s_constantlight); return YY_S_CONSTANTLIGHT; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 177 "lexer.lex"
{ return YY_COLOR; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 178 "lexer.lex"
{ return YY_POS; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 179 "lexer.lex"
{ return YY_WATTAGE; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 181 "lexer.lex"
{ yy_push_state(s_material); return YY_S_MATERIAL; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 183 "lexer.lex"
{ yy_pop_state(); yy_push_state(s_lambert); return YY_S_LAMBERT; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 184 "lexer.lex"
{ return YY_DIFFUSE; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 185 "lexer.lex"
{ return YY_AMBIENT; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 187 "lexer.lex"
{ yy_pop_state(); yy_push_state(s_plastica); return YY_S_PLASTICA; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 188 "lexer.lex"
{ return YY_DIFFUSE; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 189 "lexer.lex"
{ return YY_AMBIENT; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 191 "lexer.lex"
{ yy_push_state(s_sphere); return YY_S_SPHERE; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 192 "lexer.lex"
{ return YY_CENTER; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 193 "lexer.lex"
{ return YY_RADIUS; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 195 "lexer.lex"
{ yy_push_state(s_blpatch); return YY_S_BLPATCH; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 196 "lexer.lex"
{ return YY_P00; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 197 "lexer.lex"
{ return YY_P01; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 198 "lexer.lex"
{ return YY_P10; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 199 "lexer.lex"
{ return YY_P11; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 203 "lexer.lex"
{ yylval.str = _strdup(yytext); return YY_STRING; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 204 "lexer.lex"
{ yylval.integer = atoi(yytext); return YY_PARSE_INT; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 205 "lexer.lex"
{ yylval.real = (float)atof(yytext); return YY_REAL; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 207 "lexer.lex"
// eat up whitespace
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 208 "lexer.lex"
// eat up comments 
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 209 "lexer.lex"
{ printf("\nParse error #%d line %d near: %s\n", ++yyerr, yyline, yytext); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 211 "lexer.lex"
ECHO;
	YY_BREAK
#line 1892 "lexer.yy.cc"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(s_global):
			case YY_STATE_EOF(s_camera):
			case YY_STATE_EOF(s_triangle):
			case YY_STATE_EOF(s_mesh):
			case YY_STATE_EOF(s_instance):
			case YY_STATE_EOF(s_light):
			case YY_STATE_EOF(s_pointlight):
			case YY_STATE_EOF(s_constantlight):
			case YY_STATE_EOF(s_material):
			case YY_STATE_EOF(s_lambert):
			case YY_STATE_EOF(s_plastica):
			case YY_STATE_EOF(s_sphere):
			case YY_STATE_EOF(s_blpatch):
			case YY_STATE_EOF(s_p0):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 800 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 800 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 799);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 211 "lexer.lex"

