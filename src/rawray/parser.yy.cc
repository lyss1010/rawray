
/*  A Bison parser, made from parser.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	YY_REAL	258
#define	YY_PARSE_INT	259
#define	YY_STRING	260
#define	YY_PARSE_TRUE	261
#define	YY_PARSE_FALSE	262
#define	YY_ENABLE	263
#define	YY_DISABLE	264
#define	YY_MATH_COS	265
#define	YY_MATH_SIN	266
#define	YY_MATH_TAN	267
#define	YY_MATH_ACOS	268
#define	YY_MATH_ASIN	269
#define	YY_MATH_ATAN	270
#define	YY_MATH_ATAN2	271
#define	YY_MATH_LN	272
#define	YY_MATH_LOG	273
#define	YY_MATH_EXP	274
#define	YY_MATH_SQRT	275
#define	YY_MATH_E	276
#define	YY_MATH_PI	277
#define	YY_GLOBAL	278
#define	YY_WIDTH	279
#define	YY_HEIGHT	280
#define	YY_POS	281
#define	YY_IMG_BGCOLOR	282
#define	YY_IMG_FGCOLOR	283
#define	YY_GL_BGCOLOR	284
#define	YY_GL_SPHERE_SECTIONS	285
#define	YY_NUM_THREADS	286
#define	YY_RENDER_X_BLOCK	287
#define	YY_RENDER_Y_BLOCK	288
#define	YY_RENDER_HANDLER_SLEEP	289
#define	YY_RENDER_THREAD_SLEEP	290
#define	YY_RENDER_SPINLOCK_SLEEP	291
#define	YY_GAUSSIAN_BLUR_MAX	292
#define	YY_GAUSSIAN_BLUR_SIGMA	293
#define	YY_TRIANGLE_TEST	294
#define	YY_BARYCENTRIC	295
#define	YY_PROJECTION	296
#define	YY_PLUCKER	297
#define	YY_MOLLER	298
#define	YY_GL_RENDER_LIGHTS	299
#define	YY_HEADLESS	300
#define	YY_CAMERA	301
#define	YY_DIR	302
#define	YY_LOOKAT	303
#define	YY_UP	304
#define	YY_FOV	305
#define	YY_ASPECT	306
#define	YY_MIN_DRAW	307
#define	YY_MAX_DRAW	308
#define	YY_P0	309
#define	YY_SPIRAL_NUM_SPHERES	310
#define	YY_SPIRAL_RADIUS	311
#define	YY_LORENZ_DT	312
#define	YY_LORENZ_MIN_DISTANCE	313
#define	YY_LORENZ_MAX_DISTANCE	314
#define	YY_LORENZ_SIGMA	315
#define	YY_LORENZ_RHO	316
#define	YY_LORENZ_BETA	317
#define	YY_LORENZ_RADIUS	318
#define	YY_LORENZ_NUM_SPHERES	319
#define	YY_LORENZ_START	320
#define	YY_TRIANGLE	321
#define	YY_V1	322
#define	YY_V2	323
#define	YY_V3	324
#define	YY_N1	325
#define	YY_N2	326
#define	YY_N3	327
#define	YY_MESH	328
#define	YY_LOAD	329
#define	YY_INSTANCE	330
#define	YY_GEOMETRY	331
#define	YY_PUSHMATRIX	332
#define	YY_POPMATRIX	333
#define	YY_ROTATE	334
#define	YY_TRANSLATE	335
#define	YY_SCALE	336
#define	YY_LIGHT	337
#define	YY_POINTLIGHT	338
#define	YY_WATTAGE	339
#define	YY_COLOR	340
#define	YY_MATERIAL	341
#define	YY_LAMBERT	342
#define	YY_DIFFUSE	343
#define	YY_AMBIENT	344
#define	YY_SPHERE	345
#define	YY_CENTER	346
#define	YY_RADIUS	347
#define	NEG	348

#line 1 "parser.y"

#ifdef WIN32
#pragma warning(disable:4244) // smaller type conversion warnings
#pragma warning(disable:4701) // variable used without being initialized
#endif

#include "parser.h"
#include <malloc.h>
#include <stdlib.h>
#include <math.h>
#include <stack>
#include <queue>
#include <map>
#include <string>
#include <iostream>
#include "math/vector3.h"
#include "math/matrix4x4.h"
#include "object.h"
#include "material.h"
#include "lambert.h"
#include "light.h"
#include "options.h"
#include "scene.h"
#include "camera.h"
#include "image.h"
#include "triangle.h"
#include "triangle_mesh.h"
#include "sphere.h"

//#define YYDEBUG 1

#define yyerror(x) printf("Parser error on line %d: %s\n", yyline, x); 

extern int yylex();
extern int yyline;
extern FILE *yyin, *yyout;


// variables for adding objects, keeping track of variables
rawray::Camera*                         g_camera = NULL;
rawray::Scene*                          g_scene = NULL;
rawray::Image*                          g_image = NULL;

rawray::Object*                         g_obj = NULL;
rawray::Material*                       g_material = NULL;
rawray::Light*                          g_light = NULL;
rawray::TriangleMesh*                   g_mesh = NULL;

math::Vector3                           g_vector;
std::map<std::string, rawray::Object*>  g_objectMap;
std::stack<math::Matrix4x4>             g_matrixStack;


#line 55 "parser.y"
typedef union
{
    float real;
    int integer;
    char* str;
} YYSTYPE;

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		431
#define	YYFLAG		-32768
#define	YYNTBASE	105

#define YYTRANSLATE(x) ((unsigned)(x) <= 348 ? yytranslate[x] : 134)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   103,
   104,    96,    95,   102,    94,     2,    97,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    93,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,    99,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   100,     2,   101,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    98
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     1,     4,     9,    14,    18,    22,    27,    29,    31,
    32,    38,    39,    46,    47,    53,    54,    61,    62,    68,
    69,    76,    77,    83,    84,    91,    92,   100,   108,   116,
   124,   132,   140,   141,   149,   153,   154,   158,   160,   162,
   171,   178,   185,   186,   191,   192,   197,   198,   206,   210,
   218,   219,   227,   235,   236,   239,   240,   244,   248,   256,
   264,   272,   276,   280,   284,   289,   293,   297,   301,   305,
   309,   313,   317,   321,   325,   329,   333,   337,   341,   342,
   350,   358,   366,   374,   378,   382,   386,   390,   391,   395,
   399,   403,   407,   411,   415,   419,   423,   427,   431,   439,
   441,   443,   445,   449,   453,   457,   461,   465,   469,   473,
   477,   481,   485,   489,   493,   497,   501,   505,   508,   512,
   514,   519,   524,   529,   534,   539,   544,   549,   554,   559,
   564,   566,   568,   570,   574,   578,   582,   586,   589,   593
};

static const short yyrhs[] = {    -1,
   105,   106,     0,    23,   100,   127,   101,     0,    46,   100,
   128,   101,     0,    82,   120,   101,     0,    86,   122,   101,
     0,    54,   100,   129,   101,     0,   107,     0,   119,     0,
     0,    66,   100,   108,   116,   101,     0,     0,    66,     5,
   100,   109,   116,   101,     0,     0,    73,   100,   110,   126,
   101,     0,     0,    73,     5,   100,   111,   126,   101,     0,
     0,    90,   100,   112,   117,   101,     0,     0,    90,     5,
   100,   113,   117,   101,     0,     0,    75,   100,   114,   118,
   101,     0,     0,    75,     5,   100,   115,   118,   101,     0,
     0,    67,   130,   102,   130,   102,   130,   116,     0,    68,
   130,   102,   130,   102,   130,   116,     0,    69,   130,   102,
   130,   102,   130,   116,     0,    70,   130,   102,   130,   102,
   130,   116,     0,    71,   130,   102,   130,   102,   130,   116,
     0,    72,   130,   102,   130,   102,   130,   116,     0,     0,
    91,   130,   102,   130,   102,   130,   117,     0,    92,   130,
   117,     0,     0,    76,     5,   117,     0,    77,     0,    78,
     0,    79,   130,   102,   130,   102,   130,   102,   130,     0,
    80,   130,   102,   130,   102,   130,     0,    81,   130,   102,
   130,   102,   130,     0,     0,    83,   100,   121,   124,     0,
     0,    87,   100,   123,   125,     0,     0,    26,   130,   102,
   130,   102,   130,   124,     0,    84,   130,   124,     0,    85,
   130,   102,   130,   102,   130,   124,     0,     0,    88,   130,
   102,   130,   102,   130,   125,     0,    89,   130,   102,   130,
   102,   130,   125,     0,     0,    74,     5,     0,     0,    25,
   133,   127,     0,    24,   133,   127,     0,    29,   130,   102,
   130,   102,   130,   127,     0,    27,   130,   102,   130,   102,
   130,   127,     0,    28,   130,   102,   130,   102,   130,   127,
     0,    30,   133,   127,     0,    31,   133,   127,     0,    39,
    40,   127,     0,    39,    40,    41,   127,     0,    39,    42,
   127,     0,    39,    43,   127,     0,    32,   133,   127,     0,
    33,   133,   127,     0,    34,   133,   127,     0,    35,   133,
   127,     0,    36,   133,   127,     0,    37,   130,   127,     0,
    38,   130,   127,     0,     8,    44,   127,     0,     9,    44,
   127,     0,     8,    45,   127,     0,     9,    45,   127,     0,
     0,    26,   130,   102,   130,   102,   130,   128,     0,    47,
   130,   102,   130,   102,   130,   128,     0,    48,   130,   102,
   130,   102,   130,   128,     0,    49,   130,   102,   130,   102,
   130,   128,     0,    50,   130,   128,     0,    51,   130,   128,
     0,    52,   130,   128,     0,    53,   130,   128,     0,     0,
    55,   133,   129,     0,    56,   130,   129,     0,    57,   130,
   129,     0,    58,   130,   129,     0,    59,   130,   129,     0,
    60,   130,   129,     0,    61,   130,   129,     0,    62,   130,
   129,     0,    63,   130,   129,     0,    64,   133,   129,     0,
    65,   130,   102,   130,   102,   130,   129,     0,     3,     0,
   133,     0,   131,     0,   130,    95,   130,     0,   133,    95,
   130,     0,   130,    95,   133,     0,   130,    94,   130,     0,
   133,    94,   130,     0,   130,    94,   133,     0,   130,    96,
   130,     0,   133,    96,   130,     0,   130,    96,   133,     0,
   130,    97,   130,     0,   133,    97,   130,     0,   130,    97,
   133,     0,   130,    99,   130,     0,   133,    99,   130,     0,
   130,    99,   133,     0,    94,   130,     0,   103,   130,   104,
     0,   132,     0,    11,   103,   130,   104,     0,    10,   103,
   130,   104,     0,    12,   103,   130,   104,     0,    14,   103,
   130,   104,     0,    13,   103,   130,   104,     0,    15,   103,
   130,   104,     0,    17,   103,   130,   104,     0,    18,   103,
   130,   104,     0,    19,   103,   130,   104,     0,    20,   103,
   130,   104,     0,    21,     0,    22,     0,     4,     0,   133,
    95,   133,     0,   133,    94,   133,     0,   133,    96,   133,
     0,   133,    97,   133,     0,    94,   133,     0,   133,    99,
   133,     0,   103,   133,   104,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   180,   181,   184,   185,   186,   187,   188,   189,   190,   193,
   202,   208,   218,   224,   231,   237,   246,   252,   262,   268,
   280,   286,   290,   294,   298,   303,   304,   306,   308,   310,
   312,   314,   318,   319,   321,   325,   326,   336,   337,   339,
   341,   343,   347,   358,   360,   371,   373,   374,   376,   378,
   382,   383,   385,   389,   390,   398,   399,   401,   403,   405,
   407,   409,   411,   413,   415,   417,   419,   421,   423,   425,
   427,   429,   431,   433,   435,   437,   439,   441,   445,   446,
   448,   450,   452,   454,   456,   458,   460,   464,   465,   467,
   469,   471,   473,   475,   477,   479,   481,   483,   485,   489,
   490,   491,   493,   494,   495,   497,   498,   499,   501,   502,
   503,   505,   506,   507,   509,   510,   511,   513,   514,   515,
   518,   519,   520,   521,   522,   523,   524,   525,   526,   527,
   530,   532,   535,   536,   537,   538,   539,   540,   541,   542
};

static const char * const yytname[] = {   "$","error","$undefined.","YY_REAL",
"YY_PARSE_INT","YY_STRING","YY_PARSE_TRUE","YY_PARSE_FALSE","YY_ENABLE","YY_DISABLE",
"YY_MATH_COS","YY_MATH_SIN","YY_MATH_TAN","YY_MATH_ACOS","YY_MATH_ASIN","YY_MATH_ATAN",
"YY_MATH_ATAN2","YY_MATH_LN","YY_MATH_LOG","YY_MATH_EXP","YY_MATH_SQRT","YY_MATH_E",
"YY_MATH_PI","YY_GLOBAL","YY_WIDTH","YY_HEIGHT","YY_POS","YY_IMG_BGCOLOR","YY_IMG_FGCOLOR",
"YY_GL_BGCOLOR","YY_GL_SPHERE_SECTIONS","YY_NUM_THREADS","YY_RENDER_X_BLOCK",
"YY_RENDER_Y_BLOCK","YY_RENDER_HANDLER_SLEEP","YY_RENDER_THREAD_SLEEP","YY_RENDER_SPINLOCK_SLEEP",
"YY_GAUSSIAN_BLUR_MAX","YY_GAUSSIAN_BLUR_SIGMA","YY_TRIANGLE_TEST","YY_BARYCENTRIC",
"YY_PROJECTION","YY_PLUCKER","YY_MOLLER","YY_GL_RENDER_LIGHTS","YY_HEADLESS",
"YY_CAMERA","YY_DIR","YY_LOOKAT","YY_UP","YY_FOV","YY_ASPECT","YY_MIN_DRAW",
"YY_MAX_DRAW","YY_P0","YY_SPIRAL_NUM_SPHERES","YY_SPIRAL_RADIUS","YY_LORENZ_DT",
"YY_LORENZ_MIN_DISTANCE","YY_LORENZ_MAX_DISTANCE","YY_LORENZ_SIGMA","YY_LORENZ_RHO",
"YY_LORENZ_BETA","YY_LORENZ_RADIUS","YY_LORENZ_NUM_SPHERES","YY_LORENZ_START",
"YY_TRIANGLE","YY_V1","YY_V2","YY_V3","YY_N1","YY_N2","YY_N3","YY_MESH","YY_LOAD",
"YY_INSTANCE","YY_GEOMETRY","YY_PUSHMATRIX","YY_POPMATRIX","YY_ROTATE","YY_TRANSLATE",
"YY_SCALE","YY_LIGHT","YY_POINTLIGHT","YY_WATTAGE","YY_COLOR","YY_MATERIAL",
"YY_LAMBERT","YY_DIFFUSE","YY_AMBIENT","YY_SPHERE","YY_CENTER","YY_RADIUS","'='",
"'-'","'+'","'*'","'/'","NEG","'^'","'{'","'}'","','","'('","')'","input","block",
"objectTypes","@1","@2","@3","@4","@5","@6","@7","@8","triangleOptions","sphereOptions",
"instanceOptions","transform","lightTypes","@9","materialTypes","@10","lightOptions",
"lambertOptions","meshOptions","globalOptions","cameraOptions","p0Options","rExp",
"fExp","constantExp","iExp",""
};
#endif

static const short yyr1[] = {     0,
   105,   105,   106,   106,   106,   106,   106,   106,   106,   108,
   107,   109,   107,   110,   107,   111,   107,   112,   107,   113,
   107,   114,   107,   115,   107,   116,   116,   116,   116,   116,
   116,   116,   117,   117,   117,   118,   118,   119,   119,   119,
   119,   119,   121,   120,   123,   122,   124,   124,   124,   124,
   125,   125,   125,   126,   126,   127,   127,   127,   127,   127,
   127,   127,   127,   127,   127,   127,   127,   127,   127,   127,
   127,   127,   127,   127,   127,   127,   127,   127,   128,   128,
   128,   128,   128,   128,   128,   128,   128,   129,   129,   129,
   129,   129,   129,   129,   129,   129,   129,   129,   129,   130,
   130,   130,   130,   130,   130,   130,   130,   130,   130,   130,
   130,   130,   130,   130,   130,   130,   130,   130,   130,   130,
   131,   131,   131,   131,   131,   131,   131,   131,   131,   131,
   132,   132,   133,   133,   133,   133,   133,   133,   133,   133
};

static const short yyr2[] = {     0,
     0,     2,     4,     4,     3,     3,     4,     1,     1,     0,
     5,     0,     6,     0,     5,     0,     6,     0,     5,     0,
     6,     0,     5,     0,     6,     0,     7,     7,     7,     7,
     7,     7,     0,     7,     3,     0,     3,     1,     1,     8,
     6,     6,     0,     4,     0,     4,     0,     7,     3,     7,
     0,     7,     7,     0,     2,     0,     3,     3,     7,     7,
     7,     3,     3,     3,     4,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     0,     7,
     7,     7,     7,     3,     3,     3,     3,     0,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     7,     1,
     1,     1,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     2,     3,     1,
     4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
     1,     1,     1,     3,     3,     3,     3,     2,     3,     3
};

static const short yydefact[] = {     1,
     0,     0,     0,     0,     0,     0,     0,    38,    39,     0,
     0,     0,     0,     0,     0,     2,     8,     9,    56,    79,
    88,     0,    10,     0,    14,     0,    22,   100,   133,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   131,
   132,     0,     0,     0,   102,   120,   101,     0,     0,     0,
     0,     0,     0,     0,    18,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    12,    26,    16,    54,    24,    36,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   118,   101,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    43,     5,    45,
     6,    20,    33,    56,    56,    56,    56,     0,     0,    56,
    56,     0,     0,     0,    56,    56,    56,    56,    56,    56,
    56,    56,    56,    56,    56,    56,     3,     0,     0,     0,
     0,    79,    79,    79,    79,     4,    88,    88,    88,    88,
    88,    88,    88,    88,    88,    88,     0,     7,    26,     0,
     0,     0,     0,     0,     0,     0,    54,     0,     0,    36,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   119,   140,   106,   101,   103,   101,   109,   101,
   112,   101,   115,   101,     0,   107,   101,   104,   101,   110,
   101,   113,   101,   116,   101,     0,     0,    47,    51,    33,
     0,     0,     0,    75,    77,    76,    78,   138,     0,     0,
     0,     0,     0,     0,    58,    57,     0,     0,     0,    62,
    63,    68,    69,    70,    71,    72,    73,    74,    56,    64,
    66,    67,     0,     0,     0,     0,    84,    85,    86,    87,
    89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
     0,     0,     0,     0,     0,     0,     0,     0,    11,     0,
    55,    15,     0,    33,    23,   122,   121,   123,   125,   124,
   126,   127,   128,   129,   130,     0,     0,     0,     0,     0,
     0,    44,     0,     0,    46,     0,     0,    33,    19,   135,
   134,   136,   137,   139,     0,     0,     0,    65,     0,     0,
     0,     0,     0,    13,     0,     0,     0,     0,     0,     0,
    17,    25,    37,     0,    41,    42,     0,    47,     0,     0,
     0,    21,     0,    35,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    49,     0,     0,     0,     0,    56,    56,    56,    79,    79,
    79,    79,    88,     0,     0,     0,     0,     0,     0,    40,
     0,     0,     0,     0,     0,    60,    61,    59,    80,    81,
    82,    83,    99,    26,    26,    26,    26,    26,    26,     0,
     0,     0,     0,    33,    27,    28,    29,    30,    31,    32,
    47,    47,    51,    51,    34,    48,    50,    52,    53,     0,
     0
};

static const short yydefgoto[] = {     1,
    16,    17,    96,   179,    98,   187,   133,   230,   100,   190,
   186,   233,   192,    18,    51,   228,    53,   229,   312,   315,
   189,    73,    82,    94,    44,    45,    46,    47
};

static const short yypact[] = {-32768,
   129,   -56,   -54,   -19,     1,     2,    20,-32768,-32768,   376,
   376,   376,     3,    -2,    21,-32768,-32768,-32768,   553,   317,
   451,   -13,-32768,     0,-32768,    30,-32768,-32768,-32768,    22,
    28,    29,    32,    33,    34,    42,    44,    61,    63,-32768,
-32768,   376,   376,    54,-32768,-32768,   945,   258,   552,    57,
    67,    80,    81,    89,-32768,   -33,   -17,    25,    25,   376,
   376,   376,    25,    25,    25,    25,    25,    25,    25,   376,
   376,     5,    87,   376,   376,   376,   376,   376,   376,   376,
   376,   100,    25,   376,   376,   376,   376,   376,   376,   376,
   376,    25,   376,   102,-32768,   966,-32768,   131,-32768,   136,
   376,   376,   376,   376,   376,   376,   376,   376,   376,   376,
   117,   125,    82,   344,   376,   376,   376,   376,   376,   376,
   376,   376,   376,   376,   376,   376,   376,-32768,-32768,-32768,
-32768,-32768,   -39,   553,   553,   553,   553,    25,    25,   395,
   395,   561,   570,   579,   395,   395,   395,   395,   395,   395,
   395,   427,   427,   519,   553,   553,-32768,   588,   597,   606,
   615,   238,   238,   238,   238,-32768,   350,   440,   440,   440,
   440,   440,   440,   440,   440,   350,   624,-32768,   966,   376,
   376,   376,   376,   376,   376,   130,   131,    98,   132,   136,
   221,   134,   377,   389,   469,   475,   499,   505,   511,   517,
   523,   529,-32768,-32768,    27,    88,    27,    88,   117,   125,
   117,   125,   117,   125,   633,    27,    88,    27,    88,   117,
   125,   117,   125,   117,   125,   642,   651,     4,   -27,   -39,
   376,   376,   138,-32768,-32768,-32768,-32768,   135,   535,    25,
    25,    25,    25,    25,-32768,-32768,   376,   376,   376,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   553,-32768,
-32768,-32768,   376,   376,   376,   376,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   376,   139,   660,   669,   678,   687,   696,   705,-32768,   140,
-32768,-32768,   142,   -39,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   376,   376,   376,   376,   376,
   376,-32768,   376,   376,-32768,   146,   714,   546,-32768,   126,
   126,   135,   135,   135,   723,   732,   741,-32768,   750,   759,
   768,   777,   786,-32768,   376,   376,   376,   376,   376,   376,
-32768,-32768,-32768,   795,   951,   951,   804,   133,   813,   822,
   831,-32768,   376,-32768,   376,   376,   376,   376,   376,   376,
   376,   376,   840,   849,   858,   867,   876,   885,   376,   376,
-32768,   376,   376,   376,   894,   427,   427,   427,   238,   238,
   238,   238,   440,   376,   376,   376,   376,   376,   376,   951,
   903,   912,   921,   930,   376,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   210,   210,   210,   210,   210,   210,   376,
   376,   376,   376,   546,-32768,-32768,-32768,-32768,-32768,-32768,
   133,   133,    66,    66,-32768,-32768,-32768,-32768,-32768,   248,
-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -146,  -172,    59,-32768,-32768,-32768,-32768,-32768,  -338,  -352,
    64,  -132,  -108,  -133,   -11,-32768,-32768,    75
};


#define	YYLAST		1050


static const short yytable[] = {    48,
    49,   234,   235,   236,   237,    22,    24,   245,   246,   371,
   134,   135,   250,   251,   252,   253,   254,   255,   256,   257,
   258,   260,   261,   262,    26,    54,   136,   137,    29,   309,
   111,   113,   282,   271,   272,   273,   274,   275,   276,   277,
   278,   279,   280,    19,   154,    20,   155,   156,   142,   143,
   144,   231,   232,   267,   268,   269,   270,   316,   152,   153,
   313,   314,   158,   159,   160,   161,   162,   163,   164,   165,
   428,   429,   168,   169,   170,   171,   172,   173,   174,   175,
    21,   177,   426,   427,    52,    50,    95,   310,   311,   193,
   194,   195,   196,   197,   198,   199,   200,   201,   202,    97,
    23,    25,   291,   205,   207,   209,   211,   213,   215,   216,
   218,   220,   222,   224,   226,   227,   112,   114,   138,    27,
    55,   343,   117,   118,   101,   119,   328,   139,   430,    99,
   102,   103,   140,   141,   104,   105,   106,   145,   146,   147,
   148,   149,   150,   151,   107,   354,   108,   115,   116,   117,
   118,     2,   119,   313,   314,   120,   128,   167,   309,   115,
   116,   117,   118,   109,   119,   110,   176,   129,   283,   284,
   285,   286,   287,   288,     3,   115,   116,   117,   118,   130,
   119,   131,     4,   123,   124,   203,   125,   157,   132,   206,
   208,   210,   212,   214,     5,   217,   219,   221,   223,   225,
   166,     6,   178,     7,   188,     8,     9,    10,    11,    12,
    13,   191,   238,   239,    14,   119,   310,   311,    15,   317,
   318,   242,   243,   125,   244,   294,   115,   116,   117,   118,
   289,   119,   292,   244,   295,   325,   326,   327,   319,   334,
   341,   425,   342,   396,   397,   398,   352,   431,   293,   403,
   290,   329,   330,   331,   332,     0,     0,   415,   416,   417,
   418,   419,   420,    74,     0,     0,     0,     0,     0,   333,
   399,   400,   401,   402,     0,     0,   180,   181,   182,   183,
   184,   185,     0,     0,    75,    76,    77,    78,    79,    80,
    81,     0,     0,     0,   344,   345,   346,   347,   348,   349,
     0,   350,   351,   115,   116,   117,   118,     0,   119,     0,
     0,     0,     0,     0,   320,   321,   322,   323,   324,     0,
     0,     0,     0,   363,   364,   365,   366,   367,   368,     0,
     0,   115,   116,   117,   118,     0,   119,     0,     0,     0,
     0,   375,    74,   376,   377,   378,   379,   380,   381,   382,
   383,   115,   116,   117,   118,     0,   119,   390,   391,   126,
   392,   393,   394,    75,    76,    77,    78,    79,    80,    81,
     0,     0,   404,   405,   406,   407,   408,   409,    28,    29,
     0,     0,     0,   414,     0,    30,    31,    32,    33,    34,
    35,     0,    36,    37,    38,    39,    40,    41,   421,   422,
   423,   424,    56,    57,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,     0,     0,     0,    58,    59,
     0,    60,    61,    62,    63,    64,    65,    66,    67,    68,
    69,    70,    71,    72,    56,    57,     0,   121,   122,   123,
   124,     0,   125,   240,   241,   242,   243,   204,   244,     0,
    58,    59,     0,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,     0,     0,     0,    42,
   115,   116,   117,   118,     0,   119,     0,     0,    43,     0,
   296,     0,   115,   116,   117,   118,     0,   119,   240,   241,
   242,   243,   297,   244,    83,    84,    85,    86,    87,    88,
    89,    90,    91,    92,    93,    83,    84,    85,    86,    87,
    88,    89,    90,    91,    92,    93,     0,     0,     0,     0,
   115,   116,   117,   118,     0,   119,    56,    57,     0,     0,
     0,     0,     0,   115,   116,   117,   118,     0,   119,     0,
     0,     0,    58,    59,     0,    60,    61,    62,    63,    64,
    65,    66,    67,    68,    69,    70,    71,    72,     0,   259,
    56,    57,   115,   116,   117,   118,     0,   119,   115,   116,
   117,   118,   298,   119,     0,     0,    58,    59,   299,    60,
    61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
    71,    72,   115,   116,   117,   118,     0,   119,   115,   116,
   117,   118,   300,   119,   115,   116,   117,   118,   301,   119,
   115,   116,   117,   118,   302,   119,   115,   116,   117,   118,
   303,   119,   115,   116,   117,   118,   304,   119,   240,   241,
   242,   243,   305,   244,     0,     0,   231,   232,   204,   115,
   116,   117,   118,     0,   119,   115,   116,   117,   118,     0,
   119,     0,     0,   127,   115,   116,   117,   118,     0,   119,
     0,     0,   247,   115,   116,   117,   118,     0,   119,     0,
     0,   248,   115,   116,   117,   118,     0,   119,     0,     0,
   249,   115,   116,   117,   118,     0,   119,     0,     0,   263,
   115,   116,   117,   118,     0,   119,     0,     0,   264,   115,
   116,   117,   118,     0,   119,     0,     0,   265,   115,   116,
   117,   118,     0,   119,     0,     0,   266,   115,   116,   117,
   118,     0,   119,     0,     0,   281,   115,   116,   117,   118,
     0,   119,     0,     0,   306,   115,   116,   117,   118,     0,
   119,     0,     0,   307,   115,   116,   117,   118,     0,   119,
     0,     0,   308,   115,   116,   117,   118,     0,   119,     0,
     0,   335,   115,   116,   117,   118,     0,   119,     0,     0,
   336,   115,   116,   117,   118,     0,   119,     0,     0,   337,
   115,   116,   117,   118,     0,   119,     0,     0,   338,   115,
   116,   117,   118,     0,   119,     0,     0,   339,   115,   116,
   117,   118,     0,   119,     0,     0,   340,   115,   116,   117,
   118,     0,   119,     0,     0,   353,   115,   116,   117,   118,
     0,   119,     0,     0,   355,   115,   116,   117,   118,     0,
   119,     0,     0,   356,   115,   116,   117,   118,     0,   119,
     0,     0,   357,   115,   116,   117,   118,     0,   119,     0,
     0,   358,   115,   116,   117,   118,     0,   119,     0,     0,
   359,   115,   116,   117,   118,     0,   119,     0,     0,   360,
   115,   116,   117,   118,     0,   119,     0,     0,   361,   115,
   116,   117,   118,     0,   119,     0,     0,   362,   115,   116,
   117,   118,     0,   119,     0,     0,   369,   115,   116,   117,
   118,     0,   119,     0,     0,   370,   115,   116,   117,   118,
     0,   119,     0,     0,   372,   115,   116,   117,   118,     0,
   119,     0,     0,   373,   115,   116,   117,   118,     0,   119,
     0,     0,   374,   115,   116,   117,   118,     0,   119,     0,
     0,   384,   115,   116,   117,   118,     0,   119,     0,     0,
   385,   115,   116,   117,   118,     0,   119,     0,     0,   386,
   115,   116,   117,   118,     0,   119,     0,     0,   387,   115,
   116,   117,   118,     0,   119,     0,     0,   388,   115,   116,
   117,   118,     0,   119,     0,     0,   389,   115,   116,   117,
   118,     0,   119,     0,     0,   395,   115,   116,   117,   118,
     0,   119,     0,     0,   410,   115,   116,   117,   118,     0,
   119,     0,     0,   411,   115,   116,   117,   118,     0,   119,
     0,     0,   412,   115,   116,   117,   118,     0,   119,     0,
     0,   413,   180,   181,   182,   183,   184,   185,   121,   122,
   123,   124,     0,   125,   115,   116,   117,   118,     0,   119
};

static const short yycheck[] = {    11,
    12,   134,   135,   136,   137,     5,     5,   140,   141,   348,
    44,    45,   145,   146,   147,   148,   149,   150,   151,   152,
   153,   154,   155,   156,     5,     5,    44,    45,     4,    26,
    42,    43,   179,   167,   168,   169,   170,   171,   172,   173,
   174,   175,   176,   100,    40,   100,    42,    43,    60,    61,
    62,    91,    92,   162,   163,   164,   165,   230,    70,    71,
    88,    89,    74,    75,    76,    77,    78,    79,    80,    81,
   423,   424,    84,    85,    86,    87,    88,    89,    90,    91,
   100,    93,   421,   422,    87,    83,   100,    84,    85,   101,
   102,   103,   104,   105,   106,   107,   108,   109,   110,   100,
   100,   100,     5,   115,   116,   117,   118,   119,   120,   121,
   122,   123,   124,   125,   126,   127,    42,    43,    94,   100,
   100,   294,    96,    97,   103,    99,   259,   103,     0,   100,
   103,   103,    58,    59,   103,   103,   103,    63,    64,    65,
    66,    67,    68,    69,   103,   318,   103,    94,    95,    96,
    97,    23,    99,    88,    89,   102,   100,    83,    26,    94,
    95,    96,    97,   103,    99,   103,    92,   101,   180,   181,
   182,   183,   184,   185,    46,    94,    95,    96,    97,   100,
    99,   101,    54,    96,    97,   104,    99,   101,   100,   115,
   116,   117,   118,   119,    66,   121,   122,   123,   124,   125,
   101,    73,   101,    75,    74,    77,    78,    79,    80,    81,
    82,    76,   138,   139,    86,    99,    84,    85,    90,   231,
   232,    96,    97,    99,    99,     5,    94,    95,    96,    97,
   101,    99,   101,    99,   101,   247,   248,   249,   101,   101,
   101,   414,   101,   376,   377,   378,   101,     0,   190,   383,
   187,   263,   264,   265,   266,    -1,    -1,   404,   405,   406,
   407,   408,   409,    26,    -1,    -1,    -1,    -1,    -1,   281,
   379,   380,   381,   382,    -1,    -1,    67,    68,    69,    70,
    71,    72,    -1,    -1,    47,    48,    49,    50,    51,    52,
    53,    -1,    -1,    -1,   306,   307,   308,   309,   310,   311,
    -1,   313,   314,    94,    95,    96,    97,    -1,    99,    -1,
    -1,    -1,    -1,    -1,   240,   241,   242,   243,   244,    -1,
    -1,    -1,    -1,   335,   336,   337,   338,   339,   340,    -1,
    -1,    94,    95,    96,    97,    -1,    99,    -1,    -1,    -1,
    -1,   353,    26,   355,   356,   357,   358,   359,   360,   361,
   362,    94,    95,    96,    97,    -1,    99,   369,   370,   102,
   372,   373,   374,    47,    48,    49,    50,    51,    52,    53,
    -1,    -1,   384,   385,   386,   387,   388,   389,     3,     4,
    -1,    -1,    -1,   395,    -1,    10,    11,    12,    13,    14,
    15,    -1,    17,    18,    19,    20,    21,    22,   410,   411,
   412,   413,     8,     9,    55,    56,    57,    58,    59,    60,
    61,    62,    63,    64,    65,    -1,    -1,    -1,    24,    25,
    -1,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,     8,     9,    -1,    94,    95,    96,
    97,    -1,    99,    94,    95,    96,    97,   104,    99,    -1,
    24,    25,    -1,    27,    28,    29,    30,    31,    32,    33,
    34,    35,    36,    37,    38,    39,    -1,    -1,    -1,    94,
    94,    95,    96,    97,    -1,    99,    -1,    -1,   103,    -1,
   104,    -1,    94,    95,    96,    97,    -1,    99,    94,    95,
    96,    97,   104,    99,    55,    56,    57,    58,    59,    60,
    61,    62,    63,    64,    65,    55,    56,    57,    58,    59,
    60,    61,    62,    63,    64,    65,    -1,    -1,    -1,    -1,
    94,    95,    96,    97,    -1,    99,     8,     9,    -1,    -1,
    -1,    -1,    -1,    94,    95,    96,    97,    -1,    99,    -1,
    -1,    -1,    24,    25,    -1,    27,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    38,    39,    -1,    41,
     8,     9,    94,    95,    96,    97,    -1,    99,    94,    95,
    96,    97,   104,    99,    -1,    -1,    24,    25,   104,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
    38,    39,    94,    95,    96,    97,    -1,    99,    94,    95,
    96,    97,   104,    99,    94,    95,    96,    97,   104,    99,
    94,    95,    96,    97,   104,    99,    94,    95,    96,    97,
   104,    99,    94,    95,    96,    97,   104,    99,    94,    95,
    96,    97,   104,    99,    -1,    -1,    91,    92,   104,    94,
    95,    96,    97,    -1,    99,    94,    95,    96,    97,    -1,
    99,    -1,    -1,   102,    94,    95,    96,    97,    -1,    99,
    -1,    -1,   102,    94,    95,    96,    97,    -1,    99,    -1,
    -1,   102,    94,    95,    96,    97,    -1,    99,    -1,    -1,
   102,    94,    95,    96,    97,    -1,    99,    -1,    -1,   102,
    94,    95,    96,    97,    -1,    99,    -1,    -1,   102,    94,
    95,    96,    97,    -1,    99,    -1,    -1,   102,    94,    95,
    96,    97,    -1,    99,    -1,    -1,   102,    94,    95,    96,
    97,    -1,    99,    -1,    -1,   102,    94,    95,    96,    97,
    -1,    99,    -1,    -1,   102,    94,    95,    96,    97,    -1,
    99,    -1,    -1,   102,    94,    95,    96,    97,    -1,    99,
    -1,    -1,   102,    94,    95,    96,    97,    -1,    99,    -1,
    -1,   102,    94,    95,    96,    97,    -1,    99,    -1,    -1,
   102,    94,    95,    96,    97,    -1,    99,    -1,    -1,   102,
    94,    95,    96,    97,    -1,    99,    -1,    -1,   102,    94,
    95,    96,    97,    -1,    99,    -1,    -1,   102,    94,    95,
    96,    97,    -1,    99,    -1,    -1,   102,    94,    95,    96,
    97,    -1,    99,    -1,    -1,   102,    94,    95,    96,    97,
    -1,    99,    -1,    -1,   102,    94,    95,    96,    97,    -1,
    99,    -1,    -1,   102,    94,    95,    96,    97,    -1,    99,
    -1,    -1,   102,    94,    95,    96,    97,    -1,    99,    -1,
    -1,   102,    94,    95,    96,    97,    -1,    99,    -1,    -1,
   102,    94,    95,    96,    97,    -1,    99,    -1,    -1,   102,
    94,    95,    96,    97,    -1,    99,    -1,    -1,   102,    94,
    95,    96,    97,    -1,    99,    -1,    -1,   102,    94,    95,
    96,    97,    -1,    99,    -1,    -1,   102,    94,    95,    96,
    97,    -1,    99,    -1,    -1,   102,    94,    95,    96,    97,
    -1,    99,    -1,    -1,   102,    94,    95,    96,    97,    -1,
    99,    -1,    -1,   102,    94,    95,    96,    97,    -1,    99,
    -1,    -1,   102,    94,    95,    96,    97,    -1,    99,    -1,
    -1,   102,    94,    95,    96,    97,    -1,    99,    -1,    -1,
   102,    94,    95,    96,    97,    -1,    99,    -1,    -1,   102,
    94,    95,    96,    97,    -1,    99,    -1,    -1,   102,    94,
    95,    96,    97,    -1,    99,    -1,    -1,   102,    94,    95,
    96,    97,    -1,    99,    -1,    -1,   102,    94,    95,    96,
    97,    -1,    99,    -1,    -1,   102,    94,    95,    96,    97,
    -1,    99,    -1,    -1,   102,    94,    95,    96,    97,    -1,
    99,    -1,    -1,   102,    94,    95,    96,    97,    -1,    99,
    -1,    -1,   102,    94,    95,    96,    97,    -1,    99,    -1,
    -1,   102,    67,    68,    69,    70,    71,    72,    94,    95,
    96,    97,    -1,    99,    94,    95,    96,    97,    -1,    99
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 192 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

int
yyparse(YYPARSE_PARAM)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 3:
#line 184 "parser.y"
{ memmove( &yyval, &yyval, sizeof(yyval) ); printf("\n"); ;
    break;}
case 4:
#line 185 "parser.y"
{ printf("\n"); ;
    break;}
case 5:
#line 186 "parser.y"
{ printf("\n"); g_scene->AddLight( g_light ); g_light = NULL; ;
    break;}
case 6:
#line 187 "parser.y"
{ printf("\n"); g_scene->AddMaterial( g_material ); ;
    break;}
case 7:
#line 188 "parser.y"
{ printf("\n"); ;
    break;}
case 8:
#line 189 "parser.y"
{ printf("\n"); ;
    break;}
case 9:
#line 190 "parser.y"
{ printf("\n"); ;
    break;}
case 10:
#line 195 "parser.y"
{
                g_mesh = new rawray::TriangleMesh();
                #ifdef VERBOSE_NEW
                printf( "MESH: %x", g_mesh );
                #endif
                //((TriangleMesh*)pObj)->CreateSingleTriangle();
            ;
    break;}
case 11:
#line 203 "parser.y"
{
                g_scene->AddMesh( g_mesh );
                rawray::AddTrianglesOfMesh();
            ;
    break;}
case 12:
#line 209 "parser.y"
{
                g_mesh = new rawray::TriangleMesh();
                #ifdef VERBOSE_NEW
                printf( "MESH: %x", g_mesh );
                #endif
                
                //g_objectMap[$2] = pObj;
                //((TriangleMesh*)pObj)->CreateSingleTriangle();
            ;
    break;}
case 13:
#line 219 "parser.y"
{
                g_scene->AddMesh( g_mesh );
                rawray::AddTrianglesOfMesh();
            ;
    break;}
case 14:
#line 225 "parser.y"
{
                g_mesh = new rawray::TriangleMesh();
                #ifdef VERBOSE_NEW
                printf( "MESH: %x", g_mesh );
                #endif
            ;
    break;}
case 15:
#line 232 "parser.y"
{
                g_scene->AddMesh( g_mesh );
                rawray::AddTrianglesOfMesh();
            ;
    break;}
case 16:
#line 238 "parser.y"
{
                g_mesh = new rawray::TriangleMesh();
                #ifdef VERBOSE_NEW
                printf( "MESH: %x", g_mesh );
                #endif
                
                //g_objectMap[$2] = pObj;
            ;
    break;}
case 17:
#line 247 "parser.y"
{
                g_scene->AddMesh( g_mesh );
                rawray::AddTrianglesOfMesh();
            ;
    break;}
case 18:
#line 253 "parser.y"
{
                g_obj = new rawray::Sphere( math::Vector3(0),
                                            1.0f,
                                            g_material );
                                            
                #ifdef VERBOSE_NEW
                printf( "SPHERE: %x", g_obj );
                #endif
            ;
    break;}
case 19:
#line 263 "parser.y"
{
                g_scene->AddObject( g_obj );
                g_obj = NULL;
            ;
    break;}
case 20:
#line 269 "parser.y"
{
                g_obj = new rawray::Sphere( math::Vector3(0),
                                            1.0f,
                                            g_material );
                
                #ifdef VERBOSE_NEW
                printf( "SPHERE: %x", g_obj );
                #endif
                
                g_objectMap[yyvsp[-1].str] = g_obj;
            ;
    break;}
case 21:
#line 281 "parser.y"
{
                g_scene->AddObject( g_obj );
                g_obj = NULL;
            ;
    break;}
case 22:
#line 287 "parser.y"
{
                printf( "Instance not supported\n" );
            ;
    break;}
case 23:
#line 291 "parser.y"
{
            ;
    break;}
case 24:
#line 295 "parser.y"
{
                printf( "Named Instance not supported\n" );
            ;
    break;}
case 25:
#line 299 "parser.y"
{
            ;
    break;}
case 27:
#line 305 "parser.y"
{ printf( "Triangles not supported" ); ;
    break;}
case 28:
#line 307 "parser.y"
{ printf( "Triangles not supported" ); ;
    break;}
case 29:
#line 309 "parser.y"
{ printf( "Triangles not supported" ); ;
    break;}
case 30:
#line 311 "parser.y"
{ printf( "Triangles not supported" ); ;
    break;}
case 31:
#line 313 "parser.y"
{ printf( "Triangles not supported" ); ;
    break;}
case 32:
#line 315 "parser.y"
{ printf( "Triangles not supported" ); ;
    break;}
case 34:
#line 320 "parser.y"
{ ((rawray::Sphere*)g_obj)->SetCenter( math::Vector3(yyvsp[-5].real,yyvsp[-3].real,yyvsp[-1].real) ); ;
    break;}
case 35:
#line 322 "parser.y"
{ ((rawray::Sphere*)g_obj)->SetRadius( yyvsp[-1].real ); ;
    break;}
case 37:
#line 327 "parser.y"
{
                //std::map<std::string, Object*>::const_iterator it = g_objectMap.find ($2);
                //if (it != g_objectMap.end ())
                //{
                    //((Instance*)pObj)->SetGeometry(it->second, GetCTM());
                //}
            ;
    break;}
case 38:
#line 336 "parser.y"
{ /*PushMatrix();*/ ;
    break;}
case 39:
#line 338 "parser.y"
{ /*PopMatrix();*/ ;
    break;}
case 40:
#line 340 "parser.y"
{ /*Rotate($2, $4, $6, $8);*/ ;
    break;}
case 41:
#line 342 "parser.y"
{ /*Translate($2, $4, $6);*/ ;
    break;}
case 42:
#line 344 "parser.y"
{ /*Scale($2, $4, $6);*/ ;
    break;}
case 43:
#line 348 "parser.y"
{
                printf( "new point light\n" ); 
                g_light = new rawray::Light();
                
                #ifdef VERBOSE_NEW
                printf( "LIGHT: %x\n", g_light );
                #endif
            ;
    break;}
case 45:
#line 361 "parser.y"
{
                printf( "new lambert material\n" ); 
                g_material = new rawray::Lambert();
                
                #ifdef VERBOSE_NEW
                printf( "LAMVERT: %x\n", g_material );
                #endif
            ;
    break;}
case 48:
#line 375 "parser.y"
{ printf( "pos = %f, %f, %f\n", yyvsp[-5].real, yyvsp[-3].real, yyvsp[-1].real ); g_light->SetPosition( math::Vector3(yyvsp[-5].real,yyvsp[-3].real,yyvsp[-1].real) ); ;
    break;}
case 49:
#line 377 "parser.y"
{ printf( "wattage = %f\n", yyvsp[-1].real ); g_light->SetWattage( yyvsp[-1].real ); ;
    break;}
case 50:
#line 379 "parser.y"
{ printf( "color = %f, %f, %f\n", yyvsp[-5].real, yyvsp[-3].real, yyvsp[-1].real ); g_light->SetColor( math::Vector3(yyvsp[-5].real,yyvsp[-3].real,yyvsp[-1].real) ); ;
    break;}
case 52:
#line 384 "parser.y"
{ printf( "diffuse = %f, %f, %f\n", yyvsp[-5].real, yyvsp[-3].real, yyvsp[-1].real ); ((rawray::Lambert*)g_material)->SetDiffuse( math::Vector3(yyvsp[-5].real,yyvsp[-3].real,yyvsp[-1].real) ); ;
    break;}
case 53:
#line 386 "parser.y"
{ printf( "ambient = %f, %f, %f\n", yyvsp[-5].real, yyvsp[-3].real, yyvsp[-1].real ); ((rawray::Lambert*)g_material)->SetAmbient( math::Vector3(yyvsp[-5].real,yyvsp[-3].real,yyvsp[-1].real) ); ;
    break;}
case 55:
#line 391 "parser.y"
{
                yyvsp[0].str[strlen(yyvsp[0].str)-1]=0;
                printf( "Loading Mesh: '%s'\n", yyvsp[0].str+1 );
                g_mesh->LoadOBJ( yyvsp[0].str+1 );
            ;
    break;}
case 57:
#line 400 "parser.y"
{ printf( "height = %d\n", yyvsp[-1].integer ); g_image->Resize( g_image->GetWidth(), rawray::options::global::win_height = yyvsp[-1].integer ); ;
    break;}
case 58:
#line 402 "parser.y"
{ printf( "width = %d\n", yyvsp[-1].integer ); g_image->Resize( rawray::options::global::win_width = yyvsp[-1].integer, g_image->GetHeight() ); ;
    break;}
case 59:
#line 404 "parser.y"
{ printf( "gl bg color = %f, %f, %f\n", yyvsp[-5].real, yyvsp[-3].real, yyvsp[-1].real ); rawray::options::global::gl_bg_color = math::Vector3(yyvsp[-5].real,yyvsp[-3].real,yyvsp[-1].real); ;
    break;}
case 60:
#line 406 "parser.y"
{ printf( "img bg color = %f, %f, %f\n", yyvsp[-5].real, yyvsp[-3].real, yyvsp[-1].real ); rawray::options::global::img_bg_color = math::Vector3(yyvsp[-5].real,yyvsp[-3].real,yyvsp[-1].real); ;
    break;}
case 61:
#line 408 "parser.y"
{ printf( "img fg color = %f, %f, %f\n", yyvsp[-5].real, yyvsp[-3].real, yyvsp[-1].real ); rawray::options::global::img_fg_color = math::Vector3(yyvsp[-5].real,yyvsp[-3].real,yyvsp[-1].real); ;
    break;}
case 62:
#line 410 "parser.y"
{ printf( "gl sphere sections = %d\n", rawray::options::global::gl_sphere_sections = yyvsp[-1].integer ); ;
    break;}
case 63:
#line 412 "parser.y"
{ printf( "num threads = %d\n", rawray::options::global::num_threads = yyvsp[-1].integer ); ;
    break;}
case 64:
#line 414 "parser.y"
{ printf( "triangle test = barycentric\n", rawray::options::global::triangle_intersection_algorithm = rawray::options::BARYCENTRIC ); ;
    break;}
case 65:
#line 416 "parser.y"
{ printf( "triangle test = barycentric projection\n", rawray::options::global::triangle_intersection_algorithm = rawray::options::BARYCENTRIC_PROJECTION ); ;
    break;}
case 66:
#line 418 "parser.y"
{ printf( "triangle test = plucker\n", rawray::options::global::triangle_intersection_algorithm = rawray::options::PLUCKER ); ;
    break;}
case 67:
#line 420 "parser.y"
{ printf( "triangle test = moller\n", rawray::options::global::triangle_intersection_algorithm = rawray::options::MOLLER ); ;
    break;}
case 68:
#line 422 "parser.y"
{ printf( "render x block = %d\n", rawray::options::global::render_x_block = yyvsp[-1].integer ); ;
    break;}
case 69:
#line 424 "parser.y"
{ printf( "render y block = %d\n", rawray::options::global::render_y_block = yyvsp[-1].integer ); ;
    break;}
case 70:
#line 426 "parser.y"
{ printf( "render handler sleep = %d\n", rawray::options::global::render_handler_sleep = yyvsp[-1].integer ); ;
    break;}
case 71:
#line 428 "parser.y"
{ printf( "render thread sleep = %d\n", rawray::options::global::render_thread_sleep = yyvsp[-1].integer ); ;
    break;}
case 72:
#line 430 "parser.y"
{ printf( "render spinlock sleep = %d\n", rawray::options::global::render_spinlock_sleep = yyvsp[-1].integer ); ;
    break;}
case 73:
#line 432 "parser.y"
{ printf( "gaussian blur max = %f\n", rawray::options::global::gaussian_blur_max = yyvsp[-1].real ); ;
    break;}
case 74:
#line 434 "parser.y"
{ printf( "gaussian blur sigma = %f\n", rawray::options::global::gaussian_blur_sigma = yyvsp[-1].real ); ;
    break;}
case 75:
#line 436 "parser.y"
{ printf( "enabling rendering of lights in gl\n" ); rawray::options::global::gl_render_lights = true; ;
    break;}
case 76:
#line 438 "parser.y"
{ printf( "disabling rendering of lights in gl\n" ); rawray::options::global::gl_render_lights = false; ;
    break;}
case 77:
#line 440 "parser.y"
{ printf( "enabling headless mode\n" ); rawray::options::global::headless = true; ;
    break;}
case 78:
#line 442 "parser.y"
{ printf( "disabling headless mode\n" ); rawray::options::global::headless = false; ;
    break;}
case 80:
#line 447 "parser.y"
{ printf( "camera pos = %f, %f, %f\n", yyvsp[-5].real, yyvsp[-3].real, yyvsp[-1].real ); g_camera->SetEye( rawray::options::camera::eye = math::Vector3(yyvsp[-5].real,yyvsp[-3].real,yyvsp[-1].real) ); ;
    break;}
case 81:
#line 449 "parser.y"
{ printf( "camera dir = %f, %f, %f\n", yyvsp[-5].real, yyvsp[-3].real, yyvsp[-1].real ); g_camera->SetViewDir( rawray::options::camera::view = math::Vector3(yyvsp[-5].real,yyvsp[-3].real,yyvsp[-1].real) ); ;
    break;}
case 82:
#line 451 "parser.y"
{ printf( "camera look at = %f, %f, %f\n", yyvsp[-5].real, yyvsp[-3].real, yyvsp[-1].real ); g_camera->SetLookAt( rawray::options::camera::lookat = math::Vector3(yyvsp[-5].real,yyvsp[-3].real,yyvsp[-1].real) ); ;
    break;}
case 83:
#line 453 "parser.y"
{ printf( "camera up = %f, %f, %f\n", yyvsp[-5].real, yyvsp[-3].real, yyvsp[-1].real ); g_camera->SetUp( rawray::options::camera::up = math::Vector3(yyvsp[-5].real,yyvsp[-3].real,yyvsp[-1].real) ); ;
    break;}
case 84:
#line 455 "parser.y"
{ printf( "camera fov = %f\n", yyvsp[-1].real ); g_camera->SetFOV( rawray::options::camera::fov = yyvsp[-1].real ); ;
    break;}
case 85:
#line 457 "parser.y"
{ printf( "camera aspect ratio = %f\n", yyvsp[-1].real ); g_camera->SetAspect( rawray::options::camera::aspect = yyvsp[-1].real ); ;
    break;}
case 86:
#line 459 "parser.y"
{ printf( "camera min draw = %f\n", yyvsp[-1].real ); g_camera->SetMinDraw( rawray::options::camera::min_draw = yyvsp[-1].real ); ;
    break;}
case 87:
#line 461 "parser.y"
{ printf( "camera max draw = %f\n", yyvsp[-1].real ); g_camera->SetMaxDraw( rawray::options::camera::max_draw = yyvsp[-1].real ); ;
    break;}
case 89:
#line 466 "parser.y"
{ printf( "spiral num spheres = %d\n", rawray::options::p0::spiral_num_spheres = yyvsp[-1].integer ); ;
    break;}
case 90:
#line 468 "parser.y"
{ printf( "spiral radius = %f\n", rawray::options::p0::spiral_radius = yyvsp[-1].real ); ;
    break;}
case 91:
#line 470 "parser.y"
{ printf( "lorenz dt = %f\n", rawray::options::p0::lorenz_dt = yyvsp[-1].real ); ;
    break;}
case 92:
#line 472 "parser.y"
{ printf( "lorenz min distance = %f\n", rawray::options::p0::lorenz_min_distance = yyvsp[-1].real ); ;
    break;}
case 93:
#line 474 "parser.y"
{ printf( "lorenz max distance = %f\n", rawray::options::p0::lorenz_max_distance = yyvsp[-1].real ); ;
    break;}
case 94:
#line 476 "parser.y"
{ printf( "lorenz sigma = %f\n", rawray::options::p0::lorenz_sigma = yyvsp[-1].real ); ;
    break;}
case 95:
#line 478 "parser.y"
{ printf( "lorenz rho = %f\n", rawray::options::p0::lorenz_rho = yyvsp[-1].real ); ;
    break;}
case 96:
#line 480 "parser.y"
{ printf( "lorenz beta = %f\n", rawray::options::p0::lorenz_beta = yyvsp[-1].real ); ;
    break;}
case 97:
#line 482 "parser.y"
{ printf( "lorenz radius = %f\n", rawray::options::p0::lorenz_radius = yyvsp[-1].real ); ;
    break;}
case 98:
#line 484 "parser.y"
{ printf( "lorenz num spheres = %d\n", rawray::options::p0::lorenz_num_spheres = yyvsp[-1].integer ); ;
    break;}
case 99:
#line 486 "parser.y"
{ printf( "lorenz start = %f, %f, %f\n", yyvsp[-5].real, yyvsp[-3].real, yyvsp[-1].real ); rawray::options::p0::lorenz_start = math::Vector3(yyvsp[-5].real,yyvsp[-3].real,yyvsp[-1].real); ;
    break;}
case 100:
#line 489 "parser.y"
{ yyval.real = yyvsp[0].real; ;
    break;}
case 101:
#line 490 "parser.y"
{ yyval.real = yyvsp[0].integer; ;
    break;}
case 102:
#line 491 "parser.y"
{ yyval.real = yyvsp[0].real; ;
    break;}
case 103:
#line 493 "parser.y"
{ yyval.real = yyvsp[-2].real + yyvsp[0].real; ;
    break;}
case 104:
#line 494 "parser.y"
{ yyval.real = yyvsp[-2].integer + yyvsp[0].real; ;
    break;}
case 105:
#line 495 "parser.y"
{ yyval.real = yyvsp[-2].real + yyvsp[0].integer; ;
    break;}
case 106:
#line 497 "parser.y"
{ yyval.real = yyvsp[-2].real - yyvsp[0].real; ;
    break;}
case 107:
#line 498 "parser.y"
{ yyval.real = yyvsp[-2].integer - yyvsp[0].real; ;
    break;}
case 108:
#line 499 "parser.y"
{ yyval.real = yyvsp[-2].real - yyvsp[0].integer; ;
    break;}
case 109:
#line 501 "parser.y"
{ yyval.real = yyvsp[-2].real * yyvsp[0].real; ;
    break;}
case 110:
#line 502 "parser.y"
{ yyval.real = yyvsp[-2].integer * yyvsp[0].real; ;
    break;}
case 111:
#line 503 "parser.y"
{ yyval.real = yyvsp[-2].real * yyvsp[0].integer; ;
    break;}
case 112:
#line 505 "parser.y"
{ yyval.real = yyvsp[-2].real / yyvsp[0].real; ;
    break;}
case 113:
#line 506 "parser.y"
{ yyval.real = yyvsp[-2].integer / yyvsp[0].real; ;
    break;}
case 114:
#line 507 "parser.y"
{ yyval.real = yyvsp[-2].real / yyvsp[0].integer; ;
    break;}
case 115:
#line 509 "parser.y"
{ yyval.real = pow (float (yyvsp[-2].real), float (yyvsp[0].real)); ;
    break;}
case 116:
#line 510 "parser.y"
{ yyval.real = pow (float (yyvsp[-2].integer), float (yyvsp[0].real)); ;
    break;}
case 117:
#line 511 "parser.y"
{ yyval.real = pow (float (yyvsp[-2].real), float (yyvsp[0].integer)); ;
    break;}
case 118:
#line 513 "parser.y"
{ yyval.real = -yyvsp[0].real; ;
    break;}
case 119:
#line 514 "parser.y"
{ yyval.real = yyvsp[-1].real; ;
    break;}
case 121:
#line 518 "parser.y"
{yyval.real = sin(yyvsp[-1].real); ;
    break;}
case 122:
#line 519 "parser.y"
{yyval.real = cos(yyvsp[-1].real); ;
    break;}
case 123:
#line 520 "parser.y"
{yyval.real = tan(yyvsp[-1].real); ;
    break;}
case 124:
#line 521 "parser.y"
{yyval.real = asin(yyvsp[-1].real); ;
    break;}
case 125:
#line 522 "parser.y"
{yyval.real = acos(yyvsp[-1].real); ;
    break;}
case 126:
#line 523 "parser.y"
{yyval.real = atan(yyvsp[-1].real); ;
    break;}
case 127:
#line 524 "parser.y"
{yyval.real = log(yyvsp[-1].real); ;
    break;}
case 128:
#line 525 "parser.y"
{yyval.real = log10(yyvsp[-1].real); ;
    break;}
case 129:
#line 526 "parser.y"
{yyval.real = exp(yyvsp[-1].real); ;
    break;}
case 130:
#line 527 "parser.y"
{yyval.real = sqrt(yyvsp[-1].real); ;
    break;}
case 131:
#line 531 "parser.y"
{ yyval.real = 2.718281828459f; ;
    break;}
case 132:
#line 532 "parser.y"
{ yyval.real = 3.141592653589793f; ;
    break;}
case 133:
#line 535 "parser.y"
{ yyval.integer = yyvsp[0].integer; ;
    break;}
case 134:
#line 536 "parser.y"
{ yyval.integer = yyvsp[-2].integer + yyvsp[0].integer; ;
    break;}
case 135:
#line 537 "parser.y"
{ yyval.integer = yyvsp[-2].integer - yyvsp[0].integer; ;
    break;}
case 136:
#line 538 "parser.y"
{ yyval.integer = yyvsp[-2].integer * yyvsp[0].integer; ;
    break;}
case 137:
#line 539 "parser.y"
{ yyval.integer = yyvsp[-2].integer / yyvsp[0].integer; ;
    break;}
case 138:
#line 540 "parser.y"
{ yyval.integer = -yyvsp[0].integer; ;
    break;}
case 139:
#line 541 "parser.y"
{ yyval.integer = (int)pow((float)yyvsp[-2].integer, (float)yyvsp[0].integer); ;
    break;}
case 140:
#line 542 "parser.y"
{ yyval.integer = yyvsp[-1].integer; ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 487 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 546 "parser.y"

//Additional C code

namespace rawray {

void AddTrianglesOfMesh() {
    for( uint32 i=0; i<g_mesh->GetNumTriangles(); ++i ) {
        Triangle* t = new Triangle( *g_mesh, i, g_material );
        g_scene->AddObject( t );
        
        #ifdef VERBOSE_NEW
        printf( "TRIANGLE: %x\n", t );
        #endif
    }
    
    g_mesh = NULL;
}

void SetConfigSources(Scene* scene, Camera* cam, Image* img) {
    g_scene = scene;
    g_camera = cam;
    g_image = img;
}

bool ConfigParser(const char* filename) {
#ifdef YYDEBUG
#if YYDEBUG==1
    yydebug = 1;
#endif
#endif
    
    if( !g_scene || !g_camera || !g_image )
        return false;
    
    yyin = fopen( filename, "r" );
    if( !yyin )
        return false;

    yyparse();
    fclose( yyin );

    printf( "Parse of '%s' success\n", filename );
    return true;
}

} // namespace rawray
