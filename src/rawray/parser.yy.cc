
/*  A Bison parser, made from parser.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	YY_REAL	258
#define	YY_PARSE_INT	259
#define	YY_STRING	260
#define	YY_PARSE_TRUE	261
#define	YY_PARSE_FALSE	262
#define	YY_ENABLE	263
#define	YY_DISABLE	264
#define	YY_MATH_COS	265
#define	YY_MATH_SIN	266
#define	YY_MATH_TAN	267
#define	YY_MATH_ACOS	268
#define	YY_MATH_ASIN	269
#define	YY_MATH_ATAN	270
#define	YY_MATH_ATAN2	271
#define	YY_MATH_LN	272
#define	YY_MATH_LOG	273
#define	YY_MATH_EXP	274
#define	YY_MATH_SQRT	275
#define	YY_MATH_E	276
#define	YY_MATH_PI	277
#define	YY_LT	278
#define	YY_GT	279
#define	YY_LBOX	280
#define	YY_RBOX	281
#define	YY_LCURLY	282
#define	YY_RCURLY	283
#define	YY_LPAREN	284
#define	YY_RPAREN	285
#define	YY_COMMA	286
#define	YY_EQUAL	287
#define	YY_PLUS	288
#define	YY_MINUS	289
#define	YY_DIV	290
#define	YY_MUL	291
#define	YY_CARAT	292
#define	YY_BSLASH	293
#define	YY_X	294
#define	YY_S_GLOBAL	295
#define	YY_SIZE	296
#define	YY_POS	297
#define	YY_IMG_BGCOLOR	298
#define	YY_IMG_FGCOLOR	299
#define	YY_GL_BGCOLOR	300
#define	YY_GL_SPHERE_SECTIONS	301
#define	YY_GL_RENDER_LIGHTS	302
#define	YY_GL_RENDER_BBOX	303
#define	YY_HEADLESS	304
#define	YY_NUM_THREADS	305
#define	YY_THREAD_JOB_SIZE	306
#define	YY_RENDER_HANDLER_SLEEP	307
#define	YY_RENDER_THREAD_SLEEP	308
#define	YY_RENDER_SPINLOCK_SLEEP	309
#define	YY_GAUSSIAN_BLUR_MAX	310
#define	YY_GAUSSIAN_BLUR_SIGMA	311
#define	YY_TRIANGLE_TEST	312
#define	YY_BARYCENTRIC	313
#define	YY_PROJECTION	314
#define	YY_PLUCKER	315
#define	YY_MOLLER	316
#define	YY_BOX_COST	317
#define	YY_OBJECT_COST	318
#define	YY_PFM	319
#define	YY_ANTI_ALIAS	320
#define	YY_S_CAMERA	321
#define	YY_DIR	322
#define	YY_LOOKAT	323
#define	YY_UP	324
#define	YY_FOV	325
#define	YY_ASPECT	326
#define	YY_MIN_DRAW	327
#define	YY_MAX_DRAW	328
#define	YY_S_P0	329
#define	YY_SPIRAL_NUM_SPHERES	330
#define	YY_SPIRAL_RADIUS	331
#define	YY_LORENZ_DT	332
#define	YY_LORENZ_MIN_DISTANCE	333
#define	YY_LORENZ_MAX_DISTANCE	334
#define	YY_LORENZ_SIGMA	335
#define	YY_LORENZ_RHO	336
#define	YY_LORENZ_BETA	337
#define	YY_LORENZ_RADIUS	338
#define	YY_LORENZ_NUM_SPHERES	339
#define	YY_LORENZ_START	340
#define	YY_S_TRIANGLE	341
#define	YY_V1	342
#define	YY_V2	343
#define	YY_V3	344
#define	YY_N1	345
#define	YY_N2	346
#define	YY_N3	347
#define	YY_S_MESH	348
#define	YY_LOAD	349
#define	YY_S_INSTANCE	350
#define	YY_GEOMETRY	351
#define	YY_S_MATRIX	352
#define	YY_PUSH	353
#define	YY_POP	354
#define	YY_ROTATE	355
#define	YY_TRANSLATE	356
#define	YY_SCALE	357
#define	YY_SET_IDENTITY	358
#define	YY_S_LIGHT	359
#define	YY_S_POINTLIGHT	360
#define	YY_S_SQUARELIGHT	361
#define	YY_S_SPHERELIGHT	362
#define	YY_WATTAGE	363
#define	YY_COLOR	364
#define	YY_NUM_SAMPLES	365
#define	YY_P1	366
#define	YY_P2	367
#define	YY_S_MULTIMATERIAL	368
#define	YY_S_MATERIAL	369
#define	YY_S_DIFFUSE	370
#define	YY_S_INDIRECT_DIFFUSE	371
#define	YY_S_PHONG	372
#define	YY_S_STONE	373
#define	YY_S_STONEBUMP	374
#define	YY_S_REFLECTIVE	375
#define	YY_S_REFRACTIVE	376
#define	YY_N	377
#define	YY_AMBIENT	378
#define	YY_COLOR_A	379
#define	YY_COLOR_B	380
#define	YY_AMPLITUDE	381
#define	YY_IOR	382
#define	YY_WEIGHT	383
#define	YY_S_SPHERE	384
#define	YY_CENTER	385
#define	YY_RADIUS	386
#define	YY_S_BLPATCH	387
#define	YY_P00	388
#define	YY_P01	389
#define	YY_P10	390
#define	YY_P11	391
#define	YY_U_CONSTRAINT	392
#define	YY_V_CONSTRAINT	393
#define	YY_EQUALS	394
#define	NEG	395

#line 1 "parser.y"

#ifdef WIN32
#pragma warning(disable:4244) // smaller type conversion warnings
#pragma warning(disable:4701) // variable used without being initialized
#ifdef NDEBUG
#pragma warning(disable:4702) // unreachable code in <vector> in release mode
#endif
#endif

#include "parser.h"
#include <stdlib.h>
#include <math.h>
#include <stack>
#include <queue>
#include <map>
#include <string>
#include <iostream>
#include "lexer.h"
#include "math/vector2.h"
#include "math/vector3.h"
#include "math/vector4.h"
#include "math/matrix4x4.h"
#include "object.h"
#include "multi_material.h"
#include "material.h"
#include "diffuse.h"
#include "indirect_diffuse.h"
#include "phong.h"
#include "stone.h"
#include "stone_bump.h"
#include "reflective.h"
#include "refractive.h"
#include "light.h"
#include "point_light.h"
#include "square_light.h"
#include "sphere_light.h"
#include "options.h"
#include "scene.h"
#include "camera.h"
#include "image.h"
#include "triangle_factory.h"
#include "sphere.h"
#include "bl_patch.h"

//#define YYDEBUG 1

#define yyerror(x) printf("Parser error #%d on line %d: %s\n", ++yyerr, yyline, x);

extern int yylex();
extern int yyline;
extern int yyerr;
extern FILE *yyin, *yyout;


// variables for adding objects, keeping track of variables
rawray::Camera*                         g_camera = NULL;
rawray::Scene*                          g_scene = NULL;
rawray::Image*                          g_image = NULL;

rawray::Object*                         g_obj = NULL;
rawray::Material*                       g_material = NULL;
rawray::MultiMaterial*					g_multimaterial = NULL;
rawray::Light*                          g_light = NULL;
rawray::TriangleMesh*                   g_mesh = NULL;

std::map<std::string, rawray::Object*>  g_objectMap;
std::stack<math::Matrix4x4>             g_matrixStack;


#line 71 "parser.y"
typedef union
{
    float			real;
    int				integer;
    char*			str;
    float			vec[4];
} YYSTYPE;

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		517
#define	YYFLAG		-32768
#define	YYNTBASE	141

#define YYTRANSLATE(x) ((unsigned)(x) <= 395 ? yytranslate[x] : 211)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     1,     3,     5,     8,    10,    13,    15,    18,    20,
    23,    25,    28,    30,    33,    35,    38,    40,    43,    45,
    48,    50,    53,    55,    58,    60,    63,    65,    68,    70,
    73,    75,    78,    80,    83,    85,    88,    90,    93,    95,
    98,   103,   108,   113,   117,   121,   126,   128,   130,   132,
   134,   136,   137,   142,   145,   148,   151,   154,   157,   160,
   163,   166,   169,   172,   175,   178,   181,   184,   189,   192,
   196,   199,   202,   205,   208,   211,   214,   217,   222,   225,
   228,   231,   234,   237,   240,   243,   246,   247,   252,   253,
   258,   259,   264,   267,   270,   273,   276,   279,   282,   285,
   288,   291,   294,   297,   300,   303,   306,   309,   310,   315,
   316,   321,   322,   327,   328,   333,   334,   339,   340,   345,
   346,   351,   352,   358,   361,   364,   367,   370,   373,   376,
   379,   382,   385,   386,   389,   391,   393,   395,   398,   401,
   404,   407,   410,   413,   416,   419,   422,   425,   428,   431,
   434,   437,   440,   443,   446,   449,   452,   455,   458,   461,
   464,   465,   471,   472,   479,   480,   486,   487,   494,   495,
   501,   502,   509,   515,   521,   527,   533,   537,   541,   549,
   557,   565,   573,   581,   589,   597,   605,   609,   613,   623,
   633,   643,   653,   663,   673,   683,   693,   703,   713,   723,
   733,   743,   753,   763,   773,   777,   781,   783,   785,   787,
   791,   795,   799,   803,   807,   810,   814,   816,   820,   824,
   828,   832,   836,   839,   843,   848,   853,   858,   863,   868,
   873,   878,   883,   888,   893,   898,   903,   908,   913,   918,
   923,   928,   933,   938,   943,   945
};

static const short yyrhs[] = {    -1,
   142,     0,   161,     0,   142,   161,     0,   163,     0,   143,
   163,     0,   164,     0,   144,   164,     0,   169,     0,   145,
   169,     0,   170,     0,   146,   170,     0,   171,     0,   147,
   171,     0,   182,     0,   148,   182,     0,   183,     0,   149,
   183,     0,   184,     0,   150,   184,     0,   185,     0,   151,
   185,     0,   186,     0,   152,   186,     0,   187,     0,   153,
   187,     0,   189,     0,   154,   189,     0,   188,     0,   155,
   188,     0,   191,     0,   156,   191,     0,   192,     0,   157,
   192,     0,   193,     0,   158,   193,     0,   194,     0,   159,
   194,     0,   190,     0,   160,   190,     0,    40,    27,   143,
    28,     0,    66,    27,   144,    28,     0,    74,    27,   156,
    28,     0,   104,   165,    28,     0,   114,   172,    28,     0,
    97,    27,   160,    28,     0,   180,     0,   162,     0,   195,
     0,   198,     0,   201,     0,     0,    41,   208,    39,   208,
     0,    43,   205,     0,    44,   205,     0,    45,   205,     0,
    46,   208,     0,     8,    47,     0,     9,    47,     0,     8,
    48,     0,     9,    48,     0,     8,    49,     0,     9,    49,
     0,    50,   208,     0,    52,   208,     0,    53,   208,     0,
    54,   208,     0,    51,   208,    39,   208,     0,    57,    58,
     0,    57,    58,    59,     0,    57,    60,     0,    57,    61,
     0,    55,   208,     0,    56,   208,     0,    62,   207,     0,
    63,   207,     0,    64,     5,     0,    65,   208,    39,   208,
     0,    42,   205,     0,    67,   205,     0,    68,   205,     0,
    69,   205,     0,    70,   207,     0,    71,   207,     0,    72,
   207,     0,    73,   207,     0,     0,   105,    27,   166,   145,
     0,     0,   106,    27,   167,   146,     0,     0,   107,    27,
   168,   147,     0,    42,   205,     0,   108,   207,     0,   109,
   205,     0,   110,   208,     0,    42,   205,     0,   108,   207,
     0,   109,   205,     0,   110,   208,     0,   111,   205,     0,
   112,   205,     0,    42,   205,     0,   108,   207,     0,   109,
   205,     0,   110,   208,     0,   131,   207,     0,     0,   115,
    27,   173,   149,     0,     0,   117,    27,   174,   151,     0,
     0,   118,    27,   175,   152,     0,     0,   119,    27,   176,
   153,     0,     0,   120,    27,   177,   155,     0,     0,   121,
    27,   178,   154,     0,     0,   116,    27,   179,   150,     0,
     0,   113,    27,   181,   148,    28,     0,   123,   205,     0,
   172,    28,     0,   109,   205,     0,   128,   207,     0,   109,
   205,     0,   122,   207,     0,   124,   205,     0,   125,   205,
     0,   126,   207,     0,     0,   127,   207,     0,    98,     0,
    99,     0,   103,     0,   101,   205,     0,   102,   205,     0,
   100,   206,     0,    75,   208,     0,    76,   207,     0,    77,
   207,     0,    78,   207,     0,    79,   207,     0,    80,   207,
     0,    81,   207,     0,    82,   207,     0,    83,   207,     0,
    84,   208,     0,    85,   205,     0,    94,     5,     0,   130,
   205,     0,   131,   207,     0,   133,   205,     0,   134,   205,
     0,   135,   205,     0,   136,   205,     0,   137,   204,     0,
   138,   204,     0,     0,    93,    27,   196,   157,    28,     0,
     0,    93,     5,    27,   197,   157,    28,     0,     0,   129,
    27,   199,   158,    28,     0,     0,   129,     5,    27,   200,
   158,    28,     0,     0,   132,    27,   202,   159,    28,     0,
     0,   132,     5,    27,   203,   159,    28,     0,    23,   207,
    31,   207,    24,     0,    23,   207,    31,   208,    24,     0,
    23,   208,    31,   207,    24,     0,    23,   208,    31,   208,
    24,     0,    23,   207,    24,     0,    23,   208,    24,     0,
    23,   207,    31,   207,    31,   207,    24,     0,    23,   207,
    31,   207,    31,   208,    24,     0,    23,   207,    31,   208,
    31,   207,    24,     0,    23,   207,    31,   208,    31,   208,
    24,     0,    23,   208,    31,   207,    31,   207,    24,     0,
    23,   208,    31,   207,    31,   208,    24,     0,    23,   208,
    31,   208,    31,   207,    24,     0,    23,   208,    31,   208,
    31,   208,    24,     0,    23,   207,    24,     0,    23,   208,
    24,     0,    23,   207,    31,   207,    31,   207,    31,   207,
    24,     0,    23,   207,    31,   207,    31,   207,    31,   208,
    24,     0,    23,   207,    31,   207,    31,   208,    31,   207,
    24,     0,    23,   207,    31,   207,    31,   208,    31,   208,
    24,     0,    23,   207,    31,   208,    31,   207,    31,   207,
    24,     0,    23,   207,    31,   208,    31,   207,    31,   208,
    24,     0,    23,   207,    31,   208,    31,   208,    31,   207,
    24,     0,    23,   207,    31,   208,    31,   208,    31,   208,
    24,     0,    23,   208,    31,   207,    31,   207,    31,   207,
    24,     0,    23,   208,    31,   207,    31,   207,    31,   208,
    24,     0,    23,   208,    31,   207,    31,   208,    31,   207,
    24,     0,    23,   208,    31,   207,    31,   208,    31,   208,
    24,     0,    23,   208,    31,   208,    31,   207,    31,   207,
    24,     0,    23,   208,    31,   208,    31,   207,    31,   208,
    24,     0,    23,   208,    31,   208,    31,   208,    31,   207,
    24,     0,    23,   208,    31,   208,    31,   208,    31,   208,
    24,     0,    23,   207,    24,     0,    23,   208,    24,     0,
     3,     0,   209,     0,   210,     0,   207,    33,   207,     0,
   207,    34,   207,     0,   207,    36,   207,     0,   207,    35,
   207,     0,   207,    37,   207,     0,    34,   207,     0,    29,
   207,    30,     0,     4,     0,   208,    33,   208,     0,   208,
    34,   208,     0,   208,    36,   208,     0,   208,    35,   208,
     0,   208,    37,   208,     0,    34,   208,     0,    29,   208,
    30,     0,    11,    29,   207,    30,     0,    11,    29,   208,
    30,     0,    10,    29,   207,    30,     0,    10,    29,   208,
    30,     0,    12,    29,   207,    30,     0,    12,    29,   208,
    30,     0,    14,    29,   207,    30,     0,    14,    29,   208,
    30,     0,    13,    29,   207,    30,     0,    13,    29,   208,
    30,     0,    15,    29,   207,    30,     0,    15,    29,   208,
    30,     0,    17,    29,   207,    30,     0,    17,    29,   208,
    30,     0,    18,    29,   207,    30,     0,    18,    29,   208,
    30,     0,    19,    29,   207,    30,     0,    19,    29,   208,
    30,     0,    20,    29,   207,    30,     0,    20,    29,   208,
    30,     0,    21,     0,    22,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   248,   248,   249,   249,   252,   252,   253,   253,   254,   254,
   255,   255,   256,   256,   257,   257,   258,   258,   259,   259,
   260,   260,   261,   261,   262,   262,   263,   263,   264,   264,
   265,   265,   266,   266,   267,   267,   268,   268,   269,   269,
   272,   274,   275,   276,   277,   278,   279,   280,   283,   285,
   286,   289,   290,   291,   292,   293,   294,   295,   296,   297,
   298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
   308,   309,   310,   311,   312,   313,   314,   315,   318,   320,
   321,   322,   323,   324,   325,   326,   329,   336,   336,   342,
   342,   348,   350,   352,   353,   354,   357,   359,   360,   361,
   362,   363,   366,   368,   369,   370,   371,   374,   381,   381,
   387,   387,   393,   393,   399,   399,   405,   405,   411,   411,
   417,   419,   425,   432,   434,   437,   441,   445,   447,   450,
   452,   455,   459,   462,   466,   468,   469,   470,   471,   472,
   475,   477,   478,   479,   480,   481,   482,   483,   484,   485,
   486,   489,   506,   508,   511,   513,   514,   515,   516,   517,
   519,   524,   534,   543,   555,   560,   565,   572,   579,   584,
   589,   596,   603,   605,   606,   607,   608,   609,   612,   614,
   615,   616,   617,   618,   619,   620,   621,   622,   625,   627,
   628,   629,   630,   631,   632,   633,   634,   635,   636,   637,
   638,   639,   640,   641,   642,   643,   645,   647,   648,   649,
   650,   651,   652,   653,   654,   655,   658,   660,   661,   662,
   663,   664,   665,   666,   669,   671,   672,   673,   674,   675,
   676,   677,   678,   679,   680,   681,   682,   683,   684,   685,
   686,   687,   688,   689,   692,   694
};

static const char * const yytname[] = {   "$","error","$undefined.","YY_REAL",
"YY_PARSE_INT","YY_STRING","YY_PARSE_TRUE","YY_PARSE_FALSE","YY_ENABLE","YY_DISABLE",
"YY_MATH_COS","YY_MATH_SIN","YY_MATH_TAN","YY_MATH_ACOS","YY_MATH_ASIN","YY_MATH_ATAN",
"YY_MATH_ATAN2","YY_MATH_LN","YY_MATH_LOG","YY_MATH_EXP","YY_MATH_SQRT","YY_MATH_E",
"YY_MATH_PI","YY_LT","YY_GT","YY_LBOX","YY_RBOX","YY_LCURLY","YY_RCURLY","YY_LPAREN",
"YY_RPAREN","YY_COMMA","YY_EQUAL","YY_PLUS","YY_MINUS","YY_DIV","YY_MUL","YY_CARAT",
"YY_BSLASH","YY_X","YY_S_GLOBAL","YY_SIZE","YY_POS","YY_IMG_BGCOLOR","YY_IMG_FGCOLOR",
"YY_GL_BGCOLOR","YY_GL_SPHERE_SECTIONS","YY_GL_RENDER_LIGHTS","YY_GL_RENDER_BBOX",
"YY_HEADLESS","YY_NUM_THREADS","YY_THREAD_JOB_SIZE","YY_RENDER_HANDLER_SLEEP",
"YY_RENDER_THREAD_SLEEP","YY_RENDER_SPINLOCK_SLEEP","YY_GAUSSIAN_BLUR_MAX","YY_GAUSSIAN_BLUR_SIGMA",
"YY_TRIANGLE_TEST","YY_BARYCENTRIC","YY_PROJECTION","YY_PLUCKER","YY_MOLLER",
"YY_BOX_COST","YY_OBJECT_COST","YY_PFM","YY_ANTI_ALIAS","YY_S_CAMERA","YY_DIR",
"YY_LOOKAT","YY_UP","YY_FOV","YY_ASPECT","YY_MIN_DRAW","YY_MAX_DRAW","YY_S_P0",
"YY_SPIRAL_NUM_SPHERES","YY_SPIRAL_RADIUS","YY_LORENZ_DT","YY_LORENZ_MIN_DISTANCE",
"YY_LORENZ_MAX_DISTANCE","YY_LORENZ_SIGMA","YY_LORENZ_RHO","YY_LORENZ_BETA",
"YY_LORENZ_RADIUS","YY_LORENZ_NUM_SPHERES","YY_LORENZ_START","YY_S_TRIANGLE",
"YY_V1","YY_V2","YY_V3","YY_N1","YY_N2","YY_N3","YY_S_MESH","YY_LOAD","YY_S_INSTANCE",
"YY_GEOMETRY","YY_S_MATRIX","YY_PUSH","YY_POP","YY_ROTATE","YY_TRANSLATE","YY_SCALE",
"YY_SET_IDENTITY","YY_S_LIGHT","YY_S_POINTLIGHT","YY_S_SQUARELIGHT","YY_S_SPHERELIGHT",
"YY_WATTAGE","YY_COLOR","YY_NUM_SAMPLES","YY_P1","YY_P2","YY_S_MULTIMATERIAL",
"YY_S_MATERIAL","YY_S_DIFFUSE","YY_S_INDIRECT_DIFFUSE","YY_S_PHONG","YY_S_STONE",
"YY_S_STONEBUMP","YY_S_REFLECTIVE","YY_S_REFRACTIVE","YY_N","YY_AMBIENT","YY_COLOR_A",
"YY_COLOR_B","YY_AMPLITUDE","YY_IOR","YY_WEIGHT","YY_S_SPHERE","YY_CENTER","YY_RADIUS",
"YY_S_BLPATCH","YY_P00","YY_P01","YY_P10","YY_P11","YY_U_CONSTRAINT","YY_V_CONSTRAINT",
"YY_EQUALS","NEG","input","option_blocks","global_stuff","camera_stuff","pointlight_stuff",
"squarelight_stuff","spherelight_stuff","multimaterial_stuff","diffuse_stuff",
"indirectdiffuse_stuff","phong_stuff","stone_stuff","stonebump_stuff","refractive_stuff",
"reflective_stuff","p0_stuff","mesh_stuff","sphere_stuff","blpatch_stuff","matrix_stuff",
"block","object_type","global_option","camera_option","light_type","@1","@2",
"@3","pointlight_option","squarelight_option","spherelight_option","material_type",
"@4","@5","@6","@7","@8","@9","@10","multimaterial_type","@11","multimaterial_option",
"diffuse_option","indirectdiffuse_option","phong_option","stone_option","stonebump_option",
"reflective_option","refractive_option","matrix_option","p0_option","mesh_option",
"sphere_option","blpatch_option","object_mesh","@12","@13","object_sphere","@14",
"@15","object_blpatch","@16","@17","vector2","vector3","vector4","rExp","iExp",
"fExp","constantExp",""
};
#endif

static const short yyr1[] = {     0,
   141,   141,   142,   142,   143,   143,   144,   144,   145,   145,
   146,   146,   147,   147,   148,   148,   149,   149,   150,   150,
   151,   151,   152,   152,   153,   153,   154,   154,   155,   155,
   156,   156,   157,   157,   158,   158,   159,   159,   160,   160,
   161,   161,   161,   161,   161,   161,   161,   161,   162,   162,
   162,   163,   163,   163,   163,   163,   163,   163,   163,   163,
   163,   163,   163,   163,   163,   163,   163,   163,   163,   163,
   163,   163,   163,   163,   163,   163,   163,   163,   164,   164,
   164,   164,   164,   164,   164,   164,   166,   165,   167,   165,
   168,   165,   169,   169,   169,   169,   170,   170,   170,   170,
   170,   170,   171,   171,   171,   171,   171,   173,   172,   174,
   172,   175,   172,   176,   172,   177,   172,   178,   172,   179,
   172,   181,   180,   182,   182,   183,   184,   185,   185,   186,
   186,   187,   188,   189,   190,   190,   190,   190,   190,   190,
   191,   191,   191,   191,   191,   191,   191,   191,   191,   191,
   191,   192,   193,   193,   194,   194,   194,   194,   194,   194,
   196,   195,   197,   195,   199,   198,   200,   198,   202,   201,
   203,   201,   204,   204,   204,   204,   204,   204,   205,   205,
   205,   205,   205,   205,   205,   205,   205,   205,   206,   206,
   206,   206,   206,   206,   206,   206,   206,   206,   206,   206,
   206,   206,   206,   206,   206,   206,   207,   207,   207,   207,
   207,   207,   207,   207,   207,   207,   208,   208,   208,   208,
   208,   208,   208,   208,   209,   209,   209,   209,   209,   209,
   209,   209,   209,   209,   209,   209,   209,   209,   209,   209,
   209,   209,   209,   209,   210,   210
};

static const short yyr2[] = {     0,
     0,     1,     1,     2,     1,     2,     1,     2,     1,     2,
     1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
     1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
     1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
     4,     4,     4,     3,     3,     4,     1,     1,     1,     1,
     1,     0,     4,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     4,     2,     3,
     2,     2,     2,     2,     2,     2,     2,     4,     2,     2,
     2,     2,     2,     2,     2,     2,     0,     4,     0,     4,
     0,     4,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     0,     4,     0,
     4,     0,     4,     0,     4,     0,     4,     0,     4,     0,
     4,     0,     5,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     0,     2,     1,     1,     1,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     0,     5,     0,     6,     0,     5,     0,     6,     0,     5,
     0,     6,     5,     5,     5,     5,     3,     3,     7,     7,
     7,     7,     7,     7,     7,     7,     3,     3,     9,     9,
     9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
     9,     9,     9,     9,     3,     3,     1,     1,     1,     3,
     3,     3,     3,     3,     2,     3,     1,     3,     3,     3,
     3,     3,     2,     3,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     4,     1,     1
};

static const short yydefact[] = {     1,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     2,     3,    48,    47,    49,    50,    51,    52,     0,     0,
     0,   161,     0,     0,     0,     0,     0,   122,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   165,     0,   169,
     4,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     5,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     7,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    31,   163,     0,   135,   136,     0,
     0,     0,   137,     0,    39,    87,    89,    91,    44,     0,
   108,   120,   110,   112,   114,   116,   118,    45,   167,     0,
   171,     0,    58,    60,    62,    59,    61,    63,   217,     0,
     0,     0,     0,    54,    55,    56,    57,    64,     0,    65,
    66,    67,    73,    74,    69,    71,    72,   207,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   245,   246,
     0,     0,    75,   208,   209,    76,    77,     0,    41,     6,
    79,    80,    81,    82,    83,    84,    85,    86,    42,     8,
   141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
   151,    43,    32,     0,     0,     0,    33,     0,   140,   138,
   139,    46,    40,     0,     0,     0,     0,     0,     0,    15,
     0,     0,     0,     0,     0,   133,     0,     0,     0,     0,
     0,    35,     0,     0,     0,     0,     0,     0,     0,     0,
    37,     0,   223,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    70,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   215,     0,     0,     0,
     0,     0,     0,     0,   152,   162,    34,     0,     0,     0,
     0,     0,     0,    88,     9,     0,     0,     0,     0,     0,
     0,    90,    11,     0,     0,     0,     0,     0,    92,    13,
   124,   123,    16,   125,     0,   109,    17,     0,   121,    19,
     0,     0,   111,    21,     0,     0,   113,    23,     0,   115,
    25,   117,    29,     0,   119,    27,     0,   153,   154,   166,
    36,     0,   155,   156,   157,   158,     0,   159,   160,   170,
    38,   224,   218,   219,   221,   220,   222,    53,   187,     0,
   188,     0,    68,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   216,   210,   211,   213,   212,   214,    78,
   164,   205,     0,   206,     0,    93,    94,    95,    96,    10,
    97,    98,    99,   100,   101,   102,    12,   103,   104,   105,
   106,   107,    14,   126,    18,   127,    20,   128,   129,    22,
   130,   131,    24,   132,    26,    30,   134,    28,   168,   172,
     0,     0,     0,     0,     0,     0,   227,   228,   225,   226,
   229,   230,   233,   234,   231,   232,   235,   236,   237,   238,
   239,   240,   241,   242,   243,   244,     0,     0,     0,     0,
   177,     0,   178,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   173,   174,   175,   176,   179,   180,   181,   182,
   183,   184,   185,   186,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   189,   190,
   191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
   201,   202,   203,   204,     0,     0,     0
};

static const short yydefgoto[] = {   515,
    11,    61,    71,   264,   272,   279,   198,   286,   289,   293,
   297,   300,   305,   302,    84,   186,   211,   220,    94,    12,
    13,    62,    72,    27,   194,   195,   196,   265,   273,   280,
   199,   201,   203,   204,   205,   206,   207,   202,    14,   100,
   200,   287,   290,   294,   298,   301,   303,   306,    95,    85,
   187,   212,   221,    15,    87,   184,    16,   110,   208,    17,
   112,   213,   318,   124,   189,   246,   222,   154,   155
};

static const short yypact[] = {   203,
    -9,    34,    35,    10,    36,   -49,    42,   400,    12,    19,
   203,-32768,-32768,-32768,-32768,-32768,-32768,   358,   168,   385,
    43,-32768,   105,    46,    51,    76,     7,-32768,    86,    87,
   103,   108,   109,   118,   129,    37,   130,-32768,   132,-32768,
-32768,    27,    53,    26,    44,    44,    44,    26,    26,    26,
    26,    26,    26,    26,    26,   -35,   549,   549,   174,    26,
   306,-32768,    44,    44,    44,    44,   549,   549,   549,   549,
   144,-32768,    26,   549,   549,   549,   549,   549,   549,   549,
   549,    26,    44,   429,-32768,-32768,    94,-32768,-32768,   166,
    44,    44,-32768,    40,-32768,-32768,-32768,-32768,-32768,   324,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  -109,
-32768,   976,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    26,
    26,   134,    30,-32768,-32768,-32768,  1082,  1082,   952,  1082,
  1082,  1082,  1082,  1082,   164,-32768,-32768,-32768,   162,   197,
   205,   213,   215,   217,   218,   219,   220,   231,-32768,-32768,
   549,   549,  1087,-32768,-32768,  1087,-32768,   959,-32768,-32768,
-32768,-32768,-32768,-32768,  1087,  1087,  1087,  1087,-32768,-32768,
  1082,  1087,  1087,  1087,  1087,  1087,  1087,  1087,  1087,  1082,
-32768,-32768,-32768,    94,   227,     3,-32768,    30,-32768,-32768,
-32768,-32768,-32768,   -23,    38,    24,    44,     8,   233,-32768,
   158,   140,   -95,   -71,   145,-32768,   143,  -109,    44,   549,
   -26,-32768,   976,    44,    44,    44,    44,   249,   249,   -27,
-32768,   774,   237,    26,    26,    26,    26,    26,    26,    30,
    30,   127,   305,    26,-32768,    30,    30,    30,    30,    30,
    30,    30,    30,    30,    30,   787,   239,   549,   549,   549,
   549,   549,    26,     4,-32768,-32768,-32768,   349,   393,    44,
   549,    44,    26,   -23,-32768,    44,   549,    44,    26,    44,
    44,    38,-32768,    44,   549,    44,    26,   549,    24,-32768,
-32768,-32768,-32768,-32768,    44,   158,-32768,   549,   140,-32768,
    44,   549,   -95,-32768,    44,    44,   -71,-32768,   549,   145,
-32768,-32768,-32768,   549,   143,-32768,   -15,-32768,  1087,-32768,
-32768,   -16,-32768,-32768,-32768,-32768,    30,-32768,-32768,-32768,
-32768,-32768,   117,   117,   237,   237,   237,  1082,-32768,    30,
-32768,    30,  1082,   795,   803,   811,   819,   827,   835,   843,
   851,   859,   867,   875,   883,   891,   899,   907,   915,   923,
   931,   939,   947,-32768,   185,   185,   239,   239,   239,  1082,
-32768,-32768,    30,-32768,    30,-32768,  1087,-32768,  1082,-32768,
-32768,  1087,-32768,  1082,-32768,-32768,-32768,-32768,  1087,-32768,
  1082,  1087,-32768,-32768,-32768,  1087,-32768,-32768,  1087,-32768,
-32768,-32768,-32768,  1087,-32768,-32768,  1087,-32768,-32768,-32768,
   449,   551,   966,   973,   980,   987,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   994,  1001,  1008,  1015,
-32768,    30,-32768,    30,    30,    30,    30,    30,    30,    30,
    30,    30,   141,   194,   464,   507,   556,   570,   575,   589,
   594,   608,   613,   627,  1022,  1029,  1036,  1043,  1050,  1057,
  1064,  1071,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,    30,    30,    30,    30,    30,    30,
    30,    30,   632,   646,   651,   665,   670,   684,   689,   703,
   708,   722,   727,   741,   746,   760,   765,   779,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   278,   279,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,    96,    74,    70,-32768,   273,
-32768,   224,   216,-32768,-32768,-32768,-32768,    29,    18,    15,
   283,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
    97,    11,     9,     6,    13,     1,     2,    -2,   211,   228,
  -158,  -208,  -200,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,    92,   262,-32768,    14,   -44,-32768,-32768
};


#define	YYLAST		1124


static const short yytable[] = {   122,
   320,   310,   311,   127,   128,   129,   130,   131,   132,   133,
   134,   400,   399,   291,    21,   158,    37,    18,   260,   321,
   209,   210,   135,    39,   136,   137,   292,   257,   171,   119,
   256,   361,   138,   119,    99,   282,    22,   180,    38,   139,
   140,   141,   142,   143,   144,    40,   145,   146,   147,   148,
   149,   150,   295,   296,   120,    24,    25,    26,   230,   121,
    19,    20,    23,   231,   108,   274,   123,   192,    28,    86,
   153,   156,    96,   113,   114,   115,   223,    97,   233,   266,
   165,   166,   167,   168,   261,   262,   263,   172,   173,   174,
   175,   176,   177,   178,   179,   257,   185,   185,   311,   116,
   117,   118,    98,   209,   210,   214,   215,   216,   217,   218,
   219,   321,   101,   102,   209,   210,   214,   215,   216,   217,
   218,   219,    29,    30,    31,    32,    33,    34,    35,   103,
   197,   275,   276,   277,   104,   105,   232,    88,    89,    90,
    91,    92,    93,   259,   106,   267,   268,   269,   270,   271,
   329,   226,   227,   228,   278,   107,   109,   330,   111,   248,
   249,   250,   251,   252,   463,   247,   224,   225,   226,   227,
   228,   169,   229,   248,   249,   250,   251,   252,   157,   323,
   324,   325,   326,   327,   328,    63,   223,   185,   188,   333,
   236,   335,   337,   339,   341,   343,   345,   347,   349,   351,
   353,   258,    88,    89,    90,    91,    92,    93,   360,    63,
    64,    65,    66,    67,    68,    69,    70,   464,   369,   250,
   251,   252,   235,   309,   374,   237,   224,   225,   226,   227,
   228,   255,   381,   238,    64,    65,    66,    67,    68,    69,
    70,   239,     1,   240,   247,   241,   242,   243,   244,   334,
   336,   338,   340,   342,   344,   346,   348,   350,   352,   245,
   284,   355,   356,   357,   358,   359,   285,   288,     2,   304,
   299,   317,   402,   228,   367,   252,     3,   516,   517,   254,
   372,   307,   312,    41,   160,   404,   170,   406,   379,   377,
    36,   382,   370,   383,   283,     4,   385,   387,   390,     5,
   395,   386,   398,   396,   193,   389,     6,   125,   126,   393,
   319,   183,   394,    42,    43,     7,     8,   397,   428,     0,
   430,     0,     0,     0,   161,   162,   163,   164,   331,     0,
   401,     9,     0,   159,    10,   332,     0,   224,   225,   226,
   227,   228,     0,   403,   181,   405,    44,     0,    45,    46,
    47,    48,   190,   191,     0,    49,    50,    51,    52,    53,
    54,    55,    56,     0,     0,    42,    43,    57,    58,    59,
    60,     0,   362,     0,     0,     0,   427,     0,   429,   363,
     0,   248,   249,   250,   251,   252,     0,   444,     0,   446,
   448,   450,   452,   454,   456,   458,   460,   462,    44,     0,
    45,    46,    47,    48,     0,     0,     0,    49,    50,    51,
    52,    53,    54,    55,    56,     0,   364,     0,     0,    57,
    58,    59,    60,   365,     0,   224,   225,   226,   227,   228,
   484,   486,   488,   490,   492,   494,   496,   498,    29,    30,
    31,    32,    33,    34,    35,   443,   197,   445,   447,   449,
   451,   453,   455,   457,   459,   461,   182,     0,   281,    73,
    74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
   308,     0,   431,     0,     0,   313,   314,   315,   316,   432,
     0,   248,   249,   250,   251,   252,     0,   465,   483,   485,
   487,   489,   491,   493,   495,   497,   248,   249,   250,   251,
   252,     0,     0,    73,    74,    75,    76,    77,    78,    79,
    80,    81,    82,    83,    29,    30,    31,    32,    33,    34,
    35,   366,     0,   368,     0,     0,     0,   371,     0,   373,
   466,   375,   376,     0,     0,   378,     0,   380,     0,   224,
   225,   226,   227,   228,     0,     0,   384,     0,     0,     0,
     0,   138,   388,     0,     0,     0,   391,   392,   139,   140,
   141,   142,   143,   144,     0,   145,   146,   147,   148,   149,
   150,     0,     0,     0,   433,     0,     0,   151,     0,   467,
     0,   434,   152,   224,   225,   226,   227,   228,   248,   249,
   250,   251,   252,   468,     0,     0,     0,     0,   469,     0,
     0,     0,   224,   225,   226,   227,   228,   248,   249,   250,
   251,   252,   470,     0,     0,     0,     0,   471,     0,     0,
     0,   224,   225,   226,   227,   228,   248,   249,   250,   251,
   252,   472,     0,     0,     0,     0,   473,     0,     0,     0,
   224,   225,   226,   227,   228,   248,   249,   250,   251,   252,
   474,     0,     0,     0,     0,   499,     0,     0,     0,   224,
   225,   226,   227,   228,   248,   249,   250,   251,   252,   500,
     0,     0,     0,     0,   501,     0,     0,     0,   224,   225,
   226,   227,   228,   248,   249,   250,   251,   252,   502,     0,
     0,     0,     0,   503,     0,     0,     0,   224,   225,   226,
   227,   228,   248,   249,   250,   251,   252,   504,     0,     0,
     0,     0,   505,     0,     0,     0,   224,   225,   226,   227,
   228,   248,   249,   250,   251,   252,   506,     0,     0,     0,
     0,   507,     0,     0,     0,   224,   225,   226,   227,   228,
   248,   249,   250,   251,   252,   508,     0,     0,     0,     0,
   509,     0,     0,     0,   224,   225,   226,   227,   228,   248,
   249,   250,   251,   252,   510,     0,     0,     0,     0,   511,
     0,     0,     0,   224,   225,   226,   227,   228,   248,   249,
   250,   251,   252,   512,     0,     0,     0,     0,   513,     0,
     0,     0,   224,   225,   226,   227,   228,   248,   249,   250,
   251,   252,   514,   322,     0,     0,   224,   225,   226,   227,
   228,   224,   225,   226,   227,   228,   354,     0,     0,   248,
   249,   250,   251,   252,   407,     0,     0,   248,   249,   250,
   251,   252,   408,     0,     0,   224,   225,   226,   227,   228,
   409,     0,     0,   248,   249,   250,   251,   252,   410,     0,
     0,   224,   225,   226,   227,   228,   411,     0,     0,   248,
   249,   250,   251,   252,   412,     0,     0,   224,   225,   226,
   227,   228,   413,     0,     0,   248,   249,   250,   251,   252,
   414,     0,     0,   224,   225,   226,   227,   228,   415,     0,
     0,   248,   249,   250,   251,   252,   416,     0,     0,   224,
   225,   226,   227,   228,   417,     0,     0,   248,   249,   250,
   251,   252,   418,     0,     0,   224,   225,   226,   227,   228,
   419,     0,     0,   248,   249,   250,   251,   252,   420,     0,
     0,   224,   225,   226,   227,   228,   421,     0,     0,   248,
   249,   250,   251,   252,   422,     0,     0,   224,   225,   226,
   227,   228,   423,     0,     0,   248,   249,   250,   251,   252,
   424,     0,     0,   224,   225,   226,   227,   228,   425,     0,
     0,   248,   249,   250,   251,   252,   426,     0,     0,   224,
   225,   226,   227,   228,   224,   225,   226,   227,   228,     0,
   234,   224,   225,   226,   227,   228,   435,   253,   248,   249,
   250,   251,   252,   436,     0,   224,   225,   226,   227,   228,
   437,     0,   248,   249,   250,   251,   252,   438,     0,   224,
   225,   226,   227,   228,   439,     0,   248,   249,   250,   251,
   252,   440,     0,   224,   225,   226,   227,   228,   441,     0,
   248,   249,   250,   251,   252,   442,     0,   224,   225,   226,
   227,   228,   475,     0,   248,   249,   250,   251,   252,   476,
     0,   224,   225,   226,   227,   228,   477,     0,   248,   249,
   250,   251,   252,   478,     0,   224,   225,   226,   227,   228,
   479,     0,   248,   249,   250,   251,   252,   480,     0,   224,
   225,   226,   227,   228,   481,     0,   248,   249,   250,   251,
   252,   482,     0,   224,   225,   226,   227,   228,   214,   215,
   216,   217,   218,   219,   224,   225,   226,   227,   228,   248,
   249,   250,   251,   252
};

static const short yycheck[] = {    44,
    28,    28,   211,    48,    49,    50,    51,    52,    53,    54,
    55,    28,    28,   109,     5,    60,     5,    27,    42,   220,
   130,   131,    58,     5,    60,    61,   122,   186,    73,     4,
    28,    28,     3,     4,    28,    28,    27,    82,    27,    10,
    11,    12,    13,    14,    15,    27,    17,    18,    19,    20,
    21,    22,   124,   125,    29,   105,   106,   107,    29,    34,
    27,    27,    27,    34,    28,    42,    23,    28,    27,    27,
    57,    58,    27,    47,    48,    49,   121,    27,   123,    42,
    67,    68,    69,    70,   108,   109,   110,    74,    75,    76,
    77,    78,    79,    80,    81,   254,    94,    94,   307,    47,
    48,    49,    27,   130,   131,   133,   134,   135,   136,   137,
   138,   312,    27,    27,   130,   131,   133,   134,   135,   136,
   137,   138,   115,   116,   117,   118,   119,   120,   121,    27,
   123,   108,   109,   110,    27,    27,   123,    98,    99,   100,
   101,   102,   103,   188,    27,   108,   109,   110,   111,   112,
    24,    35,    36,    37,   131,    27,    27,    31,    27,    33,
    34,    35,    36,    37,    24,   152,    33,    34,    35,    36,
    37,    28,    39,    33,    34,    35,    36,    37,     5,   224,
   225,   226,   227,   228,   229,    42,   231,    94,    23,   234,
    29,   236,   237,   238,   239,   240,   241,   242,   243,   244,
   245,   188,    98,    99,   100,   101,   102,   103,   253,    42,
    67,    68,    69,    70,    71,    72,    73,    24,   263,    35,
    36,    37,    59,   210,   269,    29,    33,    34,    35,    36,
    37,     5,   277,    29,    67,    68,    69,    70,    71,    72,
    73,    29,    40,    29,   231,    29,    29,    29,    29,   236,
   237,   238,   239,   240,   241,   242,   243,   244,   245,    29,
    28,   248,   249,   250,   251,   252,   109,   128,    66,   127,
   126,    23,   317,    37,   261,    37,    74,     0,     0,   184,
   267,   208,   213,    11,    61,   330,    71,   332,   275,   272,
     8,   278,   264,   279,   198,    93,   286,   289,   293,    97,
   300,   288,   305,   302,    94,   292,   104,    46,    47,   297,
   219,    84,   299,     8,     9,   113,   114,   304,   363,    -1,
   365,    -1,    -1,    -1,    63,    64,    65,    66,    24,    -1,
   317,   129,    -1,    28,   132,    31,    -1,    33,    34,    35,
    36,    37,    -1,   330,    83,   332,    41,    -1,    43,    44,
    45,    46,    91,    92,    -1,    50,    51,    52,    53,    54,
    55,    56,    57,    -1,    -1,     8,     9,    62,    63,    64,
    65,    -1,    24,    -1,    -1,    -1,   363,    -1,   365,    31,
    -1,    33,    34,    35,    36,    37,    -1,   432,    -1,   434,
   435,   436,   437,   438,   439,   440,   441,   442,    41,    -1,
    43,    44,    45,    46,    -1,    -1,    -1,    50,    51,    52,
    53,    54,    55,    56,    57,    -1,    24,    -1,    -1,    62,
    63,    64,    65,    31,    -1,    33,    34,    35,    36,    37,
   475,   476,   477,   478,   479,   480,   481,   482,   115,   116,
   117,   118,   119,   120,   121,   432,   123,   434,   435,   436,
   437,   438,   439,   440,   441,   442,    28,    -1,   197,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
   209,    -1,    24,    -1,    -1,   214,   215,   216,   217,    31,
    -1,    33,    34,    35,    36,    37,    -1,    24,   475,   476,
   477,   478,   479,   480,   481,   482,    33,    34,    35,    36,
    37,    -1,    -1,    75,    76,    77,    78,    79,    80,    81,
    82,    83,    84,    85,   115,   116,   117,   118,   119,   120,
   121,   260,    -1,   262,    -1,    -1,    -1,   266,    -1,   268,
    24,   270,   271,    -1,    -1,   274,    -1,   276,    -1,    33,
    34,    35,    36,    37,    -1,    -1,   285,    -1,    -1,    -1,
    -1,     3,   291,    -1,    -1,    -1,   295,   296,    10,    11,
    12,    13,    14,    15,    -1,    17,    18,    19,    20,    21,
    22,    -1,    -1,    -1,    24,    -1,    -1,    29,    -1,    24,
    -1,    31,    34,    33,    34,    35,    36,    37,    33,    34,
    35,    36,    37,    24,    -1,    -1,    -1,    -1,    24,    -1,
    -1,    -1,    33,    34,    35,    36,    37,    33,    34,    35,
    36,    37,    24,    -1,    -1,    -1,    -1,    24,    -1,    -1,
    -1,    33,    34,    35,    36,    37,    33,    34,    35,    36,
    37,    24,    -1,    -1,    -1,    -1,    24,    -1,    -1,    -1,
    33,    34,    35,    36,    37,    33,    34,    35,    36,    37,
    24,    -1,    -1,    -1,    -1,    24,    -1,    -1,    -1,    33,
    34,    35,    36,    37,    33,    34,    35,    36,    37,    24,
    -1,    -1,    -1,    -1,    24,    -1,    -1,    -1,    33,    34,
    35,    36,    37,    33,    34,    35,    36,    37,    24,    -1,
    -1,    -1,    -1,    24,    -1,    -1,    -1,    33,    34,    35,
    36,    37,    33,    34,    35,    36,    37,    24,    -1,    -1,
    -1,    -1,    24,    -1,    -1,    -1,    33,    34,    35,    36,
    37,    33,    34,    35,    36,    37,    24,    -1,    -1,    -1,
    -1,    24,    -1,    -1,    -1,    33,    34,    35,    36,    37,
    33,    34,    35,    36,    37,    24,    -1,    -1,    -1,    -1,
    24,    -1,    -1,    -1,    33,    34,    35,    36,    37,    33,
    34,    35,    36,    37,    24,    -1,    -1,    -1,    -1,    24,
    -1,    -1,    -1,    33,    34,    35,    36,    37,    33,    34,
    35,    36,    37,    24,    -1,    -1,    -1,    -1,    24,    -1,
    -1,    -1,    33,    34,    35,    36,    37,    33,    34,    35,
    36,    37,    24,    30,    -1,    -1,    33,    34,    35,    36,
    37,    33,    34,    35,    36,    37,    30,    -1,    -1,    33,
    34,    35,    36,    37,    30,    -1,    -1,    33,    34,    35,
    36,    37,    30,    -1,    -1,    33,    34,    35,    36,    37,
    30,    -1,    -1,    33,    34,    35,    36,    37,    30,    -1,
    -1,    33,    34,    35,    36,    37,    30,    -1,    -1,    33,
    34,    35,    36,    37,    30,    -1,    -1,    33,    34,    35,
    36,    37,    30,    -1,    -1,    33,    34,    35,    36,    37,
    30,    -1,    -1,    33,    34,    35,    36,    37,    30,    -1,
    -1,    33,    34,    35,    36,    37,    30,    -1,    -1,    33,
    34,    35,    36,    37,    30,    -1,    -1,    33,    34,    35,
    36,    37,    30,    -1,    -1,    33,    34,    35,    36,    37,
    30,    -1,    -1,    33,    34,    35,    36,    37,    30,    -1,
    -1,    33,    34,    35,    36,    37,    30,    -1,    -1,    33,
    34,    35,    36,    37,    30,    -1,    -1,    33,    34,    35,
    36,    37,    30,    -1,    -1,    33,    34,    35,    36,    37,
    30,    -1,    -1,    33,    34,    35,    36,    37,    30,    -1,
    -1,    33,    34,    35,    36,    37,    30,    -1,    -1,    33,
    34,    35,    36,    37,    33,    34,    35,    36,    37,    -1,
    39,    33,    34,    35,    36,    37,    31,    39,    33,    34,
    35,    36,    37,    31,    -1,    33,    34,    35,    36,    37,
    31,    -1,    33,    34,    35,    36,    37,    31,    -1,    33,
    34,    35,    36,    37,    31,    -1,    33,    34,    35,    36,
    37,    31,    -1,    33,    34,    35,    36,    37,    31,    -1,
    33,    34,    35,    36,    37,    31,    -1,    33,    34,    35,
    36,    37,    31,    -1,    33,    34,    35,    36,    37,    31,
    -1,    33,    34,    35,    36,    37,    31,    -1,    33,    34,
    35,    36,    37,    31,    -1,    33,    34,    35,    36,    37,
    31,    -1,    33,    34,    35,    36,    37,    31,    -1,    33,
    34,    35,    36,    37,    31,    -1,    33,    34,    35,    36,
    37,    31,    -1,    33,    34,    35,    36,    37,   133,   134,
   135,   136,   137,   138,    33,    34,    35,    36,    37,    33,
    34,    35,    36,    37
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 192 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

int
yyparse(YYPARSE_PARAM)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 41:
#line 273 "parser.y"
{ ;
    break;}
case 42:
#line 274 "parser.y"
{ ;
    break;}
case 43:
#line 275 "parser.y"
{ ;
    break;}
case 44:
#line 276 "parser.y"
{ ;
    break;}
case 45:
#line 277 "parser.y"
{ ;
    break;}
case 46:
#line 278 "parser.y"
{ ;
    break;}
case 47:
#line 279 "parser.y"
{ ;
    break;}
case 48:
#line 280 "parser.y"
{ ;
    break;}
case 53:
#line 290 "parser.y"
{ g_image->Resize( rawray::options::global::win_width = yyvsp[-2].integer, rawray::options::global::win_height = yyvsp[0].integer ); ;
    break;}
case 54:
#line 291 "parser.y"
{ rawray::options::global::img_bg_color = math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ); ;
    break;}
case 55:
#line 292 "parser.y"
{ rawray::options::global::img_fg_color = math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ); ;
    break;}
case 56:
#line 293 "parser.y"
{ rawray::options::global::gl_bg_color = math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ); g_scene->GetBackground().SetBGColor(rawray::options::global::gl_bg_color); ;
    break;}
case 57:
#line 294 "parser.y"
{ rawray::options::global::gl_sphere_sections = yyvsp[0].integer; ;
    break;}
case 58:
#line 295 "parser.y"
{ rawray::options::global::gl_render_lights = true; ;
    break;}
case 59:
#line 296 "parser.y"
{ rawray::options::global::gl_render_lights = false; ;
    break;}
case 60:
#line 297 "parser.y"
{ rawray::options::global::gl_render_bbox = true; ;
    break;}
case 61:
#line 298 "parser.y"
{ rawray::options::global::gl_render_bbox = false; ;
    break;}
case 62:
#line 299 "parser.y"
{ rawray::options::global::headless = true; ;
    break;}
case 63:
#line 300 "parser.y"
{ rawray::options::global::headless = false; ;
    break;}
case 64:
#line 301 "parser.y"
{ rawray::options::global::num_threads = yyvsp[0].integer; ;
    break;}
case 65:
#line 302 "parser.y"
{ rawray::options::global::render_handler_sleep = yyvsp[0].integer; ;
    break;}
case 66:
#line 303 "parser.y"
{ rawray::options::global::render_thread_sleep = yyvsp[0].integer; ;
    break;}
case 67:
#line 304 "parser.y"
{ rawray::options::global::render_spinlock_sleep = yyvsp[0].integer; ;
    break;}
case 68:
#line 305 "parser.y"
{ rawray::options::global::thread_job_size_x = yyvsp[-2].integer; rawray::options::global::thread_job_size_y = yyvsp[0].integer; ;
    break;}
case 69:
#line 306 "parser.y"
{ rawray::options::global::triangle_intersection_algorithm = rawray::options::BARYCENTRIC; ;
    break;}
case 70:
#line 307 "parser.y"
{ rawray::options::global::triangle_intersection_algorithm = rawray::options::BARYCENTRIC_PROJECTION; ;
    break;}
case 71:
#line 308 "parser.y"
{ rawray::options::global::triangle_intersection_algorithm = rawray::options::PLUCKER; ;
    break;}
case 72:
#line 309 "parser.y"
{ rawray::options::global::triangle_intersection_algorithm = rawray::options::MOLLER; ;
    break;}
case 73:
#line 310 "parser.y"
{ rawray::options::global::gaussian_blur_max = yyvsp[0].integer; ;
    break;}
case 74:
#line 311 "parser.y"
{ rawray::options::global::gaussian_blur_sigma = yyvsp[0].integer; ;
    break;}
case 75:
#line 312 "parser.y"
{ rawray::options::global::bvh_box_cost = yyvsp[0].real; ;
    break;}
case 76:
#line 313 "parser.y"
{ rawray::options::global::bvh_obj_cost = yyvsp[0].real; ;
    break;}
case 77:
#line 314 "parser.y"
{ yyvsp[0].str[strlen(yyvsp[0].str)-1] = 0; g_scene->GetBackground().LoadPFM( yyvsp[0].str+1 ); ;
    break;}
case 78:
#line 315 "parser.y"
{ rawray::options::global::aax = yyvsp[-2].integer; rawray::options::global::aay = yyvsp[0].integer; ;
    break;}
case 79:
#line 319 "parser.y"
{ g_camera->SetEye(		rawray::options::camera::eye = math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 80:
#line 320 "parser.y"
{ g_camera->SetViewDir( rawray::options::camera::view = math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 81:
#line 321 "parser.y"
{ g_camera->SetLookAt(	rawray::options::camera::lookat = math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 82:
#line 322 "parser.y"
{ g_camera->SetUp(		rawray::options::camera::up = math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 83:
#line 323 "parser.y"
{ g_camera->SetFOV(		rawray::options::camera::fov = yyvsp[0].real ); ;
    break;}
case 84:
#line 324 "parser.y"
{ g_camera->SetAspect(	rawray::options::camera::aspect = yyvsp[0].real ); ;
    break;}
case 85:
#line 325 "parser.y"
{ g_camera->SetMinDraw( rawray::options::camera::min_draw = yyvsp[0].real ); ;
    break;}
case 86:
#line 326 "parser.y"
{ g_camera->SetMinDraw( rawray::options::camera::max_draw = yyvsp[0].real ); ;
    break;}
case 87:
#line 331 "parser.y"
{
				g_light = new rawray::PointLight();
				g_scene->AddLight( g_light );
			;
    break;}
case 89:
#line 337 "parser.y"
{
				g_light = new rawray::SquareLight();
				g_scene->AddLight( g_light );
			;
    break;}
case 91:
#line 343 "parser.y"
{
				g_light = new rawray::SphereLight();
				g_scene->AddLight( g_light );
			;
    break;}
case 93:
#line 351 "parser.y"
{ g_light->SetPosition( math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 94:
#line 352 "parser.y"
{ g_light->SetWattage( yyvsp[0].real ); ;
    break;}
case 95:
#line 353 "parser.y"
{ g_light->SetColor( math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 96:
#line 354 "parser.y"
{ g_light->SetNumSamples( yyvsp[0].integer ); ;
    break;}
case 97:
#line 358 "parser.y"
{ g_light->SetPosition( math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 98:
#line 359 "parser.y"
{ g_light->SetWattage( yyvsp[0].real ); ;
    break;}
case 99:
#line 360 "parser.y"
{ g_light->SetColor( math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 100:
#line 361 "parser.y"
{ g_light->SetNumSamples( yyvsp[0].integer ); ;
    break;}
case 101:
#line 362 "parser.y"
{ ((rawray::SquareLight*)g_light)->SetP1( math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 102:
#line 363 "parser.y"
{ ((rawray::SquareLight*)g_light)->SetP2( math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 103:
#line 367 "parser.y"
{ g_light->SetPosition( math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 104:
#line 368 "parser.y"
{ g_light->SetWattage( yyvsp[0].real ); ;
    break;}
case 105:
#line 369 "parser.y"
{ g_light->SetColor( math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 106:
#line 370 "parser.y"
{ g_light->SetNumSamples( yyvsp[0].integer ); ;
    break;}
case 107:
#line 371 "parser.y"
{ ((rawray::SphereLight*)g_light)->SetRadius( yyvsp[0].real ); ;
    break;}
case 108:
#line 376 "parser.y"
{
				g_material = new rawray::Diffuse();
				AddMaterial( g_material );
			;
    break;}
case 110:
#line 382 "parser.y"
{
				g_material = new rawray::Phong();
				AddMaterial( g_material );
			;
    break;}
case 112:
#line 388 "parser.y"
{
				g_material = new rawray::Stone();
				AddMaterial( g_material );
			;
    break;}
case 114:
#line 394 "parser.y"
{
				g_material = new rawray::StoneBump();
				AddMaterial( g_material );
			;
    break;}
case 116:
#line 400 "parser.y"
{
				g_material = new rawray::Reflective();
				AddMaterial( g_material );
			;
    break;}
case 118:
#line 406 "parser.y"
{
				g_material = new rawray::Refractive();
				AddMaterial( g_material );
			;
    break;}
case 120:
#line 412 "parser.y"
{
				g_material = new rawray::IndirectDiffuse();
				AddMaterial( g_material );
			;
    break;}
case 122:
#line 421 "parser.y"
{
				g_multimaterial = new rawray::MultiMaterial();
				g_scene->AddMaterial( g_multimaterial );
			;
    break;}
case 123:
#line 426 "parser.y"
{
				g_material = g_multimaterial;
				g_multimaterial = NULL;
			;
    break;}
case 124:
#line 433 "parser.y"
{ g_multimaterial->SetAmbient( math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 125:
#line 434 "parser.y"
{ ;
    break;}
case 126:
#line 438 "parser.y"
{ ((rawray::Diffuse*)g_material)->SetColor( math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 127:
#line 442 "parser.y"
{ ((rawray::IndirectDiffuse*)g_material)->SetWeight( yyvsp[0].real ); ;
    break;}
case 128:
#line 446 "parser.y"
{ ((rawray::Phong*)g_material)->SetColor( math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 129:
#line 447 "parser.y"
{ ((rawray::Phong*)g_material)->SetN( yyvsp[0].real ); ;
    break;}
case 130:
#line 451 "parser.y"
{ ((rawray::Stone*)g_material)->SetColorA( math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 131:
#line 452 "parser.y"
{ ((rawray::Stone*)g_material)->SetColorB( math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 132:
#line 456 "parser.y"
{ ((rawray::StoneBump*)g_material)->SetAmplitude( yyvsp[0].real ); ;
    break;}
case 134:
#line 463 "parser.y"
{ ((rawray::Refractive*)g_material)->SetIOR( yyvsp[0].real ); ;
    break;}
case 135:
#line 467 "parser.y"
{ if( g_matrixStack.size() > 0 ) g_matrixStack.push( g_matrixStack.top() ); else g_matrixStack.push( math::Matrix4x4() ); ;
    break;}
case 136:
#line 468 "parser.y"
{ if( g_matrixStack.size() > 0 )g_matrixStack.pop(); else printf( "ERROR: Popping empty stack" ); ;
    break;}
case 137:
#line 469 "parser.y"
{ g_matrixStack.top().SetIdentity(); ;
    break;}
case 138:
#line 470 "parser.y"
{ g_matrixStack.top().Translate( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ); ;
    break;}
case 139:
#line 471 "parser.y"
{ g_matrixStack.top().Scale( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ); ;
    break;}
case 140:
#line 472 "parser.y"
{ g_matrixStack.top().Rotate( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2], yyvsp[0].vec[3] ); ;
    break;}
case 141:
#line 476 "parser.y"
{ rawray::options::p0::spiral_num_spheres = yyvsp[0].integer; ;
    break;}
case 142:
#line 477 "parser.y"
{ rawray::options::p0::spiral_radius = yyvsp[0].real; ;
    break;}
case 143:
#line 478 "parser.y"
{ rawray::options::p0::lorenz_dt = yyvsp[0].real; ;
    break;}
case 144:
#line 479 "parser.y"
{ rawray::options::p0::lorenz_min_distance = yyvsp[0].real; ;
    break;}
case 145:
#line 480 "parser.y"
{ rawray::options::p0::lorenz_max_distance = yyvsp[0].real; ;
    break;}
case 146:
#line 481 "parser.y"
{ rawray::options::p0::lorenz_sigma = yyvsp[0].real; ;
    break;}
case 147:
#line 482 "parser.y"
{ rawray::options::p0::lorenz_rho = yyvsp[0].real; ;
    break;}
case 148:
#line 483 "parser.y"
{ rawray::options::p0::lorenz_beta = yyvsp[0].real; ;
    break;}
case 149:
#line 484 "parser.y"
{ rawray::options::p0::lorenz_radius = yyvsp[0].real; ;
    break;}
case 150:
#line 485 "parser.y"
{ rawray::options::p0::lorenz_num_spheres = yyvsp[0].integer; ;
    break;}
case 151:
#line 486 "parser.y"
{ rawray::options::p0::lorenz_start = math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ); ;
    break;}
case 152:
#line 491 "parser.y"
{
				yyvsp[0].str[strlen(yyvsp[0].str)-1] = 0;
				printf( "Loading Mesh: '%s'\n", yyvsp[0].str+1 );
				
				if( g_matrixStack.size() == 0 )
					g_mesh->LoadOBJ( yyvsp[0].str+1 );
				else
					g_mesh->LoadOBJ( yyvsp[0].str+1, g_matrixStack.top() );
					
				printf( "Found %d triangles in mesh\n", g_mesh->GetNumTriangles() );
				
				delete yyvsp[0].str;
			;
    break;}
case 153:
#line 507 "parser.y"
{ ((rawray::Sphere*)g_obj)->SetCenter( math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 154:
#line 508 "parser.y"
{ ((rawray::Sphere*)g_obj)->SetRadius( yyvsp[0].real ); ;
    break;}
case 155:
#line 512 "parser.y"
{ ((rawray::BLPatch*)g_obj)->SetP00( math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 156:
#line 513 "parser.y"
{ ((rawray::BLPatch*)g_obj)->SetP01( math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 157:
#line 514 "parser.y"
{ ((rawray::BLPatch*)g_obj)->SetP10( math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 158:
#line 515 "parser.y"
{ ((rawray::BLPatch*)g_obj)->SetP11( math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 159:
#line 516 "parser.y"
{ ((rawray::BLPatch*)g_obj)->SetUConstraint( yyvsp[0].vec[0], yyvsp[0].vec[1] ); ;
    break;}
case 160:
#line 517 "parser.y"
{ ((rawray::BLPatch*)g_obj)->SetVConstraint( yyvsp[0].vec[0], yyvsp[0].vec[1] ); ;
    break;}
case 161:
#line 521 "parser.y"
{
				g_mesh = new rawray::TriangleMesh();
			;
    break;}
case 162:
#line 525 "parser.y"
{
				if( g_mesh->GetNumTriangles() > 0 ) {
					g_scene->AddMesh( g_mesh );
					rawray::AddTrianglesOfMesh();
				} else {
					delete g_mesh;
					g_mesh = NULL;
				}
			;
    break;}
case 163:
#line 535 "parser.y"
{
				g_mesh = new rawray::TriangleMesh();
				
				// TODO: implement
				//g_objectMap[$2] = g_obj;
				
				delete yyvsp[-1].str;
			;
    break;}
case 164:
#line 544 "parser.y"
{
				if( g_mesh->GetNumTriangles() > 0 ) {
					g_scene->AddMesh( g_mesh );
					rawray::AddTrianglesOfMesh();
				} else {
					delete g_mesh;
					g_mesh = NULL;
				}
			;
    break;}
case 165:
#line 557 "parser.y"
{
				g_obj = new rawray::Sphere( math::Vector3(0), 1.0f, g_material );
			;
    break;}
case 166:
#line 561 "parser.y"
{
				g_scene->AddObject( g_obj );
				g_obj = NULL;
			;
    break;}
case 167:
#line 566 "parser.y"
{
				g_obj = new rawray::Sphere( math::Vector3(0), 1.0f, g_material );
				g_objectMap[yyvsp[-1].str] = g_obj;
				
				delete yyvsp[-1].str;
			;
    break;}
case 168:
#line 573 "parser.y"
{
				g_scene->AddObject( g_obj );
				g_obj = NULL;
			;
    break;}
case 169:
#line 581 "parser.y"
{
				g_obj = new rawray::BLPatch( g_material );
			;
    break;}
case 170:
#line 585 "parser.y"
{
				g_scene->AddObject( g_obj );
				g_obj = NULL;
			;
    break;}
case 171:
#line 590 "parser.y"
{
				g_obj = new rawray::BLPatch( g_material );
				g_objectMap[yyvsp[-1].str] = g_obj;
				
				delete yyvsp[-1].str;
			;
    break;}
case 172:
#line 597 "parser.y"
{
				g_scene->AddObject( g_obj );
				g_obj = NULL;
			;
    break;}
case 173:
#line 604 "parser.y"
{ yyval.vec[0] = yyvsp[-3].real; yyval.vec[1] = yyvsp[-1].real; ;
    break;}
case 174:
#line 605 "parser.y"
{ yyval.vec[0] = yyvsp[-3].real; yyval.vec[1] = yyvsp[-1].integer; ;
    break;}
case 175:
#line 606 "parser.y"
{ yyval.vec[0] = yyvsp[-3].integer; yyval.vec[1] = yyvsp[-1].real; ;
    break;}
case 176:
#line 607 "parser.y"
{ yyval.vec[0] = yyvsp[-3].integer; yyval.vec[1] = yyvsp[-1].integer; ;
    break;}
case 177:
#line 608 "parser.y"
{ yyval.vec[0] = yyvsp[-1].real; yyval.vec[1] = yyvsp[-1].real; ;
    break;}
case 178:
#line 609 "parser.y"
{ yyval.vec[0] = yyvsp[-1].integer; yyval.vec[1] = yyvsp[-1].integer; ;
    break;}
case 179:
#line 613 "parser.y"
{ yyval.vec[0] = yyvsp[-5].real; yyval.vec[1] = yyvsp[-3].real; yyval.vec[2] = yyvsp[-1].real; ;
    break;}
case 180:
#line 614 "parser.y"
{ yyval.vec[0] = yyvsp[-5].real; yyval.vec[1] = yyvsp[-3].real; yyval.vec[2] = yyvsp[-1].integer; ;
    break;}
case 181:
#line 615 "parser.y"
{ yyval.vec[0] = yyvsp[-5].real; yyval.vec[1] = yyvsp[-3].integer; yyval.vec[2] = yyvsp[-1].real; ;
    break;}
case 182:
#line 616 "parser.y"
{ yyval.vec[0] = yyvsp[-5].real; yyval.vec[1] = yyvsp[-3].integer; yyval.vec[2] = yyvsp[-1].integer; ;
    break;}
case 183:
#line 617 "parser.y"
{ yyval.vec[0] = yyvsp[-5].integer; yyval.vec[1] = yyvsp[-3].real; yyval.vec[2] = yyvsp[-1].real; ;
    break;}
case 184:
#line 618 "parser.y"
{ yyval.vec[0] = yyvsp[-5].integer; yyval.vec[1] = yyvsp[-3].real; yyval.vec[2] = yyvsp[-1].integer; ;
    break;}
case 185:
#line 619 "parser.y"
{ yyval.vec[0] = yyvsp[-5].integer; yyval.vec[1] = yyvsp[-3].integer; yyval.vec[2] = yyvsp[-1].real; ;
    break;}
case 186:
#line 620 "parser.y"
{ yyval.vec[0] = yyvsp[-5].integer; yyval.vec[1] = yyvsp[-3].integer; yyval.vec[2] = yyvsp[-1].integer; ;
    break;}
case 187:
#line 621 "parser.y"
{ yyval.vec[0] = yyvsp[-1].real; yyval.vec[1] = yyvsp[-1].real; yyval.vec[2] = yyvsp[-1].real; ;
    break;}
case 188:
#line 622 "parser.y"
{ yyval.vec[0] = yyvsp[-1].integer; yyval.vec[1] = yyvsp[-1].integer; yyval.vec[2] = yyvsp[-1].integer; ;
    break;}
case 189:
#line 626 "parser.y"
{ yyval.vec[0] = yyvsp[-7].real; yyval.vec[1] = yyvsp[-5].real; yyval.vec[2] = yyvsp[-3].real; yyval.vec[3] = yyvsp[-1].real; ;
    break;}
case 190:
#line 627 "parser.y"
{ yyval.vec[0] = yyvsp[-7].real; yyval.vec[1] = yyvsp[-5].real; yyval.vec[2] = yyvsp[-3].real; yyval.vec[3] = yyvsp[-1].integer; ;
    break;}
case 191:
#line 628 "parser.y"
{ yyval.vec[0] = yyvsp[-7].real; yyval.vec[1] = yyvsp[-5].real; yyval.vec[2] = yyvsp[-3].integer; yyval.vec[3] = yyvsp[-1].real; ;
    break;}
case 192:
#line 629 "parser.y"
{ yyval.vec[0] = yyvsp[-7].real; yyval.vec[1] = yyvsp[-5].real; yyval.vec[2] = yyvsp[-3].integer; yyval.vec[3] = yyvsp[-1].integer; ;
    break;}
case 193:
#line 630 "parser.y"
{ yyval.vec[0] = yyvsp[-7].real; yyval.vec[1] = yyvsp[-5].integer; yyval.vec[2] = yyvsp[-3].real; yyval.vec[3] = yyvsp[-1].real; ;
    break;}
case 194:
#line 631 "parser.y"
{ yyval.vec[0] = yyvsp[-7].real; yyval.vec[1] = yyvsp[-5].integer; yyval.vec[2] = yyvsp[-3].real; yyval.vec[3] = yyvsp[-1].integer; ;
    break;}
case 195:
#line 632 "parser.y"
{ yyval.vec[0] = yyvsp[-7].real; yyval.vec[1] = yyvsp[-5].integer; yyval.vec[2] = yyvsp[-3].integer; yyval.vec[3] = yyvsp[-1].real; ;
    break;}
case 196:
#line 633 "parser.y"
{ yyval.vec[0] = yyvsp[-7].real; yyval.vec[1] = yyvsp[-5].integer; yyval.vec[2] = yyvsp[-3].integer; yyval.vec[3] = yyvsp[-1].integer; ;
    break;}
case 197:
#line 634 "parser.y"
{ yyval.vec[0] = yyvsp[-7].integer; yyval.vec[1] = yyvsp[-5].real; yyval.vec[2] = yyvsp[-3].real; yyval.vec[3] = yyvsp[-1].real; ;
    break;}
case 198:
#line 635 "parser.y"
{ yyval.vec[0] = yyvsp[-7].integer; yyval.vec[1] = yyvsp[-5].real; yyval.vec[2] = yyvsp[-3].real; yyval.vec[3] = yyvsp[-1].integer; ;
    break;}
case 199:
#line 636 "parser.y"
{ yyval.vec[0] = yyvsp[-7].integer; yyval.vec[1] = yyvsp[-5].real; yyval.vec[2] = yyvsp[-3].integer; yyval.vec[3] = yyvsp[-1].real; ;
    break;}
case 200:
#line 637 "parser.y"
{ yyval.vec[0] = yyvsp[-7].integer; yyval.vec[1] = yyvsp[-5].real; yyval.vec[2] = yyvsp[-3].integer; yyval.vec[3] = yyvsp[-1].integer; ;
    break;}
case 201:
#line 638 "parser.y"
{ yyval.vec[0] = yyvsp[-7].integer; yyval.vec[1] = yyvsp[-5].integer; yyval.vec[2] = yyvsp[-3].real; yyval.vec[3] = yyvsp[-1].real; ;
    break;}
case 202:
#line 639 "parser.y"
{ yyval.vec[0] = yyvsp[-7].integer; yyval.vec[1] = yyvsp[-5].integer; yyval.vec[2] = yyvsp[-3].real; yyval.vec[3] = yyvsp[-1].integer; ;
    break;}
case 203:
#line 640 "parser.y"
{ yyval.vec[0] = yyvsp[-7].integer; yyval.vec[1] = yyvsp[-5].integer; yyval.vec[2] = yyvsp[-3].integer; yyval.vec[3] = yyvsp[-1].real; ;
    break;}
case 204:
#line 641 "parser.y"
{ yyval.vec[0] = yyvsp[-7].integer; yyval.vec[1] = yyvsp[-5].integer; yyval.vec[2] = yyvsp[-3].integer; yyval.vec[3] = yyvsp[-1].integer; ;
    break;}
case 205:
#line 642 "parser.y"
{ yyval.vec[0] = yyvsp[-1].real; yyval.vec[1] = yyvsp[-1].real; yyval.vec[2] = yyvsp[-1].real; yyval.vec[3] = yyvsp[-1].real; ;
    break;}
case 206:
#line 643 "parser.y"
{ yyval.vec[0] = yyvsp[-1].integer; yyval.vec[1] = yyvsp[-1].integer; yyval.vec[2] = yyvsp[-1].integer; yyval.vec[3] = yyvsp[-1].integer; ;
    break;}
case 207:
#line 646 "parser.y"
{ yyval.real = yyvsp[0].real; ;
    break;}
case 208:
#line 647 "parser.y"
{ yyval.real = yyvsp[0].real; ;
    break;}
case 209:
#line 648 "parser.y"
{ yyval.real = yyvsp[0].real; ;
    break;}
case 210:
#line 649 "parser.y"
{ yyval.real = yyvsp[-2].real + yyvsp[0].real; ;
    break;}
case 211:
#line 650 "parser.y"
{ yyval.real = yyvsp[-2].real - yyvsp[0].real; ;
    break;}
case 212:
#line 651 "parser.y"
{ yyval.real = yyvsp[-2].real * yyvsp[0].real; ;
    break;}
case 213:
#line 652 "parser.y"
{ yyval.real = yyvsp[-2].real / yyvsp[0].real; ;
    break;}
case 214:
#line 653 "parser.y"
{ yyval.real = pow( (float)yyvsp[-2].real, (float)yyvsp[0].real ); ;
    break;}
case 215:
#line 654 "parser.y"
{ yyval.real = -yyvsp[0].real; ;
    break;}
case 216:
#line 655 "parser.y"
{ yyval.real = yyvsp[-1].real; ;
    break;}
case 217:
#line 659 "parser.y"
{ yyval.integer = yyvsp[0].integer; ;
    break;}
case 218:
#line 660 "parser.y"
{ yyval.integer = yyvsp[-2].integer + yyvsp[0].integer; ;
    break;}
case 219:
#line 661 "parser.y"
{ yyval.integer = yyvsp[-2].integer - yyvsp[0].integer; ;
    break;}
case 220:
#line 662 "parser.y"
{ yyval.integer = yyvsp[-2].integer * yyvsp[0].integer; ;
    break;}
case 221:
#line 663 "parser.y"
{ yyval.integer = yyvsp[-2].integer / yyvsp[0].integer; ;
    break;}
case 222:
#line 664 "parser.y"
{ yyval.integer = (int)pow( (float)yyvsp[-2].integer, (float)yyvsp[0].integer ); ;
    break;}
case 223:
#line 665 "parser.y"
{ yyval.integer = -yyvsp[0].integer; ;
    break;}
case 224:
#line 666 "parser.y"
{ yyval.integer = yyvsp[-1].integer; ;
    break;}
case 225:
#line 670 "parser.y"
{yyval.real = sin(yyvsp[-1].real); ;
    break;}
case 226:
#line 671 "parser.y"
{yyval.real = sin((float)yyvsp[-1].integer); ;
    break;}
case 227:
#line 672 "parser.y"
{yyval.real = cos(yyvsp[-1].real); ;
    break;}
case 228:
#line 673 "parser.y"
{yyval.real = cos((float)yyvsp[-1].integer); ;
    break;}
case 229:
#line 674 "parser.y"
{yyval.real = tan(yyvsp[-1].real); ;
    break;}
case 230:
#line 675 "parser.y"
{yyval.real = tan((float)yyvsp[-1].integer); ;
    break;}
case 231:
#line 676 "parser.y"
{yyval.real = asin(yyvsp[-1].real); ;
    break;}
case 232:
#line 677 "parser.y"
{yyval.real = asin((float)yyvsp[-1].integer); ;
    break;}
case 233:
#line 678 "parser.y"
{yyval.real = acos(yyvsp[-1].real); ;
    break;}
case 234:
#line 679 "parser.y"
{yyval.real = acos((float)yyvsp[-1].integer); ;
    break;}
case 235:
#line 680 "parser.y"
{yyval.real = atan(yyvsp[-1].real); ;
    break;}
case 236:
#line 681 "parser.y"
{yyval.real = atan((float)yyvsp[-1].integer); ;
    break;}
case 237:
#line 682 "parser.y"
{yyval.real = log(yyvsp[-1].real); ;
    break;}
case 238:
#line 683 "parser.y"
{yyval.real = log((float)yyvsp[-1].integer); ;
    break;}
case 239:
#line 684 "parser.y"
{yyval.real = log10(yyvsp[-1].real); ;
    break;}
case 240:
#line 685 "parser.y"
{yyval.real = log10((float)yyvsp[-1].integer); ;
    break;}
case 241:
#line 686 "parser.y"
{yyval.real = exp(yyvsp[-1].real); ;
    break;}
case 242:
#line 687 "parser.y"
{yyval.real = exp((float)yyvsp[-1].integer); ;
    break;}
case 243:
#line 688 "parser.y"
{yyval.real = sqrt(yyvsp[-1].real); ;
    break;}
case 244:
#line 689 "parser.y"
{yyval.real = sqrt((float)yyvsp[-1].integer); ;
    break;}
case 245:
#line 693 "parser.y"
{ yyval.real = 2.718281828459f; ;
    break;}
case 246:
#line 694 "parser.y"
{ yyval.real = 3.141592653589793f; ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 487 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 698 "parser.y"


//Additional C code

namespace rawray {

void AddTrianglesOfMesh() {
    for( int i=0; i<g_mesh->GetNumTriangles(); ++i ) {
        Triangle* t = rawray::TriangleFactory::NewTriangle( g_mesh, i, g_material );
        g_scene->AddObject( t );
    }
    
    g_mesh = NULL;
}

void SetConfigSources(Scene* scene, Camera* cam, Image* img) {
	printf( "Setting config sources\n");
    g_scene = scene;
    g_camera = cam;
    g_image = img;
}

bool ConfigParser(const char* filename) {
#ifdef YYDEBUG
#if YYDEBUG==1
    yydebug = 1;
#endif
#endif
    
    if( !g_scene || !g_camera || !g_image )
        return false;
    
    yyin = fopen( filename, "r" );
    if( !yyin )
        return false;

    yyparse();
    fclose( yyin );
    
    printf( "Done Parsing...\n" );
	return yyerr == 0;
}

void DoneParsing() {
	printf( "Cleaning up parser...\n" );
	yy_done_parsing();
}

void AddMaterial( Material* material ) {
	if( g_multimaterial ) {
		g_multimaterial->AddMaterial( material );
	} else {
		g_scene->AddMaterial( material );
	}
}

} // namespace rawray
