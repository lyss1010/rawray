
/*  A Bison parser, made from parser.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	YY_REAL	258
#define	YY_PARSE_INT	259
#define	YY_STRING	260
#define	YY_PARSE_TRUE	261
#define	YY_PARSE_FALSE	262
#define	YY_ENABLE	263
#define	YY_DISABLE	264
#define	YY_MATH_COS	265
#define	YY_MATH_SIN	266
#define	YY_MATH_TAN	267
#define	YY_MATH_ACOS	268
#define	YY_MATH_ASIN	269
#define	YY_MATH_ATAN	270
#define	YY_MATH_ATAN2	271
#define	YY_MATH_LN	272
#define	YY_MATH_LOG	273
#define	YY_MATH_EXP	274
#define	YY_MATH_SQRT	275
#define	YY_MATH_E	276
#define	YY_MATH_PI	277
#define	YY_LT	278
#define	YY_GT	279
#define	YY_LBOX	280
#define	YY_RBOX	281
#define	YY_LCURLY	282
#define	YY_RCURLY	283
#define	YY_LPAREN	284
#define	YY_RPAREN	285
#define	YY_COMMA	286
#define	YY_EQUAL	287
#define	YY_PLUS	288
#define	YY_MINUS	289
#define	YY_DIV	290
#define	YY_MUL	291
#define	YY_CARAT	292
#define	YY_BSLASH	293
#define	YY_S_GLOBAL	294
#define	YY_WIDTH	295
#define	YY_HEIGHT	296
#define	YY_POS	297
#define	YY_IMG_BGCOLOR	298
#define	YY_IMG_FGCOLOR	299
#define	YY_GL_BGCOLOR	300
#define	YY_GL_SPHERE_SECTIONS	301
#define	YY_GL_RENDER_LIGHTS	302
#define	YY_HEADLESS	303
#define	YY_NUM_THREADS	304
#define	YY_RENDER_X_BLOCK	305
#define	YY_RENDER_Y_BLOCK	306
#define	YY_RENDER_HANDLER_SLEEP	307
#define	YY_RENDER_THREAD_SLEEP	308
#define	YY_RENDER_SPINLOCK_SLEEP	309
#define	YY_GAUSSIAN_BLUR_MAX	310
#define	YY_GAUSSIAN_BLUR_SIGMA	311
#define	YY_TRIANGLE_TEST	312
#define	YY_BARYCENTRIC	313
#define	YY_PROJECTION	314
#define	YY_PLUCKER	315
#define	YY_MOLLER	316
#define	YY_S_CAMERA	317
#define	YY_DIR	318
#define	YY_LOOKAT	319
#define	YY_UP	320
#define	YY_FOV	321
#define	YY_ASPECT	322
#define	YY_MIN_DRAW	323
#define	YY_MAX_DRAW	324
#define	YY_S_P0	325
#define	YY_SPIRAL_NUM_SPHERES	326
#define	YY_SPIRAL_RADIUS	327
#define	YY_LORENZ_DT	328
#define	YY_LORENZ_MIN_DISTANCE	329
#define	YY_LORENZ_MAX_DISTANCE	330
#define	YY_LORENZ_SIGMA	331
#define	YY_LORENZ_RHO	332
#define	YY_LORENZ_BETA	333
#define	YY_LORENZ_RADIUS	334
#define	YY_LORENZ_NUM_SPHERES	335
#define	YY_LORENZ_START	336
#define	YY_S_TRIANGLE	337
#define	YY_V1	338
#define	YY_V2	339
#define	YY_V3	340
#define	YY_N1	341
#define	YY_N2	342
#define	YY_N3	343
#define	YY_S_MESH	344
#define	YY_LOAD	345
#define	YY_S_INSTANCE	346
#define	YY_GEOMETRY	347
#define	YY_PUSHMATRIX	348
#define	YY_POPMATRIX	349
#define	YY_ROTATE	350
#define	YY_TRANSLATE	351
#define	YY_SCALE	352
#define	YY_S_LIGHT	353
#define	YY_S_POINTLIGHT	354
#define	YY_S_CONSTANTLIGHT	355
#define	YY_WATTAGE	356
#define	YY_COLOR	357
#define	YY_S_MATERIAL	358
#define	YY_S_LAMBERT	359
#define	YY_DIFFUSE	360
#define	YY_AMBIENT	361
#define	YY_S_SPHERE	362
#define	YY_CENTER	363
#define	YY_RADIUS	364
#define	YY_S_BLPATCH	365
#define	YY_P00	366
#define	YY_P01	367
#define	YY_P10	368
#define	YY_P11	369
#define	YY_EQUALS	370
#define	NEG	371

#line 1 "parser.y"

#ifdef WIN32
#pragma warning(disable:4244) // smaller type conversion warnings
#pragma warning(disable:4701) // variable used without being initialized
#endif

#include "parser.h"
#include <malloc.h>
#include <stdlib.h>
#include <math.h>
#include <stack>
#include <queue>
#include <map>
#include <string>
#include <iostream>
#include "lexer.h"
#include "math/vector3.h"
#include "math/vector4.h"
#include "math/matrix4x4.h"
#include "object.h"
#include "material.h"
#include "lambert.h"
#include "light.h"
#include "point_light.h"
#include "constant_light.h"
#include "options.h"
#include "scene.h"
#include "camera.h"
#include "image.h"
#include "triangle_factory.h"
#include "sphere.h"
#include "bl_patch.h"

//#define YYDEBUG 1

#define yyerror(x) printf("Parser error #%d on line %d: %s\n", ++yyerr, yyline, x);

extern int yylex();
extern int yyline;
extern int yyerr;
extern FILE *yyin, *yyout;


// variables for adding objects, keeping track of variables
rawray::Camera*                         g_camera = NULL;
rawray::Scene*                          g_scene = NULL;
rawray::Image*                          g_image = NULL;

rawray::Object*                         g_obj = NULL;
rawray::Material*                       g_material = NULL;
rawray::Light*                          g_light = NULL;
rawray::TriangleMesh*                   g_mesh = NULL;

std::map<std::string, rawray::Object*>  g_objectMap;
std::stack<math::Matrix4x4>             g_matrixStack;


#line 59 "parser.y"
typedef union
{
    float			real;
    int				integer;
    char*			str;
    float			vec[4];
} YYSTYPE;

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		413
#define	YYFLAG		-32768
#define	YYNTBASE	117

#define YYTRANSLATE(x) ((unsigned)(x) <= 371 ? yytranslate[x] : 163)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     1,     3,     5,     8,    10,    13,    15,    18,    20,
    23,    25,    28,    30,    33,    35,    38,    40,    43,    45,
    48,    50,    53,    58,    63,    68,    72,    76,    78,    80,
    82,    84,    86,    88,    91,    94,    97,   100,   103,   106,
   109,   112,   115,   118,   121,   124,   127,   130,   133,   136,
   139,   143,   146,   149,   152,   155,   158,   161,   164,   167,
   170,   173,   176,   179,   180,   185,   186,   191,   194,   197,
   200,   201,   206,   209,   212,   215,   218,   221,   224,   227,
   230,   233,   236,   239,   242,   245,   248,   251,   254,   257,
   260,   263,   266,   269,   272,   275,   278,   281,   284,   285,
   291,   292,   299,   300,   306,   307,   314,   315,   321,   322,
   329,   330,   336,   337,   344,   346,   348,   351,   354,   357,
   365,   373,   381,   389,   397,   405,   413,   421,   425,   429,
   439,   449,   459,   469,   479,   489,   499,   509,   519,   529,
   539,   549,   559,   569,   579,   589,   593,   597,   599,   601,
   603,   607,   611,   615,   619,   623,   626,   630,   632,   636,
   640,   644,   648,   652,   655,   659,   664,   669,   674,   679,
   684,   689,   694,   699,   704,   709,   714,   719,   724,   729,
   734,   739,   744,   749,   754,   759,   761
};

static const short yyrhs[] = {    -1,
   118,     0,   128,     0,   118,   128,     0,   130,     0,   119,
   130,     0,   131,     0,   120,   131,     0,   135,     0,   121,
   135,     0,   138,     0,   122,   138,     0,   139,     0,   123,
   139,     0,   140,     0,   124,   140,     0,   141,     0,   125,
   141,     0,   142,     0,   126,   142,     0,   143,     0,   127,
   143,     0,    39,    27,   119,    28,     0,    62,    27,   120,
    28,     0,    70,    27,   123,    28,     0,    98,   132,    28,
     0,   103,   136,    28,     0,   156,     0,   129,     0,   144,
     0,   147,     0,   150,     0,   153,     0,    41,   160,     0,
    40,   160,     0,    43,   157,     0,    44,   157,     0,    45,
   157,     0,    46,   160,     0,     8,    47,     0,     9,    47,
     0,     8,    48,     0,     9,    48,     0,    49,   160,     0,
    52,   160,     0,    53,   160,     0,    54,   160,     0,    50,
   160,     0,    51,   160,     0,    57,    58,     0,    57,    58,
    59,     0,    57,    60,     0,    57,    61,     0,    55,   160,
     0,    56,   160,     0,    42,   157,     0,    63,   157,     0,
    64,   157,     0,    65,   157,     0,    66,   159,     0,    67,
   159,     0,    68,   159,     0,    69,   159,     0,     0,    99,
    27,   133,   121,     0,     0,   100,    27,   134,   121,     0,
    42,   157,     0,   101,   159,     0,   102,   157,     0,     0,
   104,    27,   137,   122,     0,   105,   157,     0,   106,   157,
     0,    71,   160,     0,    72,   159,     0,    73,   159,     0,
    74,   159,     0,    75,   159,     0,    76,   159,     0,    77,
   159,     0,    78,   159,     0,    79,   159,     0,    80,   160,
     0,    81,   157,     0,    90,     5,     0,   108,   157,     0,
   109,   159,     0,    83,   157,     0,    84,   157,     0,    85,
   157,     0,    86,   157,     0,    87,   157,     0,    88,   157,
     0,   111,   157,     0,   112,   157,     0,   113,   157,     0,
   114,   157,     0,     0,    82,    27,   145,   126,    28,     0,
     0,    82,     5,    27,   146,   126,    28,     0,     0,    89,
    27,   148,   124,    28,     0,     0,    89,     5,    27,   149,
   124,    28,     0,     0,   107,    27,   151,   125,    28,     0,
     0,   107,     5,    27,   152,   125,    28,     0,     0,   110,
    27,   154,   127,    28,     0,     0,   110,     5,    27,   155,
   127,    28,     0,    93,     0,    94,     0,    95,   158,     0,
    96,   157,     0,    97,   157,     0,    23,   159,    31,   159,
    31,   159,    24,     0,    23,   159,    31,   159,    31,   160,
    24,     0,    23,   159,    31,   160,    31,   159,    24,     0,
    23,   159,    31,   160,    31,   160,    24,     0,    23,   160,
    31,   159,    31,   159,    24,     0,    23,   160,    31,   159,
    31,   160,    24,     0,    23,   160,    31,   160,    31,   159,
    24,     0,    23,   160,    31,   160,    31,   160,    24,     0,
    23,   159,    24,     0,    23,   160,    24,     0,    23,   159,
    31,   159,    31,   159,    31,   159,    24,     0,    23,   159,
    31,   159,    31,   159,    31,   160,    24,     0,    23,   159,
    31,   159,    31,   160,    31,   159,    24,     0,    23,   159,
    31,   159,    31,   160,    31,   160,    24,     0,    23,   159,
    31,   160,    31,   159,    31,   159,    24,     0,    23,   159,
    31,   160,    31,   159,    31,   160,    24,     0,    23,   159,
    31,   160,    31,   160,    31,   159,    24,     0,    23,   159,
    31,   160,    31,   160,    31,   160,    24,     0,    23,   160,
    31,   159,    31,   159,    31,   159,    24,     0,    23,   160,
    31,   159,    31,   159,    31,   160,    24,     0,    23,   160,
    31,   159,    31,   160,    31,   159,    24,     0,    23,   160,
    31,   159,    31,   160,    31,   160,    24,     0,    23,   160,
    31,   160,    31,   159,    31,   159,    24,     0,    23,   160,
    31,   160,    31,   159,    31,   160,    24,     0,    23,   160,
    31,   160,    31,   160,    31,   159,    24,     0,    23,   160,
    31,   160,    31,   160,    31,   160,    24,     0,    23,   159,
    24,     0,    23,   160,    24,     0,     3,     0,   161,     0,
   162,     0,   159,    33,   159,     0,   159,    34,   159,     0,
   159,    36,   159,     0,   159,    35,   159,     0,   159,    37,
   159,     0,    34,   159,     0,    29,   159,    30,     0,     4,
     0,   160,    33,   160,     0,   160,    34,   160,     0,   160,
    36,   160,     0,   160,    35,   160,     0,   160,    37,   160,
     0,    34,   160,     0,    29,   160,    30,     0,    11,    29,
   159,    30,     0,    11,    29,   160,    30,     0,    10,    29,
   159,    30,     0,    10,    29,   160,    30,     0,    12,    29,
   159,    30,     0,    12,    29,   160,    30,     0,    14,    29,
   159,    30,     0,    14,    29,   160,    30,     0,    13,    29,
   159,    30,     0,    13,    29,   160,    30,     0,    15,    29,
   159,    30,     0,    15,    29,   160,    30,     0,    17,    29,
   159,    30,     0,    17,    29,   160,    30,     0,    18,    29,
   159,    30,     0,    18,    29,   160,    30,     0,    19,    29,
   159,    30,     0,    19,    29,   160,    30,     0,    20,    29,
   159,    30,     0,    20,    29,   160,    30,     0,    21,     0,
    22,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   210,   210,   211,   211,   214,   214,   215,   215,   216,   216,
   217,   217,   218,   218,   219,   219,   220,   220,   221,   221,
   222,   222,   226,   228,   229,   230,   231,   232,   233,   236,
   238,   239,   240,   243,   245,   246,   247,   248,   249,   250,
   251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
   261,   262,   263,   264,   265,   268,   270,   271,   272,   273,
   274,   275,   276,   279,   286,   286,   292,   294,   296,   297,
   300,   307,   309,   311,   314,   316,   317,   318,   319,   320,
   321,   322,   323,   324,   325,   328,   340,   342,   345,   347,
   348,   349,   350,   351,   354,   356,   357,   358,   361,   369,
   375,   385,   392,   397,   402,   411,   418,   423,   428,   435,
   442,   447,   452,   459,   466,   468,   469,   470,   471,   474,
   476,   477,   478,   479,   480,   481,   482,   483,   484,   487,
   489,   490,   491,   492,   493,   494,   495,   496,   497,   498,
   499,   500,   501,   502,   503,   504,   505,   507,   509,   510,
   511,   512,   513,   514,   515,   516,   517,   520,   522,   523,
   524,   525,   526,   527,   528,   531,   533,   534,   535,   536,
   537,   538,   539,   540,   541,   542,   543,   544,   545,   546,
   547,   548,   549,   550,   551,   554,   556
};

static const char * const yytname[] = {   "$","error","$undefined.","YY_REAL",
"YY_PARSE_INT","YY_STRING","YY_PARSE_TRUE","YY_PARSE_FALSE","YY_ENABLE","YY_DISABLE",
"YY_MATH_COS","YY_MATH_SIN","YY_MATH_TAN","YY_MATH_ACOS","YY_MATH_ASIN","YY_MATH_ATAN",
"YY_MATH_ATAN2","YY_MATH_LN","YY_MATH_LOG","YY_MATH_EXP","YY_MATH_SQRT","YY_MATH_E",
"YY_MATH_PI","YY_LT","YY_GT","YY_LBOX","YY_RBOX","YY_LCURLY","YY_RCURLY","YY_LPAREN",
"YY_RPAREN","YY_COMMA","YY_EQUAL","YY_PLUS","YY_MINUS","YY_DIV","YY_MUL","YY_CARAT",
"YY_BSLASH","YY_S_GLOBAL","YY_WIDTH","YY_HEIGHT","YY_POS","YY_IMG_BGCOLOR","YY_IMG_FGCOLOR",
"YY_GL_BGCOLOR","YY_GL_SPHERE_SECTIONS","YY_GL_RENDER_LIGHTS","YY_HEADLESS",
"YY_NUM_THREADS","YY_RENDER_X_BLOCK","YY_RENDER_Y_BLOCK","YY_RENDER_HANDLER_SLEEP",
"YY_RENDER_THREAD_SLEEP","YY_RENDER_SPINLOCK_SLEEP","YY_GAUSSIAN_BLUR_MAX","YY_GAUSSIAN_BLUR_SIGMA",
"YY_TRIANGLE_TEST","YY_BARYCENTRIC","YY_PROJECTION","YY_PLUCKER","YY_MOLLER",
"YY_S_CAMERA","YY_DIR","YY_LOOKAT","YY_UP","YY_FOV","YY_ASPECT","YY_MIN_DRAW",
"YY_MAX_DRAW","YY_S_P0","YY_SPIRAL_NUM_SPHERES","YY_SPIRAL_RADIUS","YY_LORENZ_DT",
"YY_LORENZ_MIN_DISTANCE","YY_LORENZ_MAX_DISTANCE","YY_LORENZ_SIGMA","YY_LORENZ_RHO",
"YY_LORENZ_BETA","YY_LORENZ_RADIUS","YY_LORENZ_NUM_SPHERES","YY_LORENZ_START",
"YY_S_TRIANGLE","YY_V1","YY_V2","YY_V3","YY_N1","YY_N2","YY_N3","YY_S_MESH",
"YY_LOAD","YY_S_INSTANCE","YY_GEOMETRY","YY_PUSHMATRIX","YY_POPMATRIX","YY_ROTATE",
"YY_TRANSLATE","YY_SCALE","YY_S_LIGHT","YY_S_POINTLIGHT","YY_S_CONSTANTLIGHT",
"YY_WATTAGE","YY_COLOR","YY_S_MATERIAL","YY_S_LAMBERT","YY_DIFFUSE","YY_AMBIENT",
"YY_S_SPHERE","YY_CENTER","YY_RADIUS","YY_S_BLPATCH","YY_P00","YY_P01","YY_P10",
"YY_P11","YY_EQUALS","NEG","input","option_blocks","global_stuff","camera_stuff",
"light_stuff","lambert_stuff","p0_stuff","mesh_stuff","sphere_stuff","triangle_stuff",
"blpatch_stuff","block","object_type","global_option","camera_option","light_type",
"@1","@2","light_option","material_type","@3","lambert_option","p0_option","mesh_option",
"sphere_option","triangle_option","blpatch_option","object_triangle","@4","@5",
"object_mesh","@6","@7","object_sphere","@8","@9","object_blpatch","@10","@11",
"transformation","vector3","vector4","rExp","iExp","fExp","constantExp",""
};
#endif

static const short yyr1[] = {     0,
   117,   117,   118,   118,   119,   119,   120,   120,   121,   121,
   122,   122,   123,   123,   124,   124,   125,   125,   126,   126,
   127,   127,   128,   128,   128,   128,   128,   128,   128,   129,
   129,   129,   129,   130,   130,   130,   130,   130,   130,   130,
   130,   130,   130,   130,   130,   130,   130,   130,   130,   130,
   130,   130,   130,   130,   130,   131,   131,   131,   131,   131,
   131,   131,   131,   133,   132,   134,   132,   135,   135,   135,
   137,   136,   138,   138,   139,   139,   139,   139,   139,   139,
   139,   139,   139,   139,   139,   140,   141,   141,   142,   142,
   142,   142,   142,   142,   143,   143,   143,   143,   145,   144,
   146,   144,   148,   147,   149,   147,   151,   150,   152,   150,
   154,   153,   155,   153,   156,   156,   156,   156,   156,   157,
   157,   157,   157,   157,   157,   157,   157,   157,   157,   158,
   158,   158,   158,   158,   158,   158,   158,   158,   158,   158,
   158,   158,   158,   158,   158,   158,   158,   159,   159,   159,
   159,   159,   159,   159,   159,   159,   159,   160,   160,   160,
   160,   160,   160,   160,   160,   161,   161,   161,   161,   161,
   161,   161,   161,   161,   161,   161,   161,   161,   161,   161,
   161,   161,   161,   161,   161,   162,   162
};

static const short yyr2[] = {     0,
     0,     1,     1,     2,     1,     2,     1,     2,     1,     2,
     1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
     1,     2,     4,     4,     4,     3,     3,     1,     1,     1,
     1,     1,     1,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     3,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     0,     4,     0,     4,     2,     2,     2,
     0,     4,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     0,     5,
     0,     6,     0,     5,     0,     6,     0,     5,     0,     6,
     0,     5,     0,     6,     1,     1,     2,     2,     2,     7,
     7,     7,     7,     7,     7,     7,     7,     3,     3,     9,
     9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
     9,     9,     9,     9,     9,     3,     3,     1,     1,     1,
     3,     3,     3,     3,     3,     2,     3,     1,     3,     3,
     3,     3,     3,     2,     3,     4,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     1,     1
};

static const short yydefact[] = {     1,
     0,     0,     0,     0,     0,   115,   116,     0,     0,     0,
     0,     0,     0,     0,     2,     3,    29,    30,    31,    32,
    33,    28,     0,     0,     0,     0,    99,     0,   103,     0,
   117,     0,   118,   119,     0,     0,     0,     0,     0,     0,
   107,     0,   111,     4,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     5,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     7,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    13,   101,     0,   105,     0,
   148,   158,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   186,   187,     0,     0,     0,     0,   149,   150,
     0,     0,    64,    66,    26,    71,    27,   109,     0,   113,
     0,    40,    42,    41,    43,     0,     0,    35,    34,    36,
    37,    38,    39,    44,    48,    49,    45,    46,    47,    54,
    55,    50,    52,    53,    23,     6,    56,    57,    58,    59,
     0,     0,    60,    61,    62,    63,    24,     8,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    25,
    14,     0,     0,     0,     0,     0,     0,     0,     0,    19,
     0,     0,     0,    15,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   156,   164,   146,     0,
     0,     0,     0,     0,     0,   147,     0,     0,     0,     0,
     0,     0,   128,     0,   129,     0,     0,     0,     0,     0,
     0,     0,     0,    17,     0,     0,     0,     0,     0,     0,
    21,    51,     0,    89,    90,    91,    92,    93,    94,   100,
    20,     0,    86,   104,    16,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   157,   165,     0,     0,   151,
   152,   154,   153,   155,     0,     0,   159,   160,   162,   161,
   163,     0,     0,     0,     0,     0,     0,     0,    65,     9,
    67,     0,     0,    72,    11,     0,    87,    88,   108,    18,
     0,    95,    96,    97,    98,   112,    22,   102,   106,   168,
   169,   166,   167,   170,   171,   174,   175,   172,   173,   176,
   177,   178,   179,   180,   181,   182,   183,   184,   185,     0,
     0,     0,     0,     0,     0,     0,     0,    68,    69,    70,
    10,    73,    74,    12,   110,   114,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   120,   121,   122,   123,   124,   125,   126,   127,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     0,     0,     0
};

static const short yydefgoto[] = {   411,
    15,    62,    72,   289,   294,    85,   183,   223,   179,   230,
    16,    17,    63,    73,    37,   217,   218,   290,    39,   219,
   295,    86,   184,   224,   180,   231,    18,    88,   172,    19,
    90,   181,    20,   119,   220,    21,   121,   225,    22,    33,
    31,   195,   196,   109,   110
};

static const short yypact[] = {   174,
    -1,    85,    89,    99,   100,-32768,-32768,   -13,    98,    98,
   -37,    19,   119,   120,   174,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   363,   -33,   607,   141,-32768,   156,-32768,   418,
-32768,   418,-32768,-32768,   169,   198,   201,   208,   215,   221,
-32768,   228,-32768,-32768,   160,   162,    24,    24,    98,    98,
    98,    24,    24,    24,    24,    24,    24,    24,    24,    24,
    59,   345,-32768,    98,    98,    98,    98,   443,   443,   443,
   443,    69,-32768,    24,   443,   443,   443,   443,   443,   443,
   443,   443,    24,    98,   237,-32768,-32768,    66,-32768,   176,
-32768,-32768,   235,   246,   247,   249,   250,   251,   253,   254,
   258,   259,-32768,-32768,   418,   418,   -12,   145,-32768,-32768,
   295,   327,-32768,-32768,-32768,-32768,-32768,-32768,   137,-32768,
   -57,-32768,-32768,-32768,-32768,    24,    24,   -19,   -19,-32768,
-32768,-32768,   -19,   -19,   -19,   -19,   -19,   -19,   -19,   -19,
   -19,   230,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   443,   443,    73,    73,    73,    73,-32768,-32768,   -19,    73,
    73,    73,    73,    73,    73,    73,    73,   -19,-32768,-32768,
-32768,    66,    98,    98,    98,    98,    98,    98,    15,-32768,
   176,   289,   -17,-32768,   418,   418,   418,   418,   418,   418,
   418,   418,   418,   418,   181,   197,   283,   284,-32768,   418,
   443,   443,   443,   443,   443,-32768,   418,    24,    24,    24,
    24,    24,-32768,   418,-32768,   418,   -22,   -22,   168,   137,
    98,   443,   -27,-32768,   -57,    98,    98,    98,    98,   -24,
-32768,-32768,    57,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   -15,-32768,-32768,-32768,   217,   659,   667,   675,   683,
   691,   699,   707,   715,   723,   731,   739,   747,   755,   763,
   771,   779,   787,   795,   803,-32768,-32768,   154,   810,   130,
   130,   283,   283,   283,   817,   824,   158,   158,   284,   284,
   284,   831,   838,   845,   852,    98,   443,    98,   -22,-32768,
   -22,    98,    98,   168,-32768,   -25,-32768,    73,-32768,-32768,
   -20,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   418,
   418,   418,   418,   418,   418,   418,   418,-32768,    73,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   859,   866,   873,   880,
   887,   894,   901,   908,   225,   262,   445,   450,   464,   469,
   483,   488,   418,   418,   418,   418,   418,   418,   418,   418,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   502,   507,
   521,   526,   540,   545,   559,   564,   578,   583,   597,   602,
   616,   621,   635,   640,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   322,   323,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,   106,-32768,-32768,   144,   107,   183,   116,
   344,-32768,   303,   294,-32768,-32768,-32768,  -262,-32768,-32768,
    74,   282,  -146,  -218,  -172,  -224,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    64,
-32768,   -30,    12,-32768,-32768
};


#define	YYLAST		945


static const short yytable[] = {   107,
   299,   111,   345,   306,   300,   307,   241,   346,    64,    30,
   244,   199,   309,   208,   209,   210,   211,   212,   200,   286,
   201,   202,   203,   204,   205,    23,   341,    92,   341,    65,
    66,    67,    68,    69,    70,    71,   245,   153,   154,   155,
   156,   108,   240,   112,   160,   161,   162,   163,   164,   165,
   166,   167,   126,   226,   227,   228,   229,   127,   128,   129,
   241,    35,    36,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   182,    34,   182,   197,   307,   300,   287,   288,
   221,   222,   221,   222,   308,   159,   226,   227,   228,   229,
   226,   227,   228,   229,   168,   245,   157,   173,   174,   175,
   176,   177,   178,    26,    28,   201,   202,   203,   204,   205,
    64,    24,   130,   131,   132,    25,   142,   198,   143,   144,
    32,   197,    38,    40,    42,    27,    29,   147,   148,   149,
   150,    65,    66,    67,    68,    69,    70,    71,   198,   173,
   174,   175,   176,   177,   178,    41,    43,   169,   173,   174,
   175,   176,   177,   178,   246,   248,   250,   252,   254,   256,
   258,   260,   262,   264,   203,   204,   205,    87,   206,   268,
   270,   271,   272,   273,   274,   207,   275,   208,   209,   210,
   211,   212,    89,   282,   330,   284,   201,   202,   203,   204,
   205,   298,   210,   211,   212,   113,   247,   249,   251,   253,
   255,   257,   259,   261,   263,   265,   122,   123,   124,   125,
   266,   269,     1,   201,   202,   203,   204,   205,   276,   277,
   278,   279,   280,   281,   114,   283,   267,   285,   115,   208,
   209,   210,   211,   212,   116,     2,   234,   235,   236,   237,
   238,   239,   117,     3,   221,   222,   310,   118,   371,   201,
   202,   203,   204,   205,   120,     4,   339,   201,   202,   203,
   204,   205,     5,   185,   170,   182,     6,     7,     8,     9,
    10,    11,   292,   293,   186,   187,    12,   188,   189,   190,
    13,   191,   192,    14,   297,   372,   193,   194,   232,   302,
   303,   304,   305,   243,   208,   209,   210,   211,   212,   347,
   349,   351,   353,   355,   357,   359,   361,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,   213,   205,
   212,   412,   413,   291,   242,   214,   296,   201,   202,   203,
   204,   205,   379,   381,   383,   385,   387,   389,   391,   393,
   301,   348,   350,   352,   354,   356,   358,   360,   362,   338,
   215,   340,    45,    46,   233,   342,   343,   216,    44,   208,
   209,   210,   211,   212,   146,   158,   171,   344,     0,     0,
    45,    46,   145,     0,   380,   382,   384,   386,   388,   390,
   392,   394,     0,     0,    47,    48,     0,    49,    50,    51,
    52,     0,     0,    53,    54,    55,    56,    57,    58,    59,
    60,    61,    47,    48,     0,    49,    50,    51,    52,     0,
     0,    53,    54,    55,    56,    57,    58,    59,    60,    61,
    91,    92,     0,     0,     0,     0,     0,    93,    94,    95,
    96,    97,    98,     0,    99,   100,   101,   102,   103,   104,
     0,     0,     0,     0,     0,    91,   105,     0,     0,     0,
     0,   106,    93,    94,    95,    96,    97,    98,     0,    99,
   100,   101,   102,   103,   104,     0,     0,     0,   373,     0,
     0,   151,     0,   374,     0,     0,   152,   201,   202,   203,
   204,   205,   208,   209,   210,   211,   212,   375,     0,     0,
     0,     0,   376,     0,     0,     0,   201,   202,   203,   204,
   205,   208,   209,   210,   211,   212,   377,     0,     0,     0,
     0,   378,     0,     0,     0,   201,   202,   203,   204,   205,
   208,   209,   210,   211,   212,   395,     0,     0,     0,     0,
   396,     0,     0,     0,   201,   202,   203,   204,   205,   208,
   209,   210,   211,   212,   397,     0,     0,     0,     0,   398,
     0,     0,     0,   201,   202,   203,   204,   205,   208,   209,
   210,   211,   212,   399,     0,     0,     0,     0,   400,     0,
     0,     0,   201,   202,   203,   204,   205,   208,   209,   210,
   211,   212,   401,     0,     0,     0,     0,   402,     0,     0,
     0,   201,   202,   203,   204,   205,   208,   209,   210,   211,
   212,   403,     0,     0,     0,     0,   404,     0,     0,     0,
   201,   202,   203,   204,   205,   208,   209,   210,   211,   212,
   405,     0,     0,     0,     0,   406,     0,     0,     0,   201,
   202,   203,   204,   205,   208,   209,   210,   211,   212,   407,
     0,     0,     0,     0,   408,     0,     0,     0,   201,   202,
   203,   204,   205,   208,   209,   210,   211,   212,   409,     0,
     0,     0,     0,   410,     0,     0,     0,   201,   202,   203,
   204,   205,   208,   209,   210,   211,   212,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,   311,     0,
     0,   208,   209,   210,   211,   212,   312,     0,     0,   201,
   202,   203,   204,   205,   313,     0,     0,   208,   209,   210,
   211,   212,   314,     0,     0,   201,   202,   203,   204,   205,
   315,     0,     0,   208,   209,   210,   211,   212,   316,     0,
     0,   201,   202,   203,   204,   205,   317,     0,     0,   208,
   209,   210,   211,   212,   318,     0,     0,   201,   202,   203,
   204,   205,   319,     0,     0,   208,   209,   210,   211,   212,
   320,     0,     0,   201,   202,   203,   204,   205,   321,     0,
     0,   208,   209,   210,   211,   212,   322,     0,     0,   201,
   202,   203,   204,   205,   323,     0,     0,   208,   209,   210,
   211,   212,   324,     0,     0,   201,   202,   203,   204,   205,
   325,     0,     0,   208,   209,   210,   211,   212,   326,     0,
     0,   201,   202,   203,   204,   205,   327,     0,     0,   208,
   209,   210,   211,   212,   328,     0,     0,   201,   202,   203,
   204,   205,   329,     0,     0,   208,   209,   210,   211,   212,
   331,     0,   208,   209,   210,   211,   212,   332,     0,   201,
   202,   203,   204,   205,   333,     0,   208,   209,   210,   211,
   212,   334,     0,   201,   202,   203,   204,   205,   335,     0,
   208,   209,   210,   211,   212,   336,     0,   201,   202,   203,
   204,   205,   337,     0,   208,   209,   210,   211,   212,   363,
     0,   201,   202,   203,   204,   205,   364,     0,   208,   209,
   210,   211,   212,   365,     0,   201,   202,   203,   204,   205,
   366,     0,   208,   209,   210,   211,   212,   367,     0,   201,
   202,   203,   204,   205,   368,     0,   208,   209,   210,   211,
   212,   369,     0,   201,   202,   203,   204,   205,   370,     0,
   208,   209,   210,   211,   212
};

static const short yycheck[] = {    30,
    28,    32,    28,    28,   223,   230,   179,    28,    42,    23,
    28,    24,    28,    33,    34,    35,    36,    37,    31,    42,
    33,    34,    35,    36,    37,    27,   289,     4,   291,    63,
    64,    65,    66,    67,    68,    69,   183,    68,    69,    70,
    71,    30,    28,    32,    75,    76,    77,    78,    79,    80,
    81,    82,    29,   111,   112,   113,   114,    34,    47,    48,
   233,    99,   100,    52,    53,    54,    55,    56,    57,    58,
    59,    60,    90,    10,    90,   106,   301,   296,   101,   102,
   108,   109,   108,   109,    28,    74,   111,   112,   113,   114,
   111,   112,   113,   114,    83,   242,    28,    83,    84,    85,
    86,    87,    88,     5,     5,    33,    34,    35,    36,    37,
    42,    27,    49,    50,    51,    27,    58,   106,    60,    61,
    23,   152,   104,     5,     5,    27,    27,    64,    65,    66,
    67,    63,    64,    65,    66,    67,    68,    69,   127,    83,
    84,    85,    86,    87,    88,    27,    27,    84,    83,    84,
    85,    86,    87,    88,   185,   186,   187,   188,   189,   190,
   191,   192,   193,   194,    35,    36,    37,    27,    24,   200,
   201,   202,   203,   204,   205,    31,   207,    33,    34,    35,
    36,    37,    27,   214,    31,   216,    33,    34,    35,    36,
    37,   222,    35,    36,    37,    27,   185,   186,   187,   188,
   189,   190,   191,   192,   193,   194,    47,    48,    47,    48,
    30,   200,    39,    33,    34,    35,    36,    37,   207,   208,
   209,   210,   211,   212,    27,   214,    30,   216,    28,    33,
    34,    35,    36,    37,    27,    62,   173,   174,   175,   176,
   177,   178,    28,    70,   108,   109,    30,    27,    24,    33,
    34,    35,    36,    37,    27,    82,   287,    33,    34,    35,
    36,    37,    89,    29,    28,    90,    93,    94,    95,    96,
    97,    98,   105,   106,    29,    29,   103,    29,    29,    29,
   107,    29,    29,   110,   221,    24,    29,    29,    59,   226,
   227,   228,   229,     5,    33,    34,    35,    36,    37,   330,
   331,   332,   333,   334,   335,   336,   337,    71,    72,    73,
    74,    75,    76,    77,    78,    79,    80,    81,    24,    37,
    37,     0,     0,   218,   181,    31,   220,    33,    34,    35,
    36,    37,   363,   364,   365,   366,   367,   368,   369,   370,
   225,   330,   331,   332,   333,   334,   335,   336,   337,   286,
    24,   288,     8,     9,   172,   292,   293,    31,    15,    33,
    34,    35,    36,    37,    62,    72,    85,   294,    -1,    -1,
     8,     9,    28,    -1,   363,   364,   365,   366,   367,   368,
   369,   370,    -1,    -1,    40,    41,    -1,    43,    44,    45,
    46,    -1,    -1,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    40,    41,    -1,    43,    44,    45,    46,    -1,
    -1,    49,    50,    51,    52,    53,    54,    55,    56,    57,
     3,     4,    -1,    -1,    -1,    -1,    -1,    10,    11,    12,
    13,    14,    15,    -1,    17,    18,    19,    20,    21,    22,
    -1,    -1,    -1,    -1,    -1,     3,    29,    -1,    -1,    -1,
    -1,    34,    10,    11,    12,    13,    14,    15,    -1,    17,
    18,    19,    20,    21,    22,    -1,    -1,    -1,    24,    -1,
    -1,    29,    -1,    24,    -1,    -1,    34,    33,    34,    35,
    36,    37,    33,    34,    35,    36,    37,    24,    -1,    -1,
    -1,    -1,    24,    -1,    -1,    -1,    33,    34,    35,    36,
    37,    33,    34,    35,    36,    37,    24,    -1,    -1,    -1,
    -1,    24,    -1,    -1,    -1,    33,    34,    35,    36,    37,
    33,    34,    35,    36,    37,    24,    -1,    -1,    -1,    -1,
    24,    -1,    -1,    -1,    33,    34,    35,    36,    37,    33,
    34,    35,    36,    37,    24,    -1,    -1,    -1,    -1,    24,
    -1,    -1,    -1,    33,    34,    35,    36,    37,    33,    34,
    35,    36,    37,    24,    -1,    -1,    -1,    -1,    24,    -1,
    -1,    -1,    33,    34,    35,    36,    37,    33,    34,    35,
    36,    37,    24,    -1,    -1,    -1,    -1,    24,    -1,    -1,
    -1,    33,    34,    35,    36,    37,    33,    34,    35,    36,
    37,    24,    -1,    -1,    -1,    -1,    24,    -1,    -1,    -1,
    33,    34,    35,    36,    37,    33,    34,    35,    36,    37,
    24,    -1,    -1,    -1,    -1,    24,    -1,    -1,    -1,    33,
    34,    35,    36,    37,    33,    34,    35,    36,    37,    24,
    -1,    -1,    -1,    -1,    24,    -1,    -1,    -1,    33,    34,
    35,    36,    37,    33,    34,    35,    36,    37,    24,    -1,
    -1,    -1,    -1,    24,    -1,    -1,    -1,    33,    34,    35,
    36,    37,    33,    34,    35,    36,    37,    71,    72,    73,
    74,    75,    76,    77,    78,    79,    80,    81,    30,    -1,
    -1,    33,    34,    35,    36,    37,    30,    -1,    -1,    33,
    34,    35,    36,    37,    30,    -1,    -1,    33,    34,    35,
    36,    37,    30,    -1,    -1,    33,    34,    35,    36,    37,
    30,    -1,    -1,    33,    34,    35,    36,    37,    30,    -1,
    -1,    33,    34,    35,    36,    37,    30,    -1,    -1,    33,
    34,    35,    36,    37,    30,    -1,    -1,    33,    34,    35,
    36,    37,    30,    -1,    -1,    33,    34,    35,    36,    37,
    30,    -1,    -1,    33,    34,    35,    36,    37,    30,    -1,
    -1,    33,    34,    35,    36,    37,    30,    -1,    -1,    33,
    34,    35,    36,    37,    30,    -1,    -1,    33,    34,    35,
    36,    37,    30,    -1,    -1,    33,    34,    35,    36,    37,
    30,    -1,    -1,    33,    34,    35,    36,    37,    30,    -1,
    -1,    33,    34,    35,    36,    37,    30,    -1,    -1,    33,
    34,    35,    36,    37,    30,    -1,    -1,    33,    34,    35,
    36,    37,    30,    -1,    -1,    33,    34,    35,    36,    37,
    31,    -1,    33,    34,    35,    36,    37,    31,    -1,    33,
    34,    35,    36,    37,    31,    -1,    33,    34,    35,    36,
    37,    31,    -1,    33,    34,    35,    36,    37,    31,    -1,
    33,    34,    35,    36,    37,    31,    -1,    33,    34,    35,
    36,    37,    31,    -1,    33,    34,    35,    36,    37,    31,
    -1,    33,    34,    35,    36,    37,    31,    -1,    33,    34,
    35,    36,    37,    31,    -1,    33,    34,    35,    36,    37,
    31,    -1,    33,    34,    35,    36,    37,    31,    -1,    33,
    34,    35,    36,    37,    31,    -1,    33,    34,    35,    36,
    37,    31,    -1,    33,    34,    35,    36,    37,    31,    -1,
    33,    34,    35,    36,    37
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 192 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

int
yyparse(YYPARSE_PARAM)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 23:
#line 227 "parser.y"
{ ;
    break;}
case 24:
#line 228 "parser.y"
{ ;
    break;}
case 25:
#line 229 "parser.y"
{ ;
    break;}
case 26:
#line 230 "parser.y"
{ ;
    break;}
case 27:
#line 231 "parser.y"
{ ;
    break;}
case 28:
#line 232 "parser.y"
{ ;
    break;}
case 29:
#line 233 "parser.y"
{ ;
    break;}
case 34:
#line 244 "parser.y"
{ g_image->Resize( g_image->GetWidth(), rawray::options::global::win_height = yyvsp[0].integer ); ;
    break;}
case 35:
#line 245 "parser.y"
{ g_image->Resize( rawray::options::global::win_width = yyvsp[0].integer, g_image->GetHeight() ); ;
    break;}
case 36:
#line 246 "parser.y"
{ rawray::options::global::img_bg_color = math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ); ;
    break;}
case 37:
#line 247 "parser.y"
{ rawray::options::global::img_fg_color = math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ); ;
    break;}
case 38:
#line 248 "parser.y"
{ rawray::options::global::gl_bg_color = math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ); ;
    break;}
case 39:
#line 249 "parser.y"
{ rawray::options::global::gl_sphere_sections = yyvsp[0].integer; ;
    break;}
case 40:
#line 250 "parser.y"
{ rawray::options::global::gl_render_lights = true; ;
    break;}
case 41:
#line 251 "parser.y"
{ rawray::options::global::gl_render_lights = false; ;
    break;}
case 42:
#line 252 "parser.y"
{ rawray::options::global::headless = true; ;
    break;}
case 43:
#line 253 "parser.y"
{ rawray::options::global::headless = false; ;
    break;}
case 44:
#line 254 "parser.y"
{ rawray::options::global::num_threads = yyvsp[0].integer; ;
    break;}
case 45:
#line 255 "parser.y"
{ rawray::options::global::render_handler_sleep = yyvsp[0].integer; ;
    break;}
case 46:
#line 256 "parser.y"
{ rawray::options::global::render_thread_sleep = yyvsp[0].integer; ;
    break;}
case 47:
#line 257 "parser.y"
{ rawray::options::global::render_spinlock_sleep = yyvsp[0].integer; ;
    break;}
case 48:
#line 258 "parser.y"
{ rawray::options::global::render_x_block = yyvsp[0].integer; ;
    break;}
case 49:
#line 259 "parser.y"
{ rawray::options::global::render_y_block = yyvsp[0].integer; ;
    break;}
case 50:
#line 260 "parser.y"
{ rawray::options::global::triangle_intersection_algorithm = rawray::options::BARYCENTRIC; ;
    break;}
case 51:
#line 261 "parser.y"
{ rawray::options::global::triangle_intersection_algorithm = rawray::options::BARYCENTRIC_PROJECTION; ;
    break;}
case 52:
#line 262 "parser.y"
{ rawray::options::global::triangle_intersection_algorithm = rawray::options::PLUCKER; ;
    break;}
case 53:
#line 263 "parser.y"
{ rawray::options::global::triangle_intersection_algorithm = rawray::options::MOLLER; ;
    break;}
case 54:
#line 264 "parser.y"
{ rawray::options::global::gaussian_blur_max = yyvsp[0].integer ;
    break;}
case 55:
#line 265 "parser.y"
{ rawray::options::global::gaussian_blur_sigma = yyvsp[0].integer ;
    break;}
case 56:
#line 269 "parser.y"
{ g_camera->SetEye(		rawray::options::camera::eye = math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 57:
#line 270 "parser.y"
{ g_camera->SetViewDir( rawray::options::camera::view = math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 58:
#line 271 "parser.y"
{ g_camera->SetLookAt(	rawray::options::camera::lookat = math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 59:
#line 272 "parser.y"
{ g_camera->SetUp(		rawray::options::camera::up = math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 60:
#line 273 "parser.y"
{ g_camera->SetFOV(		rawray::options::camera::fov = yyvsp[0].real ); ;
    break;}
case 61:
#line 274 "parser.y"
{ g_camera->SetAspect(	rawray::options::camera::aspect = yyvsp[0].real ); ;
    break;}
case 62:
#line 275 "parser.y"
{ g_camera->SetMinDraw( rawray::options::camera::min_draw = yyvsp[0].real ); ;
    break;}
case 63:
#line 276 "parser.y"
{ g_camera->SetMinDraw( rawray::options::camera::max_draw = yyvsp[0].real ); ;
    break;}
case 64:
#line 281 "parser.y"
{
				g_light = new rawray::PointLight();
				g_scene->AddLight( g_light );
			;
    break;}
case 66:
#line 287 "parser.y"
{
				g_light = new rawray::ConstantLight();
				g_scene->AddLight( g_light );
			;
    break;}
case 68:
#line 295 "parser.y"
{ g_light->SetPosition( math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 69:
#line 296 "parser.y"
{ g_light->SetWattage( yyvsp[0].real ); ;
    break;}
case 70:
#line 297 "parser.y"
{ g_light->SetColor( math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 71:
#line 302 "parser.y"
{
				g_material = new rawray::Lambert();
				g_scene->AddMaterial( g_material );
			;
    break;}
case 73:
#line 310 "parser.y"
{ ((rawray::Lambert*)g_material)->SetDiffuse( math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 74:
#line 311 "parser.y"
{ ((rawray::Lambert*)g_material)->SetAmbient( math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 75:
#line 315 "parser.y"
{ rawray::options::p0::spiral_num_spheres = yyvsp[0].integer; ;
    break;}
case 76:
#line 316 "parser.y"
{ rawray::options::p0::spiral_radius = yyvsp[0].real; ;
    break;}
case 77:
#line 317 "parser.y"
{ rawray::options::p0::lorenz_dt = yyvsp[0].real; ;
    break;}
case 78:
#line 318 "parser.y"
{ rawray::options::p0::lorenz_min_distance = yyvsp[0].real; ;
    break;}
case 79:
#line 319 "parser.y"
{ rawray::options::p0::lorenz_max_distance = yyvsp[0].real; ;
    break;}
case 80:
#line 320 "parser.y"
{ rawray::options::p0::lorenz_sigma = yyvsp[0].real; ;
    break;}
case 81:
#line 321 "parser.y"
{ rawray::options::p0::lorenz_rho = yyvsp[0].real; ;
    break;}
case 82:
#line 322 "parser.y"
{ rawray::options::p0::lorenz_beta = yyvsp[0].real; ;
    break;}
case 83:
#line 323 "parser.y"
{ rawray::options::p0::lorenz_radius = yyvsp[0].real; ;
    break;}
case 84:
#line 324 "parser.y"
{ rawray::options::p0::lorenz_num_spheres = yyvsp[0].integer; ;
    break;}
case 85:
#line 325 "parser.y"
{ rawray::options::p0::lorenz_start = math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ); ;
    break;}
case 86:
#line 330 "parser.y"
{
				yyvsp[0].str[strlen(yyvsp[0].str)-1] = 0;
				printf( "Loading Mesh: '%s'\n", yyvsp[0].str+1 );
				g_mesh->LoadOBJ( yyvsp[0].str+1 );
				printf( "Found %d triangles in mesh\n", g_mesh->GetNumTriangles() );
				
				delete yyvsp[0].str;
			;
    break;}
case 87:
#line 341 "parser.y"
{ ((rawray::Sphere*)g_obj)->SetCenter( math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 88:
#line 342 "parser.y"
{ ((rawray::Sphere*)g_obj)->SetRadius( yyvsp[0].real ); ;
    break;}
case 89:
#line 346 "parser.y"
{ ;
    break;}
case 90:
#line 347 "parser.y"
{ ;
    break;}
case 91:
#line 348 "parser.y"
{ ;
    break;}
case 92:
#line 349 "parser.y"
{ ;
    break;}
case 93:
#line 350 "parser.y"
{ ;
    break;}
case 94:
#line 351 "parser.y"
{ ;
    break;}
case 95:
#line 355 "parser.y"
{ ((rawray::BLPatch*)g_obj)->SetP00( math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 96:
#line 356 "parser.y"
{ ((rawray::BLPatch*)g_obj)->SetP01( math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 97:
#line 357 "parser.y"
{ ((rawray::BLPatch*)g_obj)->SetP10( math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 98:
#line 358 "parser.y"
{ ((rawray::BLPatch*)g_obj)->SetP11( math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 99:
#line 363 "parser.y"
{
				g_mesh = new rawray::TriangleMesh();
				
				// TODO: implement
				// Create single triangle
			;
    break;}
case 100:
#line 370 "parser.y"
{
				g_scene->AddMesh( g_mesh );
				rawray::AddTrianglesOfMesh();
			;
    break;}
case 101:
#line 376 "parser.y"
{
				g_mesh = new rawray::TriangleMesh();
				
				// TODO: implement
				//g_objectMap[$2] = g_obj;
				// Create single triagnle
				
				delete yyvsp[-1].str;
			;
    break;}
case 102:
#line 386 "parser.y"
{
				g_scene->AddMesh( g_mesh );
				rawray::AddTrianglesOfMesh();
			;
    break;}
case 103:
#line 394 "parser.y"
{
				g_mesh = new rawray::TriangleMesh();
			;
    break;}
case 104:
#line 398 "parser.y"
{
				g_scene->AddMesh( g_mesh );
				rawray::AddTrianglesOfMesh();
			;
    break;}
case 105:
#line 403 "parser.y"
{
				g_mesh = new rawray::TriangleMesh();
				
				// TODO: implement
				//g_objectMap[$2] = g_obj;
				
				delete yyvsp[-1].str;
			;
    break;}
case 106:
#line 412 "parser.y"
{
				g_scene->AddMesh( g_mesh );
				rawray::AddTrianglesOfMesh();
			;
    break;}
case 107:
#line 420 "parser.y"
{
				g_obj = new rawray::Sphere( math::Vector3(0), 1.0f, g_material );
			;
    break;}
case 108:
#line 424 "parser.y"
{
				g_scene->AddObject( g_obj );
				g_obj = NULL;
			;
    break;}
case 109:
#line 429 "parser.y"
{
				g_obj = new rawray::Sphere( math::Vector3(0), 1.0f, g_material );
				g_objectMap[yyvsp[-1].str] = g_obj;
				
				delete yyvsp[-1].str;
			;
    break;}
case 110:
#line 436 "parser.y"
{
				g_scene->AddObject( g_obj );
				g_obj = NULL;
			;
    break;}
case 111:
#line 444 "parser.y"
{
				g_obj = new rawray::BLPatch( g_material );
			;
    break;}
case 112:
#line 448 "parser.y"
{
				g_scene->AddObject( g_obj );
				g_obj = NULL;
			;
    break;}
case 113:
#line 453 "parser.y"
{
				g_obj = new rawray::BLPatch( g_material );
				g_objectMap[yyvsp[-1].str] = g_obj;
				
				delete yyvsp[-1].str;
			;
    break;}
case 114:
#line 460 "parser.y"
{
				g_scene->AddObject( g_obj );
				g_obj = NULL;
			;
    break;}
case 115:
#line 467 "parser.y"
{  ;
    break;}
case 116:
#line 468 "parser.y"
{  ;
    break;}
case 117:
#line 469 "parser.y"
{  ;
    break;}
case 118:
#line 470 "parser.y"
{  ;
    break;}
case 119:
#line 471 "parser.y"
{  ;
    break;}
case 120:
#line 475 "parser.y"
{ yyval.vec[0] = yyvsp[-5].real; yyval.vec[1] = yyvsp[-3].real; yyval.vec[2] = yyvsp[-1].real; ;
    break;}
case 121:
#line 476 "parser.y"
{ yyval.vec[0] = yyvsp[-5].real; yyval.vec[1] = yyvsp[-3].real; yyval.vec[2] = yyvsp[-1].integer; ;
    break;}
case 122:
#line 477 "parser.y"
{ yyval.vec[0] = yyvsp[-5].real; yyval.vec[1] = yyvsp[-3].integer; yyval.vec[2] = yyvsp[-1].real; ;
    break;}
case 123:
#line 478 "parser.y"
{ yyval.vec[0] = yyvsp[-5].real; yyval.vec[1] = yyvsp[-3].integer; yyval.vec[2] = yyvsp[-1].integer; ;
    break;}
case 124:
#line 479 "parser.y"
{ yyval.vec[0] = yyvsp[-5].integer; yyval.vec[1] = yyvsp[-3].real; yyval.vec[2] = yyvsp[-1].real; ;
    break;}
case 125:
#line 480 "parser.y"
{ yyval.vec[0] = yyvsp[-5].integer; yyval.vec[1] = yyvsp[-3].real; yyval.vec[2] = yyvsp[-1].integer; ;
    break;}
case 126:
#line 481 "parser.y"
{ yyval.vec[0] = yyvsp[-5].integer; yyval.vec[1] = yyvsp[-3].integer; yyval.vec[2] = yyvsp[-1].real; ;
    break;}
case 127:
#line 482 "parser.y"
{ yyval.vec[0] = yyvsp[-5].integer; yyval.vec[1] = yyvsp[-3].integer; yyval.vec[2] = yyvsp[-1].integer; ;
    break;}
case 128:
#line 483 "parser.y"
{ yyval.vec[0] = yyvsp[-1].real; yyval.vec[1] = yyvsp[-1].real; yyval.vec[2] = yyvsp[-1].real; ;
    break;}
case 129:
#line 484 "parser.y"
{ yyval.vec[0] = yyvsp[-1].integer; yyval.vec[1] = yyvsp[-1].integer; yyval.vec[2] = yyvsp[-1].integer; ;
    break;}
case 130:
#line 488 "parser.y"
{ yyval.vec[0] = yyvsp[-7].real; yyval.vec[1] = yyvsp[-5].real; yyval.vec[2] = yyvsp[-3].real; yyval.vec[3] = yyvsp[-1].real; ;
    break;}
case 131:
#line 489 "parser.y"
{ yyval.vec[0] = yyvsp[-7].real; yyval.vec[1] = yyvsp[-5].real; yyval.vec[2] = yyvsp[-3].real; yyval.vec[3] = yyvsp[-1].integer; ;
    break;}
case 132:
#line 490 "parser.y"
{ yyval.vec[0] = yyvsp[-7].real; yyval.vec[1] = yyvsp[-5].real; yyval.vec[2] = yyvsp[-3].integer; yyval.vec[3] = yyvsp[-1].real; ;
    break;}
case 133:
#line 491 "parser.y"
{ yyval.vec[0] = yyvsp[-7].real; yyval.vec[1] = yyvsp[-5].real; yyval.vec[2] = yyvsp[-3].integer; yyval.vec[3] = yyvsp[-1].integer; ;
    break;}
case 134:
#line 492 "parser.y"
{ yyval.vec[0] = yyvsp[-7].real; yyval.vec[1] = yyvsp[-5].integer; yyval.vec[2] = yyvsp[-3].real; yyval.vec[3] = yyvsp[-1].real; ;
    break;}
case 135:
#line 493 "parser.y"
{ yyval.vec[0] = yyvsp[-7].real; yyval.vec[1] = yyvsp[-5].integer; yyval.vec[2] = yyvsp[-3].real; yyval.vec[3] = yyvsp[-1].integer; ;
    break;}
case 136:
#line 494 "parser.y"
{ yyval.vec[0] = yyvsp[-7].real; yyval.vec[1] = yyvsp[-5].integer; yyval.vec[2] = yyvsp[-3].integer; yyval.vec[3] = yyvsp[-1].real; ;
    break;}
case 137:
#line 495 "parser.y"
{ yyval.vec[0] = yyvsp[-7].real; yyval.vec[1] = yyvsp[-5].integer; yyval.vec[2] = yyvsp[-3].integer; yyval.vec[3] = yyvsp[-1].integer; ;
    break;}
case 138:
#line 496 "parser.y"
{ yyval.vec[0] = yyvsp[-7].integer; yyval.vec[1] = yyvsp[-5].real; yyval.vec[2] = yyvsp[-3].real; yyval.vec[3] = yyvsp[-1].real; ;
    break;}
case 139:
#line 497 "parser.y"
{ yyval.vec[0] = yyvsp[-7].integer; yyval.vec[1] = yyvsp[-5].real; yyval.vec[2] = yyvsp[-3].real; yyval.vec[3] = yyvsp[-1].integer; ;
    break;}
case 140:
#line 498 "parser.y"
{ yyval.vec[0] = yyvsp[-7].integer; yyval.vec[1] = yyvsp[-5].real; yyval.vec[2] = yyvsp[-3].integer; yyval.vec[3] = yyvsp[-1].real; ;
    break;}
case 141:
#line 499 "parser.y"
{ yyval.vec[0] = yyvsp[-7].integer; yyval.vec[1] = yyvsp[-5].real; yyval.vec[2] = yyvsp[-3].integer; yyval.vec[3] = yyvsp[-1].integer; ;
    break;}
case 142:
#line 500 "parser.y"
{ yyval.vec[0] = yyvsp[-7].integer; yyval.vec[1] = yyvsp[-5].integer; yyval.vec[2] = yyvsp[-3].real; yyval.vec[3] = yyvsp[-1].real; ;
    break;}
case 143:
#line 501 "parser.y"
{ yyval.vec[0] = yyvsp[-7].integer; yyval.vec[1] = yyvsp[-5].integer; yyval.vec[2] = yyvsp[-3].real; yyval.vec[3] = yyvsp[-1].integer; ;
    break;}
case 144:
#line 502 "parser.y"
{ yyval.vec[0] = yyvsp[-7].integer; yyval.vec[1] = yyvsp[-5].integer; yyval.vec[2] = yyvsp[-3].integer; yyval.vec[3] = yyvsp[-1].real; ;
    break;}
case 145:
#line 503 "parser.y"
{ yyval.vec[0] = yyvsp[-7].integer; yyval.vec[1] = yyvsp[-5].integer; yyval.vec[2] = yyvsp[-3].integer; yyval.vec[3] = yyvsp[-1].integer; ;
    break;}
case 146:
#line 504 "parser.y"
{ yyval.vec[0] = yyvsp[-1].real; yyval.vec[1] = yyvsp[-1].real; yyval.vec[2] = yyvsp[-1].real; yyval.vec[3] = yyvsp[-1].real; ;
    break;}
case 147:
#line 505 "parser.y"
{ yyval.vec[0] = yyvsp[-1].integer; yyval.vec[1] = yyvsp[-1].integer; yyval.vec[2] = yyvsp[-1].integer; yyval.vec[3] = yyvsp[-1].integer; ;
    break;}
case 148:
#line 508 "parser.y"
{ yyval.real = yyvsp[0].real; ;
    break;}
case 149:
#line 509 "parser.y"
{ yyval.real = yyvsp[0].real; ;
    break;}
case 150:
#line 510 "parser.y"
{ yyval.real = yyvsp[0].real; ;
    break;}
case 151:
#line 511 "parser.y"
{ yyval.real = yyvsp[-2].real + yyvsp[0].real; ;
    break;}
case 152:
#line 512 "parser.y"
{ yyval.real = yyvsp[-2].real - yyvsp[0].real; ;
    break;}
case 153:
#line 513 "parser.y"
{ yyval.real = yyvsp[-2].real * yyvsp[0].real; ;
    break;}
case 154:
#line 514 "parser.y"
{ yyval.real = yyvsp[-2].real / yyvsp[0].real; ;
    break;}
case 155:
#line 515 "parser.y"
{ yyval.real = pow( (float)yyvsp[-2].real, (float)yyvsp[0].real ); ;
    break;}
case 156:
#line 516 "parser.y"
{ yyval.real = -yyvsp[0].real; ;
    break;}
case 157:
#line 517 "parser.y"
{ yyval.real = yyvsp[-1].real; ;
    break;}
case 158:
#line 521 "parser.y"
{ yyval.integer = yyvsp[0].integer; ;
    break;}
case 159:
#line 522 "parser.y"
{ yyval.integer = yyvsp[-2].integer + yyvsp[0].integer; ;
    break;}
case 160:
#line 523 "parser.y"
{ yyval.integer = yyvsp[-2].integer - yyvsp[0].integer; ;
    break;}
case 161:
#line 524 "parser.y"
{ yyval.integer = yyvsp[-2].integer * yyvsp[0].integer; ;
    break;}
case 162:
#line 525 "parser.y"
{ yyval.integer = yyvsp[-2].integer / yyvsp[0].integer; ;
    break;}
case 163:
#line 526 "parser.y"
{ yyval.integer = (int)pow( (float)yyvsp[-2].integer, (float)yyvsp[0].integer ); ;
    break;}
case 164:
#line 527 "parser.y"
{ yyval.integer = -yyvsp[0].integer; ;
    break;}
case 165:
#line 528 "parser.y"
{ yyval.integer = yyvsp[-1].integer; ;
    break;}
case 166:
#line 532 "parser.y"
{yyval.real = sin(yyvsp[-1].real); ;
    break;}
case 167:
#line 533 "parser.y"
{yyval.real = sin((float)yyvsp[-1].integer); ;
    break;}
case 168:
#line 534 "parser.y"
{yyval.real = cos(yyvsp[-1].real); ;
    break;}
case 169:
#line 535 "parser.y"
{yyval.real = cos((float)yyvsp[-1].integer); ;
    break;}
case 170:
#line 536 "parser.y"
{yyval.real = tan(yyvsp[-1].real); ;
    break;}
case 171:
#line 537 "parser.y"
{yyval.real = tan((float)yyvsp[-1].integer); ;
    break;}
case 172:
#line 538 "parser.y"
{yyval.real = asin(yyvsp[-1].real); ;
    break;}
case 173:
#line 539 "parser.y"
{yyval.real = asin((float)yyvsp[-1].integer); ;
    break;}
case 174:
#line 540 "parser.y"
{yyval.real = acos(yyvsp[-1].real); ;
    break;}
case 175:
#line 541 "parser.y"
{yyval.real = acos((float)yyvsp[-1].integer); ;
    break;}
case 176:
#line 542 "parser.y"
{yyval.real = atan(yyvsp[-1].real); ;
    break;}
case 177:
#line 543 "parser.y"
{yyval.real = atan((float)yyvsp[-1].integer); ;
    break;}
case 178:
#line 544 "parser.y"
{yyval.real = log(yyvsp[-1].real); ;
    break;}
case 179:
#line 545 "parser.y"
{yyval.real = log((float)yyvsp[-1].integer); ;
    break;}
case 180:
#line 546 "parser.y"
{yyval.real = log10(yyvsp[-1].real); ;
    break;}
case 181:
#line 547 "parser.y"
{yyval.real = log10((float)yyvsp[-1].integer); ;
    break;}
case 182:
#line 548 "parser.y"
{yyval.real = exp(yyvsp[-1].real); ;
    break;}
case 183:
#line 549 "parser.y"
{yyval.real = exp((float)yyvsp[-1].integer); ;
    break;}
case 184:
#line 550 "parser.y"
{yyval.real = sqrt(yyvsp[-1].real); ;
    break;}
case 185:
#line 551 "parser.y"
{yyval.real = sqrt((float)yyvsp[-1].integer); ;
    break;}
case 186:
#line 555 "parser.y"
{ yyval.real = 2.718281828459f; ;
    break;}
case 187:
#line 556 "parser.y"
{ yyval.real = 3.141592653589793f; ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 487 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 560 "parser.y"


//Additional C code

namespace rawray {

void AddTrianglesOfMesh() {
    for( uint32 i=0; i<g_mesh->GetNumTriangles(); ++i ) {
        Triangle* t = rawray::TriangleFactory::NewTriangle( *g_mesh, i, g_material );
        g_scene->AddObject( t );
    }
    
    g_mesh = NULL;
}

void SetConfigSources(Scene* scene, Camera* cam, Image* img) {
    g_scene = scene;
    g_camera = cam;
    g_image = img;
}

bool ConfigParser(const char* filename) {
#ifdef YYDEBUG
#if YYDEBUG==1
    yydebug = 1;
#endif
#endif
    
    if( !g_scene || !g_camera || !g_image )
        return false;
    
    yyin = fopen( filename, "r" );
    if( !yyin )
        return false;

    yyparse();
    fclose( yyin );

	return yyerr == 0;
}

void DoneParsing() {
	yy_done_parsing();
}

} // namespace rawray
