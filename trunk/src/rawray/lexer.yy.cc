#line 2 "lexer.yy.cc"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern int yylineno;
int yylineno = 1;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 152
#define YY_END_OF_BUFFER 153
static yyconst short int yy_acclist[472] =
    {   0,
      153,  151,  152,  149,  151,  152,   33,  152,  151,  152,
      150,  151,  152,  151,  152,   22,  151,  152,   23,  151,
      152,   28,  151,  152,   26,  151,  152,   24,  149,  151,
      152,   27,  151,  152,  148,  151,  152,   29,  151,  152,
      147,  151,  152,   16,  151,  152,   25,  151,  152,   17,
      151,  152,   18,  151,  152,   31,  151,  152,   19,  151,
      152,   30,  151,  152,  151,  152,  151,  152,  151,  152,
      151,  152,   14,  151,  152,  151,  152,  151,  152,  151,
      152,  151,  152,  151,  152,  151,  152,  151,  152,   32,
      151,  152,   20,  151,  152,   21,  151,  152,  152,  149,

      152,  152,  150,  152,  152,   22,  152,   23,  152,   28,
      152,   26,  152,   24,  149,  152,   27,  152,  148,  152,
       29,  152,  147,  152,   16,  152,   25,  152,   17,  152,
       18,  152,   31,  152,   19,  152,   30,  152,  152,  152,
      152,  152,   14,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,   32,  152,   20,  152,   21,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,

      152,  152,  152,  123,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  149,
      146,  150,   22,   23,   28,   26,   24,  149,   27,  148,
      148,   29,  147,  148,  147,   16,   25,   17,   18,   31,
       19,   30,   14,   10,   69,   15,   20,   21,   64,   97,
       98,  123,    3,   12,   10,   11,   69,   15,    4,    5,
       36,   62,   65,   61,   64,   89,   99,   97,   98,   93,
      127,  133,  134,  135,  136,  141,    6,    7,    8,    3,
       12,   11,   81,    4,   13,    5,   36,   35,   62,   65,
       61,   82,   89,   99,   93,  127,  133,  134,  135,  136,

      141,  140,    6,    7,    8,    9,   85,   81,   13,   35,
       82,   86,   90,  100,   94,  110,  112,  111,  113,  121,
      122,  140,  145,    9,   60,    1,   34,   85,  139,  129,
       58,   55,   66,   63,   86,   87,   88,   90,  100,  103,
       94,  110,  112,  111,  113,  121,  128,  122,  124,  125,
      130,  131,  143,  145,  132,   60,    2,    1,   34,  139,
      129,   56,   58,   55,   54,   66,   63,   68,   67,   87,
       88,   91,  103,  101,   95,  106,  120,  107,  128,  124,
      125,  130,  131,  143,  132,    2,   83,  104,   56,   50,
       54,   84,   91,  101,   95,  106,  120,  107,   72,   83,

      104,   59,   50,   84,  114,  115,  126,   76,  144,   43,
       57,   52,   92,  102,   96,  116,  118,  114,  117,  119,
      115,  126,   77,  144,   53,   57,   92,  102,   96,  116,
      118,  117,  119,  137,  138,   75,   80,  142,   53,   39,
       42,   51,  137,  138,   78,   71,  142,  105,   39,   44,
       51,  105,   41,   48,   37,   38,  108,  109,   40,   37,
       38,  108,  109,   79,   70,   49,   46,   74,   73,   45,
       47
    } ;

static yyconst short int yy_accept[1073] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        4,    7,    9,   11,   14,   16,   19,   22,   25,   28,
       32,   35,   38,   41,   44,   47,   50,   53,   56,   59,
       62,   65,   67,   69,   71,   73,   76,   78,   80,   82,
       84,   86,   88,   90,   93,   96,   99,  100,  102,  103,
      105,  106,  108,  110,  112,  114,  117,  119,  121,  123,

      125,  127,  129,  131,  133,  135,  137,  139,  140,  141,
      142,  143,  145,  146,  147,  148,  149,  150,  151,  152,
      153,  154,  155,  156,  158,  160,  162,  163,  164,  165,
      166,  167,  168,  169,  170,  171,  172,  173,  174,  175,
      176,  177,  178,  179,  180,  181,  182,  183,  184,  185,
      186,  187,  188,  189,  190,  191,  192,  193,  194,  195,
      196,  197,  198,  199,  200,  201,  202,  203,  204,  206,
      207,  208,  209,  210,  211,  212,  213,  214,  215,  216,
      217,  218,  219,  220,  221,  221,  222,  223,  223,  224,
      225,  226,  227,  229,  230,  231,  232,  233,  234,  235,

      236,  237,  238,  239,  240,  241,  242,  243,  243,  243,
      243,  243,  243,  243,  243,  244,  244,  244,  244,  244,
      244,  245,  245,  245,  245,  245,  246,  247,  247,  247,
      247,  247,  248,  249,  249,  249,  249,  249,  249,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  249,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  249,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  251,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  253,  253,  253,  253,  253,  253,

      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  254,
      254,  254,  255,  255,  255,  255,  256,  257,  257,  257,
      257,  258,  259,  260,  260,  260,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  262,  262,  262,  262,  262,  262,  262,  263,
      264,  264,  264,  264,  265,  266,  266,  266,  266,  266,
      266,  266,  266,  267,  267,  267,  267,  268,  268,  268,
      268,  268,  269,  270,  271,  271,  271,  271,  271,  271,
      271,  271,  271,  271,  271,  271,  271,  271,  271,  271,

      271,  271,  272,  272,  272,  273,  274,  275,  276,  276,
      276,  276,  276,  277,  277,  277,  277,  277,  277,  278,
      279,  280,  280,  280,  281,  281,  281,  282,  282,  282,
      282,  283,  283,  283,  284,  284,  285,  285,  286,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  287,
      287,  287,  287,  287,  287,  287,  287,  288,  288,  288,
      289,  289,  289,  289,  290,  291,  291,  291,  291,  291,
      291,  292,  293,  293,  293,  293,  293,  293,  293,  293,
      294,  294,  294,  294,  294,  295,  295,  295,  295,  295,
      295,  296,  296,  296,  296,  296,  296,  296,  296,  296,

      296,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      296,  297,  297,  297,  298,  299,  300,  301,  301,  301,
      301,  301,  302,  303,  303,  303,  303,  303,  303,  304,
      305,  306,  307,  307,  307,  307,  307,  307,  307,  308,
      308,  308,  309,  309,  309,  310,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  310,  310,  311,  311,  311,  311,  311,  311,  311,
      311,  312,  312,  313,  313,  313,  314,  314,  314,  315,
      315,  315,  315,  316,  316,  316,  316,  316,  317,  317,
      317,  318,  318,  318,  318,  319,  319,  319,  320,  321,

      321,  322,  322,  322,  322,  322,  322,  322,  322,  322,
      323,  323,  324,  324,  324,  325,  325,  326,  326,  327,
      328,  328,  329,  329,  330,  330,  331,  331,  331,  331,
      331,  331,  331,  331,  332,  332,  332,  332,  332,  333,
      333,  333,  333,  333,  333,  333,  333,  334,  335,  335,
      335,  335,  336,  337,  338,  339,  339,  339,  340,  340,
      341,  341,  342,  342,  342,  342,  342,  343,  343,  343,
      344,  344,  344,  344,  344,  345,  345,  345,  346,  346,
      347,  348,  349,  349,  350,  351,  351,  352,  353,  353,
      353,  353,  353,  354,  355,  355,  355,  356,  357,  358,

      359,  360,  360,  360,  361,  361,  362,  362,  362,  363,
      363,  363,  363,  363,  364,  364,  364,  364,  365,  365,
      365,  365,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  367,  368,  369,  370,  370,  371,  372,  372,  373,
      373,  374,  375,  375,  376,  377,  377,  377,  377,  377,
      378,  379,  379,  379,  379,  379,  380,  381,  382,  382,
      383,  384,  384,  384,  384,  384,  384,  384,  384,  384,
      384,  384,  384,  384,  385,  385,  385,  386,  387,  388,
      389,  389,  389,  389,  390,  390,  390,  390,  390,  391,
      391,  391,  391,  391,  392,  392,  392,  392,  392,  392,

      392,  393,  393,  394,  394,  395,  395,  396,  397,  397,
      397,  397,  397,  398,  399,  399,  399,  399,  399,  399,
      399,  399,  399,  400,  400,  400,  400,  400,  400,  400,
      400,  400,  400,  400,  400,  401,  402,  402,  403,  403,
      403,  403,  403,  403,  403,  403,  403,  403,  404,  404,
      404,  404,  404,  404,  404,  404,  404,  404,  404,  404,
      405,  405,  405,  405,  405,  405,  405,  405,  406,  406,
      406,  406,  406,  407,  408,  408,  408,  408,  408,  408,
      408,  408,  409,  409,  409,  409,  409,  409,  410,  410,
      410,  410,  410,  410,  410,  410,  410,  410,  411,  412,

      413,  413,  413,  413,  413,  413,  413,  414,  415,  416,
      416,  417,  418,  419,  419,  420,  421,  422,  423,  423,
      423,  424,  424,  424,  424,  424,  424,  424,  424,  424,
      424,  424,  424,  424,  424,  425,  425,  426,  426,  426,
      426,  426,  426,  426,  426,  427,  427,  427,  427,  427,
      427,  428,  429,  430,  430,  431,  432,  432,  433,  434,
      435,  436,  436,  436,  436,  436,  437,  438,  438,  438,
      439,  439,  440,  440,  441,  442,  442,  442,  442,  442,
      442,  442,  442,  442,  443,  443,  443,  444,  445,  445,
      445,  445,  446,  446,  447,  448,  449,  449,  449,  449,

      450,  450,  450,  450,  450,  450,  450,  450,  450,  451,
      452,  452,  452,  452,  452,  452,  452,  453,  453,  453,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  454,  454,  454,  455,  455,  455,  456,  457,  457,
      457,  457,  457,  458,  459,  459,  459,  459,  459,  459,
      460,  461,  462,  462,  462,  462,  463,  464,  464,  464,
      465,  466,  467,  467,  467,  468,  469,  470,  471,  471,
      472,  472
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
       19,   19,   19,   19,   19,   19,   19,    1,    1,   20,
       21,   22,    1,    1,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       23,   24,   25,   26,    1,    1,   27,   28,   29,   30,

       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,   53,    1,   54,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[55] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1
    } ;

static yyconst short int yy_base[1075] =
    {   0,
        0,    0,   54,    0,   82,    0,  103,  116,  129,  142,
      155,  168,  181,  195,  216,  239,  262,    0,  268,  274,
      290,  298,  321,  344,  315,  338,  352,  362,  368,  374,
      380,  386,  392,  398,  404,  410,  416,  426,  434,  440,
      448,  458,  470,  480,  488,  498,  506,  512, 1625, 1626,
      132, 1626, 1619,    0, 1616, 1620, 1619, 1618, 1617,  135,
     1616,  233, 1615,  549, 1614, 1613, 1612, 1611, 1610, 1609,
     1608,  120, 1571,   84, 1573,  181, 1569, 1566,   78,  126,
      116,  135, 1578, 1626, 1602, 1601, 1626,  212, 1597,    0,
     1594, 1598, 1597, 1596, 1595,  255, 1594,  555, 1593,  562,

     1592, 1591, 1590, 1589, 1588, 1587, 1586,  146,  111, 1546,
     1551,  230,  152,  173, 1546,  177, 1543, 1536, 1554,  203,
     1550,  218,  249, 1626, 1578, 1577,  253, 1543, 1536,  189,
      237,  164,  252, 1549, 1533,  276, 1539,  233, 1542,  249,
      294, 1531, 1524,  272, 1543, 1528, 1521,  311, 1540, 1539,
     1524, 1517,  542, 1536, 1527, 1521,  319, 1529,  458,  546,
     1524, 1518,  334, 1526,  547, 1515, 1524, 1513, 1551, 1511,
      555, 1510,  244, 1523,  360,  207,  210,  358,  429,  396,
     1508,  567,  297,  509, 1543, 1626,    0, 1540, 1544, 1543,
     1542, 1541,  585, 1540, 1539,  597, 1538, 1537,  601,  607,

     1536, 1535, 1534, 1533, 1532, 1531, 1530, 1490, 1495, 1502,
     1486, 1488, 1481, 1480, 1522, 1496, 1480, 1480, 1475, 1486,
     1516, 1484, 1470, 1470, 1476, 1511, 1510, 1471, 1476, 1465,
     1468, 1505, 1504, 1459, 1460, 1453, 1455,  560, 1457, 1473,
     1472, 1460, 1458, 1460, 1448, 1449, 1452, 1452,  320, 1447,
     1455,  348,  441, 1441,  372, 1438, 1447, 1441, 1483,  440,
     1443, 1448, 1448,  447,  362, 1442, 1435, 1433,  478, 1439,
     1432, 1446, 1429,  584, 1435, 1471, 1470, 1426, 1424,  313,
     1439, 1427, 1435, 1425, 1437,  317, 1434, 1422, 1430, 1420,
      589, 1425,  590, 1457,  592, 1416, 1413, 1416, 1425,  553,

      590,  524, 1413,  529, 1412,  282, 1417, 1409, 1405, 1403,
     1421, 1401, 1419, 1400, 1404, 1403, 1415, 1410, 1438, 1412,
     1410, 1435, 1408, 1389, 1400, 1431, 1430,  418, 1397, 1384,
     1427, 1426, 1425, 1395, 1379, 1422, 1388, 1371,  609, 1376,
      629, 1393, 1388, 1376,  606, 1387, 1383, 1377,  329, 1383,
     1384, 1410, 1375, 1380, 1378, 1377, 1380, 1375, 1403, 1402,
     1366,  610,  630, 1400, 1399, 1370, 1360, 1358, 1366, 1369,
     1354,  631, 1392, 1347, 1351,  634, 1389, 1355, 1343, 1347,
      637, 1385, 1384, 1383, 1338, 1351, 1347, 1341,  501, 1340,
     1344, 1346, 1342, 1336,  603, 1335, 1333, 1340, 1331, 1330,

     1332, 1367, 1322, 1332, 1364, 1363, 1362, 1361, 1322, 1321,
     1329, 1315, 1356, 1323, 1329, 1317,  129, 1314, 1351, 1350,
      640, 1305, 1306, 1347, 1320, 1309, 1344, 1318, 1317, 1297,
     1340, 1297, 1305, 1337, 1303, 1335, 1292, 1333, 1332,  641,
     1304,  642, 1291, 1286, 1301, 1289, 1294,  643, 1295, 1288,
     1294, 1293,  644, 1289, 1293, 1284, 1318, 1288, 1287, 1315,
     1289, 1275, 1285, 1311, 1310,  648,  647, 1267,  650, 1266,
     1307, 1306, 1276, 1260, 1261, 1260, 1259,  649, 1275, 1299,
     1273, 1255,  651, 1271, 1295, 1249, 1268, 1250,  652, 1266,
     1290, 1264, 1243, 1245, 1255, 1256, 1259, 1254, 1253, 1236,

     1238, 1248, 1249, 1252, 1247, 1233, 1242, 1231, 1230, 1238,
     1270, 1240, 1223, 1267, 1266, 1265, 1264, 1220, 1219, 1223,
     1235, 1259, 1258, 1213, 1227,  501, 1227, 1211, 1253, 1252,
     1251, 1250, 1222, 1223, 1211, 1217, 1209, 1206, 1243, 1209,
     1193, 1240, 1202, 1209, 1237,  654, 1200, 1206, 1191, 1200,
     1197, 1203, 1201, 1192, 1199,  659, 1185, 1184, 1181, 1195,
     1196, 1180, 1221, 1192, 1188, 1174,  657, 1173, 1191, 1190,
     1214, 1169, 1212, 1182, 1181, 1209, 1171, 1176, 1206, 1168,
     1161, 1172, 1202, 1164, 1169, 1156, 1169, 1197, 1169, 1168,
      660, 1156, 1150, 1163, 1191, 1163, 1162,  661, 1188, 1143,

     1186,  665, 1141, 1142, 1140, 1138, 1137, 1130, 1143, 1178,
     1148, 1176, 1146, 1138, 1173, 1140, 1171, 1141, 1169, 1168,
     1140, 1166, 1140, 1164, 1138, 1162, 1128, 1122, 1115, 1133,
     1126, 1127, 1113, 1154, 1110,  667, 1127, 1112, 1150, 1120,
      676, 1106, 1103,  664,  160, 1110, 1145, 1144, 1096, 1095,
     1099, 1135, 1134, 1133, 1132, 1091, 1101, 1129, 1088, 1127,
     1097, 1125, 1084, 1094, 1093, 1094, 1119,   94,  114,  258,
      215,  250,  354,  428,  477,  435,  503,  584,  548,  653,
      662,  663,  684,  668,  670,  636,  698,  699,  658,  659,
      702,  704,  705,  706,  673,  687,  713,  714,  715,  716,

      717,  689,  683,  720,  677,  722,  698,  680,  725,  688,
      685,  687,  702,  732,  690,  707,  693,  736,  712,  738,
      702,  743,  714,  748,  724,  710,  719,  752,  714,  725,
      755,  756, 1626, 1626,  708,  758,  759,  724,  761,  726,
      763,  764,  730,  767,  768,  725,  737,  738,  735,  773,
      774,  731,  743,  744,  741,  779,  781,  782,  755,  784,
      785,  762,  763,  789,  761,  749,  769,  750,  771,  764,
      798,  754,  775,  801,  760,  761,  806,  807,  809,  810,
      782,  769,  771,  814,  816,  779,  819,  820,  821,  787,
      794,  796,  782,  828,  790,  792,  800,  792,  809,  837,

      838,  810,  841,  814,  844,  817,  847,  848,  849,  804,
      805,  812,  853,  854,  856,  811,  812,  819,  831,  828,
      829,  820, 1626,  817,  828,  830,  840,  830,  839,  846,
      835,  845,  841,  846,  876,  878,  837, 1626,  847,  882,
      847,  840,  886,  861,  855,  889,  861,  891,  861,  862,
      851,  851,  858,  869,  860,  870,  900,  901,  873,  903,
      861,  862,  863,  907,  876,  881,  882,  913,  914,  882,
      887,  888,  918,  919,  882,  883,  898,  924,  925,  926,
      894, 1626,  891,  887,  930,  898,  889,  934,  903,  910,
      893,  901,  901,  910,  917,  904,  905, 1626,  948, 1626,

      913,  914,  926,  954,  922,  913,  957,  958,  959,  930,
      961,  962,  963,  934,  965,  966,  967,  968,  926,  927,
     1626,  972,  941,  975,  943,  977,  938,  934,  955,  937,
      982,  943,  939,  936,  986,  962,  988,  947,  962,  943,
      960,  949,  955,  956,  996,  969,  960,  973,  952,  960,
     1005, 1006, 1007,  978, 1009, 1010,  981, 1012, 1013, 1014,
     1015,  973,  974,  986,  976, 1626, 1626,  989,  979, 1023,
      988, 1026, 1027, 1028, 1626,  985,  997,  986,  987,  991,
     1007, 1035, 1007, 1037,  993,  994, 1040, 1041,  998,  999,
     1015, 1626, 1016, 1626, 1046, 1047, 1048, 1024, 1017, 1051,

     1009, 1014, 1016, 1017, 1056, 1022, 1058, 1023, 1626, 1060,
     1018, 1019, 1038, 1040, 1024, 1025, 1068, 1021, 1040, 1626,
     1034, 1045, 1046, 1075, 1040, 1077, 1050, 1051, 1052, 1044,
     1045, 1055, 1057, 1626, 1050, 1045, 1089, 1090, 1063, 1093,
     1058, 1066, 1096, 1097, 1071, 1073, 1059, 1060, 1079, 1626,
     1105, 1106, 1078, 1079, 1069, 1110, 1111, 1083, 1084, 1626,
     1626, 1626, 1074, 1086, 1626, 1626, 1626, 1626, 1076, 1626,
     1626, 1138, 1118, 1140
    } ;

static yyconst short int yy_def[1075] =
    {   0,
     1071,    1, 1071,    3,    3,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17, 1071, 1071,
     1071, 1071, 1072, 1073, 1074, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1072, 1073,
     1074, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,

     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1072, 1071, 1073, 1074, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,

     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,

     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,

     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,

     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,

     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,

     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,

     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,

     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,

     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
        0, 1071, 1071, 1071
    } ;

static yyconst short int yy_nxt[1681] =
    {   0,
       50,   51,   52,   51,   53,   54,   55,   56,   57,   58,
       59,   60,   61,   62,   63,   64,   64,   64,   64,   65,
       66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
       76,   50,   77,   50,   78,   50,   50,   79,   80,   50,
       50,   81,   50,   50,   82,   83,   50,   50,   50,   84,
       50,   50,   85,   86,   87,   88,   52,   88,   89,   90,
       91,   92,   93,   94,   95,   96,   97,   98,   99,  100,
      100,  100,  100,  101,  102,  103,  104,  105,  106,  107,
      108,  109,  110,  111,  112,   87,  113,  114,  115,   87,
       87,  116,  117,  118,  119,  120,   87,  121,  122,  123,

       87,   87,   87,  124,   87,   87,  125,  126,  127,   87,
      212,  128,  220,  129,   87,   87,   87,  221,  222,  130,
      131,   87,   87,  132,  213,   87,  133,  134,  135,  136,
      526,  226,  111,  184,   87,  184,  193,  235,  184,  747,
      116,   87,  136,  184,  137,  111,  184,   87,  208,   87,
      227,  236,  223,  116,   87,  136,  224,  137,  111,  748,
       87,  728,   87,  527,  209,  210,  138,   87,  136,  228,
      137,  111,  225,   87,  208,   87,  229,  230,  237,  138,
       87,  136,  215,  137,  111,  234,   87,  139,   87,  238,
      209,  210,  116,   87,  136,  729,  137,  111,  227,   87,

      139,   87,  239,  240,  258,  116,   87,  136,  302,  137,
      111,  304,   87,  184,   87,  184,  221,  222,  116,   87,
      216,  136,  140,  184,  111,  141,   87,   87,  221,  255,
      217,  215,  116,   87,  195,  303,  140,  227,  305,  141,
      245,   87,  136,  246,  142,  111,  247,   87,  196,  196,
      196,  196,  249,  116,   87,  143,  193,  144,  184,  670,
      230,  749,   87,  256,  145,  136,  184,  142,  111,  216,
       87,  257,  221,  260,  298,  231,  116,   87,  143,  217,
      144,  208,  250,  227,  213,   87,  228,  145,  136,  262,
      146,  111,  251,   87,  230,  750,  151,  252,  210,  116,

       87,  147,  151,  148,  208,  149,  227,  152,   87,  153,
      150,   87,  267,  152,  327,  153,  154,   87,  110,  155,
      209,  210,  154,  231,  156,  411,  110,  155,  228,   87,
      453,  157,  156,  158,  159,  263,  264,   87,   87,  157,
      313,  158,  159,  166,  386,  227,   87,  160,  392,  110,
      161,  271,  282,  227,   87,  162,  137,  320,   87,  333,
       87,  320,  163,   87,  164,  165,  166,  288,  227,   87,
      160,  355,  110,  161,  454,  300,  301,   87,  162,  137,
      110,   87,  315,   87,  751,  163,   87,  164,  165,  358,
      110,   87,   87,  137,  227,   87,  168,  221,  306,  371,

      167,   87,  168,  137,  327,   87,  319,  169,  170,  137,
      167,   87,  361,  169,  170,  137,   87,   87,  171,   87,
      110,  137,   87,   87,  171,   87,  110,  137,   87,   87,
      227,   87,  110,  137,   87,   87,  308,   87,  110,  137,
       87,   87,  309,   87,  110,  137,   87,   87,  432,   87,
      172,  137,   87,   87,  110,   87,  752,  137,   87,   87,
      172,  433,  173,  228,   87,   87,  366,  137,  173,   87,
      307,  230,  327,   87,   87,  137,  110,  174,  675,   87,
      753,  137,   87,  174,  359,  320,  110,   87,   87,  175,
      335,   87,  228,  370,  176,  177,   87,   87,  110,  175,

      230,   87,  526,  284,  176,  177,   87,  178,  110,   87,
      184,  137,  184,   87,  179,  375,  110,  178,   87,   87,
      184,  137,  319,   87,  179,  302,  110,   87,   87,  180,
      304,  181,  182,  183,  110,  527,   87,   87,  496,  180,
      110,  181,  182,  183,  497,   87,   87,  137,  754,   87,
      198,   87,  303,  137,   87,   87,  195,  305,  276,  277,
       87,  341,  199,  198,  200,  200,  200,  200,  405,  406,
      196,  196,  196,  196,  208,  199,  227,  200,  200,  200,
      200,  228,  278,  208,  285,  678,  193,  342,  184,  230,
      209,  210,  290,  296,  755,  311,  184,  312,  195,  209,

      210,  228,  195,  343,  344,  407,  408,  448,  198,  230,
      442,  467,  196,  196,  196,  196,  196,  196,  196,  196,
      199,  380,  200,  200,  200,  200,  397,  399,  319,  400,
      341,  469,  478,  319,  319,  483,  319,  443,  489,  468,
      503,  531,  546,  442,  448,  453,  504,  449,  467,  567,
      478,  469,  483,  489,  680,  546,  342,  532,  567,  470,
      636,  670,  678,  756,  682,  724,  683,  547,  636,  757,
      443,  758,  343,  344,  568,  479,  468,  720,  484,  470,
      547,  490,  759,  568,  449,  683,  637,  671,  679,  454,
      638,  684,  685,  479,  637,  484,  490,  725,  638,  760,

      761,  762,  763,  764,  721,  771,  774,  694,  726,  727,
      684,  685,  775,  776,  777,  698,  778,  700,  701,  779,
      780,  704,  781,  706,  782,  783,  784,  785,  786,  765,
      787,  766,  788,  714,  789,  790,  791,  718,  792,  720,
      767,  768,  793,  772,  794,  769,  770,  773,  795,  724,
      796,  797,  798,  728,  799,  800,  731,  732,  801,  736,
      737,  802,  803,  804,  741,  805,  721,  806,  807,  808,
      809,  810,  811,  812,  813,  814,  815,  816,  817,  818,
      756,  725,  757,  758,  819,  760,  761,  729,  820,  821,
      764,  822,  726,  727,  823,  824,  826,  827,  829,  771,

      831,  832,  774,  825,  828,  833,  834,  777,  778,  830,
      835,  836,  837,  838,  839,  784,  765,  840,  766,  842,
      843,  846,  848,  849,  850,  851,  852,  767,  768,  794,
      853,  854,  769,  770,  855,  856,  857,  772,  858,  860,
      861,  773,  803,  841,  862,  805,  844,  863,  807,  808,
      864,  866,  867,  868,  813,  814,  845,  869,  871,  872,
      873,  874,  875,  876,  847,  877,  878,  879,  880,  881,
      882,  883,  884,  885,  886,  887,  888,  835,  865,  836,
      889,  890,  859,  840,  891,  870,  892,  843,  893,  894,
      846,  895,  848,  896,  897,  898,  899,  900,  901,  902,

      903,  904,  858,  906,  860,  907,  908,  909,  864,  841,
      910,  911,  912,  844,  913,  869,  914,  915,  916,  917,
      918,  919,  920,  845,  921,  922,  924,  926,  928,  929,
      930,  931,  933,  847,  934,  935,  865,  936,  937,  938,
      939,  940,  941,  870,  905,  942,  859,  943,  944,  945,
      946,  947,  948,  923,  925,  904,  949,  950,  951,  952,
      953,  954,  955,  956,  913,  957,  958,  959,  917,  918,
      927,  960,  961,  922,  932,  962,  924,  963,  926,  964,
      965,  966,  967,  931,  968,  969,  970,  935,  971,  972,
      973,  974,  975,  976,  977,  978,  979,  945,  905,  980,

      981,  923,  982,  983,  925,  984,  951,  952,  953,  985,
      955,  956,  986,  958,  959,  987,  988,  989,  990,  991,
      992,  927,  993,  994,  995,  996,  932,  972,  997, 1000,
     1001, 1002, 1003, 1004, 1005, 1006, 1007, 1009, 1010, 1011,
     1012,  987,  988, 1013, 1014, 1015, 1016,  995, 1017,  997,
     1018, 1019, 1000, 1020, 1021, 1022, 1023, 1024, 1026, 1007,
     1027, 1010, 1028, 1029, 1030,  998, 1031, 1032, 1033, 1017,
     1034,  999, 1035, 1036, 1037, 1038, 1024, 1039, 1040, 1008,
     1042, 1043, 1044, 1045, 1046, 1047,  998, 1048, 1049, 1050,
     1051, 1052,  999, 1053, 1040, 1054, 1055, 1056, 1057, 1058,

     1025, 1059, 1008, 1060, 1061, 1062, 1051, 1052, 1063, 1064,
     1065, 1056, 1057, 1066, 1067, 1068, 1069, 1070,  187, 1025,
      667, 1041,  746,  745,  744,  743,  662,  742,  741,  740,
      658,  739,  738,  655,  737,  736,  652, 1041,  185,  185,
      188,  188,  735,  734,  733,  732,  731,  730,  723,  722,
      719,  718,  717,  716,  715,  714,  713,  712,  711,  710,
      709,  708,  707,  706,  705,  704,  703,  622,  702,  701,
      700,  699,  698,  697,  615,  696,  695,  694,  693,  610,
      692,  691,  690,  689,  688,  687,  686,  682,  681,  680,
      677,  676,  675,  674,  673,  672,  669,  668,  667,  666,

      665,  664,  663,  662,  661,  660,  659,  658,  657,  656,
      655,  654,  653,  652,  651,  571,  650,  649,  648,  647,
      646,  645,  563,  644,  643,  642,  641,  640,  639,  635,
      634,  633,  632,  631,  630,  629,  628,  627,  545,  626,
      625,  542,  624,  623,  622,  621,  620,  619,  618,  617,
      616,  615,  531,  530,  529,  614,  613,  612,  611,  610,
      522,  609,  608,  607,  606,  517,  516,  515,  514,  605,
      604,  511,  603,  602,  601,  600,  599,  598,  597,  596,
      595,  594,  593,  592,  591,  590,  589,  588,  587,  586,
      585,  491,  584,  583,  582,  581,  485,  580,  579,  578,

      480,  577,  576,  575,  574,  573,  572,  571,  471,  570,
      569,  465,  464,  566,  565,  564,  563,  562,  561,  457,
      560,  559,  558,  557,  556,  555,  554,  553,  552,  551,
      550,  549,  548,  439,  545,  544,  436,  543,  542,  541,
      540,  431,  539,  538,  537,  427,  536,  535,  424,  534,
      533,  530,  529,  528,  525,  524,  523,  522,  521,  520,
      519,  518,  517,  516,  515,  514,  513,  512,  511,  510,
      509,  508,  507,  506,  505,  502,  501,  500,  499,  498,
      495,  494,  493,  492,  491,  383,  382,  488,  487,  486,
      485,  482,  481,  480,  477,  476,  475,  474,  473,  472,

      365,  471,  466,  465,  464,  463,  462,  461,  460,  459,
      458,  457,  456,  455,  452,  451,  450,  447,  446,  445,
      444,  441,  440,  439,  438,  437,  436,  332,  331,  435,
      434,  431,  326,  430,  429,  428,  427,  426,  425,  424,
      423,  422,  421,  420,  419,  418,  417,  416,  415,  414,
      413,  412,  410,  409,  404,  403,  402,  401,  294,  398,
      396,  395,  394,  393,  391,  390,  389,  388,  387,  385,
      384,  383,  382,  381,  379,  378,  377,  376,  374,  373,
      372,  369,  368,  367,  365,  364,  363,  362,  360,  357,
      356,  354,  353,  352,  351,  350,  349,  348,  347,  346,

      345,  340,  339,  338,  337,  233,  232,  336,  335,  334,
      333,  332,  331,  330,  329,  328,  327,  326,  325,  324,
      323,  322,  321,  215,  320,  319,  318,  317,  316,  315,
      314,  207,  206,  205,  204,  203,  202,  201,  198,  197,
      195,  194,  192,  191,  190,  189,  186,  186,  310,  299,
      297,  295,  294,  293,  292,  291,  289,  287,  286,  283,
      281,  280,  279,  275,  274,  273,  272,  270,  269,  268,
      266,  265,  261,  227,  259,  231,  254,  253,  233,  232,
      248,  244,  243,  242,  241,  214,  213,  207,  206,  205,
      204,  203,  202,  201,  197,  194,  192,  191,  190,  189,

      186,  186,  233,  232,  231,  219,  218,  214,  211,  207,
      206,  205,  204,  203,  202,  201,  197,  194,  192,  191,
      190,  189,  186,  186, 1071,   49, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071
    } ;

static yyconst short int yy_chk[1681] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    5,    5,
       74,    5,   79,    5,    5,    5,    5,   79,   79,    5,
        5,    5,    5,    5,   74,    5,    5,    5,    5,    7,
      417,   81,    7,   51,    7,   51,   60,  109,   60,  668,
        7,    7,    8,   51,    7,    8,   60,    8,   72,    7,
       81,  109,   80,    8,    8,    9,   80,    8,    9,  669,
        9,  645,    8,  417,   72,   72,    9,    9,   10,   82,
        9,   10,   80,   10,  108,    9,   82,   82,  113,   10,
       10,   11,   76,   10,   11,  108,   11,   11,   10,  113,
      108,  108,   11,   11,   12,  645,   11,   12,  132,   12,

       12,   11,  114,  114,  132,   12,   12,   13,  176,   12,
       13,  177,   13,   88,   12,   88,  116,  116,   13,   13,
       76,   14,   13,   88,   14,   13,   14,   13,  130,  130,
       76,  112,   14,   14,   62,  176,   14,  120,  177,   14,
      120,   14,   15,  120,   15,   15,  120,   15,   62,   62,
       62,   62,  122,   15,   15,   15,   96,   15,   96,  670,
      122,  671,   15,  131,   15,   16,   96,   16,   16,  112,
       16,  131,  138,  138,  173,  123,   16,   16,   16,  112,
       16,  127,  123,  140,  173,   16,  133,   16,   17,  140,
       17,   17,  123,   17,  133,  672,   19,  127,  127,   17,

       17,   17,   20,   17,  136,   17,  144,   19,   17,   19,
       17,   19,  144,   20,  306,   20,   19,   20,   21,   21,
      136,  136,   20,  183,   21,  306,   22,   22,  141,   21,
      349,   21,   22,   21,   21,  141,  141,   22,   21,   22,
      183,   22,   22,   25,  280,  148,   22,   23,  286,   23,
       23,  148,  157,  157,   25,   23,   25,  280,   25,  249,
       23,  286,   23,   25,   23,   23,   26,  163,  163,   23,
       24,  249,   24,   24,  349,  175,  175,   26,   24,   26,
       27,   26,  252,   24,  673,   24,   26,   24,   24,  252,
       28,   27,   24,   27,  175,   27,   29,  178,  178,  265,

       27,   28,   30,   28,  255,   28,  265,   29,   31,   29,
       28,   29,  255,   30,   32,   30,   29,   30,   33,   31,
       33,   31,   30,   31,   34,   32,   34,   32,   31,   32,
      180,   33,   35,   33,   32,   33,  180,   34,   36,   34,
       33,   34,  180,   35,   37,   35,   34,   35,  328,   36,
       37,   36,   35,   36,   38,   37,  674,   37,   36,   37,
       38,  328,   39,  179,   37,   38,  260,   38,   40,   38,
      179,  179,  260,   39,   38,   39,   41,   39,  675,   40,
      676,   40,   39,   40,  253,  253,   42,   41,   40,   41,
      264,   41,  159,  264,   41,   41,   41,   42,   43,   42,

      159,   42,  526,  159,   42,   42,   42,   43,   44,   43,
      184,   43,  184,   43,   43,  269,   45,   44,   43,   44,
      184,   44,  269,   44,   44,  302,   46,   45,   44,   45,
      304,   45,   45,   45,   47,  526,   45,   46,  389,   46,
       48,   46,   46,   46,  389,   47,   46,   47,  677,   47,
       64,   48,  302,   48,   47,   48,   98,  304,  153,  153,
       48,  238,   64,  100,   64,   64,   64,   64,  300,  300,
       98,   98,   98,   98,  160,  100,  153,  100,  100,  100,
      100,  165,  153,  171,  160,  678,  193,  238,  193,  165,
      160,  160,  165,  171,  679,  182,  193,  182,  196,  171,

      171,  182,  199,  238,  238,  301,  301,  345,  200,  182,
      339,  362,  196,  196,  196,  196,  199,  199,  199,  199,
      200,  274,  200,  200,  200,  200,  291,  293,  274,  295,
      341,  363,  372,  291,  293,  376,  295,  339,  381,  362,
      395,  421,  440,  442,  448,  453,  395,  345,  467,  466,
      478,  469,  483,  489,  680,  546,  341,  421,  567,  363,
      556,  591,  598,  681,  682,  644,  602,  440,  636,  684,
      442,  685,  341,  341,  466,  372,  467,  641,  376,  469,
      546,  381,  686,  567,  448,  683,  556,  591,  598,  453,
      556,  602,  602,  478,  636,  483,  489,  644,  636,  687,

      688,  689,  690,  691,  641,  692,  693,  694,  644,  644,
      683,  683,  695,  696,  697,  698,  699,  700,  701,  702,
      703,  704,  705,  706,  707,  708,  709,  710,  711,  691,
      712,  691,  713,  714,  715,  716,  717,  718,  719,  720,
      691,  691,  721,  692,  722,  691,  691,  692,  723,  724,
      725,  726,  727,  728,  729,  730,  731,  732,  735,  736,
      737,  738,  739,  740,  741,  742,  720,  743,  744,  745,
      746,  747,  748,  749,  750,  751,  752,  753,  754,  755,
      756,  724,  757,  758,  759,  760,  761,  728,  762,  763,
      764,  765,  724,  724,  766,  767,  768,  769,  770,  771,

      772,  773,  774,  767,  769,  775,  776,  777,  778,  770,
      779,  780,  781,  782,  783,  784,  764,  785,  764,  786,
      787,  788,  789,  790,  791,  792,  793,  764,  764,  794,
      795,  796,  764,  764,  797,  798,  799,  771,  800,  801,
      802,  771,  803,  785,  804,  805,  787,  806,  807,  808,
      809,  810,  811,  812,  813,  814,  787,  815,  816,  817,
      818,  819,  820,  821,  788,  822,  824,  825,  826,  827,
      828,  829,  830,  831,  832,  833,  834,  835,  809,  836,
      837,  839,  800,  840,  841,  815,  842,  843,  844,  845,
      846,  847,  848,  849,  850,  851,  852,  853,  854,  855,

      856,  857,  858,  859,  860,  861,  862,  863,  864,  840,
      865,  866,  867,  843,  868,  869,  870,  871,  872,  873,
      874,  875,  876,  843,  877,  878,  879,  880,  881,  883,
      884,  885,  886,  846,  887,  888,  864,  889,  890,  891,
      892,  893,  894,  869,  857,  895,  858,  896,  897,  899,
      901,  902,  903,  878,  879,  904,  905,  906,  907,  908,
      909,  910,  911,  912,  913,  914,  915,  916,  917,  918,
      880,  919,  920,  922,  885,  923,  924,  925,  926,  927,
      928,  929,  930,  931,  932,  933,  934,  935,  936,  937,
      938,  939,  940,  941,  942,  943,  944,  945,  904,  946,

      947,  922,  948,  949,  924,  950,  951,  952,  953,  954,
      955,  956,  957,  958,  959,  960,  961,  962,  963,  964,
      965,  926,  968,  969,  970,  971,  931,  972,  973,  974,
      976,  977,  978,  979,  980,  981,  982,  983,  984,  985,
      986,  987,  988,  989,  990,  991,  993,  995,  996,  997,
      998,  999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007,
     1008, 1010, 1011, 1012, 1013,  973, 1014, 1015, 1016, 1017,
     1018,  973, 1019, 1021, 1022, 1023, 1024, 1025, 1026,  982,
     1027, 1028, 1029, 1030, 1031, 1032,  997, 1033, 1035, 1036,
     1037, 1038,  997, 1039, 1040, 1041, 1042, 1043, 1044, 1045,

     1005, 1046, 1007, 1047, 1048, 1049, 1051, 1052, 1053, 1054,
     1055, 1056, 1057, 1058, 1059, 1063, 1064, 1069, 1073, 1024,
      667, 1026,  666,  665,  664,  663,  662,  661,  660,  659,
      658,  657,  656,  655,  654,  653,  652, 1040, 1072, 1072,
     1074, 1074,  651,  650,  649,  648,  647,  646,  643,  642,
      640,  639,  638,  637,  635,  634,  633,  632,  631,  630,
      629,  628,  627,  626,  625,  624,  623,  622,  621,  620,
      619,  618,  617,  616,  615,  614,  613,  612,  611,  610,
      609,  608,  607,  606,  605,  604,  603,  601,  600,  599,
      597,  596,  595,  594,  593,  592,  590,  589,  588,  587,

      586,  585,  584,  583,  582,  581,  580,  579,  578,  577,
      576,  575,  574,  573,  572,  571,  570,  569,  568,  566,
      565,  564,  563,  562,  561,  560,  559,  558,  557,  555,
      554,  553,  552,  551,  550,  549,  548,  547,  545,  544,
      543,  542,  541,  540,  539,  538,  537,  536,  535,  534,
      533,  532,  531,  530,  529,  528,  527,  525,  524,  523,
      522,  521,  520,  519,  518,  517,  516,  515,  514,  513,
      512,  511,  510,  509,  508,  507,  506,  505,  504,  503,
      502,  501,  500,  499,  498,  497,  496,  495,  494,  493,
      492,  491,  490,  488,  487,  486,  485,  484,  482,  481,

      480,  479,  477,  476,  475,  474,  473,  472,  471,  470,
      468,  465,  464,  463,  462,  461,  460,  459,  458,  457,
      456,  455,  454,  452,  451,  450,  449,  447,  446,  445,
      444,  443,  441,  439,  438,  437,  436,  435,  434,  433,
      432,  431,  430,  429,  428,  427,  426,  425,  424,  423,
      422,  420,  419,  418,  416,  415,  414,  413,  412,  411,
      410,  409,  408,  407,  406,  405,  404,  403,  402,  401,
      400,  399,  398,  397,  396,  394,  393,  392,  391,  390,
      388,  387,  386,  385,  384,  383,  382,  380,  379,  378,
      377,  375,  374,  373,  371,  370,  369,  368,  367,  366,

      365,  364,  361,  360,  359,  358,  357,  356,  355,  354,
      353,  352,  351,  350,  348,  347,  346,  344,  343,  342,
      340,  338,  337,  336,  335,  334,  333,  332,  331,  330,
      329,  327,  326,  325,  324,  323,  322,  321,  320,  319,
      318,  317,  316,  315,  314,  313,  312,  311,  310,  309,
      308,  307,  305,  303,  299,  298,  297,  296,  294,  292,
      290,  289,  288,  287,  285,  284,  283,  282,  281,  279,
      278,  277,  276,  275,  273,  272,  271,  270,  268,  267,
      266,  263,  262,  261,  259,  258,  257,  256,  254,  251,
      250,  248,  247,  246,  245,  244,  243,  242,  241,  240,

      239,  237,  236,  235,  234,  233,  232,  231,  230,  229,
      228,  227,  226,  225,  224,  223,  222,  221,  220,  219,
      218,  217,  216,  215,  214,  213,  212,  211,  210,  209,
      208,  207,  206,  205,  204,  203,  202,  201,  198,  197,
      195,  194,  192,  191,  190,  189,  188,  185,  181,  174,
      172,  170,  169,  168,  167,  166,  164,  162,  161,  158,
      156,  155,  154,  152,  151,  150,  149,  147,  146,  145,
      143,  142,  139,  137,  135,  134,  129,  128,  126,  125,
      121,  119,  118,  117,  115,  111,  110,  107,  106,  105,
      104,  103,  102,  101,   99,   97,   95,   94,   93,   92,

       91,   89,   86,   85,   83,   78,   77,   75,   73,   71,
       70,   69,   68,   67,   66,   65,   63,   61,   59,   58,
       57,   56,   55,   53,   49, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.lex"
#define INITIAL 0
#define YY_NEVER_INTERACTIVE 1
#define YY_STACK_USED 1
#line 10 "lexer.lex"
#ifdef WIN32
#pragma warning(disable:4127) // while(1) warning
#pragma warning(disable:4102) // unreferenced label warning
#pragma warning(disable:4505) // unreferenced local function
#pragma warning(disable:4267) // smaller type conversion warnings
#pragma warning(disable:4244) // smaller type conversion warnings
#pragma warning(disable:4702) // unreachable code in stl library on relesae
#endif

#include <cstdlib>
#include <stdio.h>
#include <string.h>
#include "lexer.h"
#include "parser.yy.cc.h"

int yyline=1;
int yyerr=0;

void yy_done_parsing() {
	yy_delete_buffer( YY_CURRENT_BUFFER );
	
	delete yy_start_stack;
	yy_start_stack = 0;
	
	yy_init = 1;
}
#define s_global 1

#define s_camera 2

#define s_bbox 3

#define s_mesh 4

#define s_instance 5

#define s_light 6

#define s_pointlight 7

#define s_spherelight 8

#define s_squarelight 9

#define s_material 10

#define s_multimaterial 11

#define s_diffuse 12

#define s_indirectdiffuse 13

#define s_phong 14

#define s_stone 15

#define s_stonebump 16

#define s_reflective 17

#define s_refractive 18

#define s_sphere 19

#define s_blpatch 20

#define s_p0 21

#define s_matrix 22

#define s_hdr 23

#line 1227 "lexer.yy.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 74 "lexer.lex"


#line 1381 "lexer.yy.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1072 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 1071 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 76 "lexer.lex"
{ return YY_ENABLE; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 77 "lexer.lex"
{ return YY_DISABLE; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 78 "lexer.lex"
{ return YY_MATH_COS; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 79 "lexer.lex"
{ return YY_MATH_SIN; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 80 "lexer.lex"
{ return YY_MATH_TAN; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 81 "lexer.lex"
{ return YY_MATH_ACOS; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 82 "lexer.lex"
{ return YY_MATH_ASIN; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 83 "lexer.lex"
{ return YY_MATH_ATAN; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 84 "lexer.lex"
{ return YY_MATH_ATAN2; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 85 "lexer.lex"
{ return YY_MATH_LN; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 86 "lexer.lex"
{ return YY_MATH_LOG; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 87 "lexer.lex"
{ return YY_MATH_EXP; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 88 "lexer.lex"
{ return YY_MATH_SQRT; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 89 "lexer.lex"
{ return YY_MATH_E; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 90 "lexer.lex"
{ return YY_MATH_PI; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 92 "lexer.lex"
{ return YY_LT; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 93 "lexer.lex"
{ return YY_GT; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 94 "lexer.lex"
{ return YY_LBOX; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 95 "lexer.lex"
{ return YY_LBOX; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 96 "lexer.lex"
{ return YY_LCURLY; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 97 "lexer.lex"
{ yy_pop_state(); return YY_RCURLY; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 98 "lexer.lex"
{ return YY_LPAREN; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 99 "lexer.lex"
{ return YY_RPAREN; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 100 "lexer.lex"
{ return YY_COMMA; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 101 "lexer.lex"
{ return YY_EQUAL; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 102 "lexer.lex"
{ return YY_PLUS; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 103 "lexer.lex"
{ return YY_MINUS; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 104 "lexer.lex"
{ return YY_MUL; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 105 "lexer.lex"
{ return YY_DIV; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 106 "lexer.lex"
{ return YY_CARAT; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 107 "lexer.lex"
{ return YY_BSLASH; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 108 "lexer.lex"
{ return YY_X; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 109 "lexer.lex"
{ yyline++; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 113 "lexer.lex"
{ yy_push_state(s_global); return YY_S_GLOBAL; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 114 "lexer.lex"
{ return YY_SIZE; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 115 "lexer.lex"
{ return YY_POS; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 116 "lexer.lex"
{ return YY_IMG_BGCOLOR; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 117 "lexer.lex"
{ return YY_IMG_FGCOLOR; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 118 "lexer.lex"
{ return YY_GL_BGCOLOR; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 119 "lexer.lex"
{ return YY_GL_SPHERE_SECTIONS; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 120 "lexer.lex"
{ return YY_GL_RENDER_LIGHTS; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 121 "lexer.lex"
{ return YY_GL_RENDER_BBOX; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 122 "lexer.lex"
{ return YY_NUM_THREADS; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 123 "lexer.lex"
{ return YY_THREAD_JOB_SIZE; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 124 "lexer.lex"
{ return YY_RENDER_HANDLER_SLEEP; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 125 "lexer.lex"
{ return YY_RENDER_THREAD_SLEEP; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 126 "lexer.lex"
{ return YY_RENDER_SPINLOCK_SLEEP; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 127 "lexer.lex"
{ return YY_GAUSSIAN_BLUR_MAX; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 128 "lexer.lex"
{ return YY_GAUSSIAN_BLUR_SIGMA; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 129 "lexer.lex"
{ return YY_HEADLESS; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 130 "lexer.lex"
{ return YY_TRIANGLE_TEST; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 131 "lexer.lex"
{ return YY_PROJECTION; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 132 "lexer.lex"
{ return YY_BARYCENTRIC; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 133 "lexer.lex"
{ return YY_PLUCKER; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 134 "lexer.lex"
{ return YY_MOLLER; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 135 "lexer.lex"
{ return YY_BOX_COST; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 136 "lexer.lex"
{ return YY_OBJECT_COST; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 137 "lexer.lex"
{ return YY_PFM; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 138 "lexer.lex"
{ return YY_ANTI_ALIAS; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 140 "lexer.lex"
{ yy_push_state(s_camera); return YY_S_CAMERA; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 141 "lexer.lex"
{ return YY_POS; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 142 "lexer.lex"
{ return YY_DIR; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 143 "lexer.lex"
{ return YY_LOOKAT; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 144 "lexer.lex"
{ return YY_UP; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 145 "lexer.lex"
{ return YY_FOV; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 146 "lexer.lex"
{ return YY_ASPECT; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 147 "lexer.lex"
{ return YY_MIN_DRAW; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 148 "lexer.lex"
{ return YY_MAX_DRAW; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 150 "lexer.lex"
{ yy_push_state(s_p0); return YY_S_P0; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 151 "lexer.lex"
{ return YY_SPIRAL_NUM_SPHERES; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 152 "lexer.lex"
{ return YY_SPIRAL_RADIUS; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 153 "lexer.lex"
{ return YY_LORENZ_DT; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 154 "lexer.lex"
{ return YY_LORENZ_MIN_DISTANCE; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 155 "lexer.lex"
{ return YY_LORENZ_MAX_DISTANCE; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 156 "lexer.lex"
{ return YY_LORENZ_SIGMA; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 157 "lexer.lex"
{ return YY_LORENZ_RHO; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 158 "lexer.lex"
{ return YY_LORENZ_BETA; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 159 "lexer.lex"
{ return YY_LORENZ_RADIUS; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 160 "lexer.lex"
{ return YY_LORENZ_NUM_SPHERES; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 161 "lexer.lex"
{ return YY_LORENZ_START; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 163 "lexer.lex"
{ yy_push_state(s_mesh); return YY_S_MESH; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 164 "lexer.lex"
{ return YY_LOAD; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 166 "lexer.lex"
{ yy_push_state(s_instance); return YY_S_INSTANCE; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 167 "lexer.lex"
{ return YY_GEOMETRY; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 169 "lexer.lex"
{ yy_push_state(s_light); return YY_S_LIGHT; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 170 "lexer.lex"
{ yy_pop_state(); yy_push_state(s_pointlight); return YY_S_POINTLIGHT; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 171 "lexer.lex"
{ yy_pop_state(); yy_push_state(s_spherelight); return YY_S_SPHERELIGHT; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 172 "lexer.lex"
{ yy_pop_state(); yy_push_state(s_squarelight); return YY_S_SQUARELIGHT; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 174 "lexer.lex"
{ return YY_POS; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 175 "lexer.lex"
{ return YY_COLOR; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 176 "lexer.lex"
{ return YY_WATTAGE; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 177 "lexer.lex"
{ return YY_NUM_SAMPLES; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 179 "lexer.lex"
{ return YY_POS; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 180 "lexer.lex"
{ return YY_COLOR; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 181 "lexer.lex"
{ return YY_WATTAGE; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 182 "lexer.lex"
{ return YY_NUM_SAMPLES; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 183 "lexer.lex"
{ return YY_P1; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 184 "lexer.lex"
{ return YY_P2; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 186 "lexer.lex"
{ return YY_POS; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 187 "lexer.lex"
{ return YY_COLOR; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 188 "lexer.lex"
{ return YY_WATTAGE; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 189 "lexer.lex"
{ return YY_NUM_SAMPLES; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 190 "lexer.lex"
{ return YY_RADIUS; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 192 "lexer.lex"
{ yy_push_state(s_material); return YY_S_MATERIAL; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 193 "lexer.lex"
{ yy_push_state(s_multimaterial); return YY_S_MULTIMATERIAL; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 195 "lexer.lex"
{ yy_pop_state(); yy_push_state(s_diffuse); return YY_S_DIFFUSE; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 196 "lexer.lex"
{                 yy_push_state(s_diffuse); return YY_S_DIFFUSE; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 198 "lexer.lex"
{ yy_pop_state(); yy_push_state(s_indirectdiffuse); return YY_S_INDIRECT_DIFFUSE; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 199 "lexer.lex"
{                yy_push_state(s_indirectdiffuse); return YY_S_INDIRECT_DIFFUSE; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 201 "lexer.lex"
{ yy_pop_state(); yy_push_state(s_phong); return YY_S_PHONG; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 202 "lexer.lex"
{                 yy_push_state(s_phong); return YY_S_PHONG; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 204 "lexer.lex"
{ yy_pop_state(); yy_push_state(s_stone); return YY_S_STONE; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 205 "lexer.lex"
{                 yy_push_state(s_stone); return YY_S_STONE; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 207 "lexer.lex"
{ yy_pop_state(); yy_push_state(s_stonebump); return YY_S_STONEBUMP; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 208 "lexer.lex"
{                 yy_push_state(s_stonebump); return YY_S_STONEBUMP; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 210 "lexer.lex"
{ yy_pop_state(); yy_push_state(s_reflective); return YY_S_REFLECTIVE; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 211 "lexer.lex"
{                 yy_push_state(s_reflective); return YY_S_REFLECTIVE; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 213 "lexer.lex"
{ yy_pop_state(); yy_push_state(s_refractive); return YY_S_REFRACTIVE; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 214 "lexer.lex"
{                 yy_push_state(s_refractive); return YY_S_REFRACTIVE; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 216 "lexer.lex"
{ return YY_AMBIENT; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 217 "lexer.lex"
{ return YY_COLOR; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 218 "lexer.lex"
{ return YY_COLOR; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 219 "lexer.lex"
{ return YY_N; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 220 "lexer.lex"
{ return YY_COLOR_A; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 221 "lexer.lex"
{ return YY_COLOR_B; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 222 "lexer.lex"
{ return YY_AMPLITUDE; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 223 "lexer.lex"
{ return YY_IOR; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 224 "lexer.lex"
{ return YY_WEIGHT; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 226 "lexer.lex"
{ yy_push_state(s_sphere); return YY_S_SPHERE; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 227 "lexer.lex"
{ return YY_CENTER; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 228 "lexer.lex"
{ return YY_RADIUS; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 230 "lexer.lex"
{ yy_push_state(s_blpatch); return YY_S_BLPATCH; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 231 "lexer.lex"
{ return YY_P00; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 232 "lexer.lex"
{ return YY_P01; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 233 "lexer.lex"
{ return YY_P10; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 234 "lexer.lex"
{ return YY_P11; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 235 "lexer.lex"
{ return YY_U_CONSTRAINT; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 236 "lexer.lex"
{ return YY_V_CONSTRAINT; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 238 "lexer.lex"
{ yy_push_state(s_matrix); return YY_S_MATRIX; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 239 "lexer.lex"
{ return YY_PUSH; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 240 "lexer.lex"
{ return YY_POP; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 241 "lexer.lex"
{ return YY_SET_IDENTITY; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 242 "lexer.lex"
{ return YY_ROTATE; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 243 "lexer.lex"
{ return YY_TRANSLATE; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 244 "lexer.lex"
{ return YY_SCALE; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 246 "lexer.lex"
{ yylval.str = _strdup(yytext); return YY_STRING; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 247 "lexer.lex"
{ yylval.integer = atoi(yytext); return YY_PARSE_INT; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 248 "lexer.lex"
{ yylval.real = (float)atof(yytext); return YY_REAL; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 250 "lexer.lex"
// eat up whitespace
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 251 "lexer.lex"
// eat up comments 
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 252 "lexer.lex"
{ printf("\nParse error #%d line %d near: %s\n", ++yyerr, yyline, yytext); }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 254 "lexer.lex"
ECHO;
	YY_BREAK
#line 2232 "lexer.yy.cc"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(s_global):
			case YY_STATE_EOF(s_camera):
			case YY_STATE_EOF(s_bbox):
			case YY_STATE_EOF(s_mesh):
			case YY_STATE_EOF(s_instance):
			case YY_STATE_EOF(s_light):
			case YY_STATE_EOF(s_pointlight):
			case YY_STATE_EOF(s_spherelight):
			case YY_STATE_EOF(s_squarelight):
			case YY_STATE_EOF(s_material):
			case YY_STATE_EOF(s_multimaterial):
			case YY_STATE_EOF(s_diffuse):
			case YY_STATE_EOF(s_indirectdiffuse):
			case YY_STATE_EOF(s_phong):
			case YY_STATE_EOF(s_stone):
			case YY_STATE_EOF(s_stonebump):
			case YY_STATE_EOF(s_reflective):
			case YY_STATE_EOF(s_refractive):
			case YY_STATE_EOF(s_sphere):
			case YY_STATE_EOF(s_blpatch):
			case YY_STATE_EOF(s_p0):
			case YY_STATE_EOF(s_matrix):
			case YY_STATE_EOF(s_hdr):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1072 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1072 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1071);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 254 "lexer.lex"

