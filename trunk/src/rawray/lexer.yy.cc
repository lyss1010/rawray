#line 2 "lexer.yy.cc"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern int yylineno;
int yylineno = 1;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 170
#define YY_END_OF_BUFFER 171
static yyconst short int yy_acclist[526] =
    {   0,
      171,  169,  170,  167,  169,  170,   39,  170,  169,  170,
      168,  169,  170,  169,  170,   28,  169,  170,   29,  169,
      170,   34,  169,  170,   32,  169,  170,   30,  167,  169,
      170,   33,  169,  170,  166,  169,  170,   35,  169,  170,
      165,  169,  170,   22,  169,  170,   31,  169,  170,   23,
      169,  170,   24,  169,  170,   37,  169,  170,   25,  169,
      170,   36,  169,  170,  169,  170,  169,  170,  169,  170,
      169,  170,   20,  169,  170,  169,  170,  169,  170,  169,
      170,  169,  170,  169,  170,  169,  170,  169,  170,  169,
      170,  169,  170,  169,  170,   38,  169,  170,  169,  170,

       26,  169,  170,   27,  169,  170,  170,  167,  170,  170,
      168,  170,  170,   28,  170,   29,  170,   34,  170,   32,
      170,   30,  167,  170,   33,  170,  166,  170,   35,  170,
      165,  170,   22,  170,   31,  170,   23,  170,   24,  170,
       37,  170,   25,  170,   36,  170,  170,  170,  170,  170,
       20,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,   38,  170,  170,   26,  170,   27,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,

      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  137,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  167,  164,  168,
       28,   29,   34,   32,   30,  167,   33,  166,  166,   35,
      165,  166,  165,   22,   31,   23,   24,   37,   25,   36,
       20,   16,    6,    4,   81,   21,   26,   27,   76,  109,
      110,  137,    9,   18,   16,   17,    6,    8,    4,   81,
       21,   10,   11,    2,   42,   74,   77,   73,   76,  101,
      111,  109,  110,  105,  140,  151,  152,  153,  154,  159,

       12,   13,   14,    9,   18,   17,   93,    8,   10,   19,
       11,    1,    2,   42,   41,   74,   77,   73,   94,  101,
      111,  105,  140,  151,  152,  153,  154,  159,  158,   12,
       13,   14,   15,    5,   97,   93,   19,    1,   41,   94,
       98,  102,  112,  106,  122,  124,  123,  125,  132,  136,
      158,  163,   15,   72,    3,    5,   40,   97,  157,  147,
       64,   61,   78,   75,   98,   99,  100,  102,  112,  115,
      106,  122,  124,  123,  125,  132,  133,  134,  136,  138,
      142,  143,  144,  146,  139,  141,  148,  149,  161,  163,
      150,   72,    7,    3,   40,  157,  147,   62,   64,   61,

       60,   78,   75,   80,   79,   99,  100,  103,  115,  113,
      107,  118,  135,  119,  133,  134,  138,  142,  143,  144,
      146,  139,  141,  148,  149,  161,  150,    7,   95,  116,
       62,   56,   60,   96,  103,  113,  107,  118,  135,  119,
       84,   95,  116,   65,   70,   71,   56,   96,  126,  127,
      145,   88,  162,   70,   71,   49,   63,   58,  104,  114,
      108,  128,  130,  126,  129,  131,  127,  145,   89,  162,
       59,   63,  104,  114,  108,  128,  130,  129,  131,  155,
      156,   87,   92,  160,   59,   45,   48,   67,   57,  155,
      156,   90,   83,  160,  117,   45,   68,   67,   50,   57,

      117,   47,   68,   69,   54,   69,   43,   44,  120,  121,
       46,   43,   44,   66,  120,  121,   91,   82,   55,   66,
       52,   86,   85,   51,   53
    } ;

static yyconst short int yy_accept[1202] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        4,    7,    9,   11,   14,   16,   19,   22,   25,   28,
       32,   35,   38,   41,   44,   47,   50,   53,   56,   59,
       62,   65,   67,   69,   71,   73,   76,   78,   80,   82,
       84,   86,   88,   90,   92,   94,   96,   99,  101,  104,
      107,  108,  110,  111,  113,  114,  116,  118,  120,  122,

      125,  127,  129,  131,  133,  135,  137,  139,  141,  143,
      145,  147,  148,  149,  150,  151,  153,  154,  155,  156,
      157,  158,  159,  160,  161,  162,  163,  164,  165,  167,
      168,  170,  172,  173,  174,  175,  176,  177,  178,  179,
      180,  181,  182,  183,  184,  185,  186,  187,  188,  189,
      190,  191,  192,  193,  194,  195,  196,  197,  198,  199,
      200,  201,  202,  203,  204,  205,  206,  207,  208,  209,
      210,  211,  212,  213,  214,  215,  216,  217,  219,  220,
      221,  222,  223,  224,  225,  226,  227,  228,  229,  230,
      231,  232,  233,  234,  235,  236,  237,  238,  239,  239,

      240,  241,  241,  242,  243,  244,  245,  247,  248,  249,
      250,  251,  252,  253,  254,  255,  256,  257,  258,  259,
      260,  261,  261,  261,  261,  261,  261,  261,  261,  262,
      262,  262,  262,  262,  262,  262,  263,  263,  263,  263,
      263,  264,  264,  265,  266,  267,  267,  267,  267,  267,
      267,  267,  268,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  269,
      269,  270,  270,  270,  270,  270,  270,  270,  270,  270,
      270,  270,  270,  270,  270,  270,  270,  270,  271,  272,

      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  274,  274,  274,
      275,  275,  275,  275,  275,  276,  277,  277,  277,  277,
      278,  279,  280,  281,  282,  283,  283,  283,  284,  284,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  286,  286,
      286,  286,  286,  286,  286,  287,  288,  288,  288,  288,

      289,  290,  290,  290,  290,  290,  290,  290,  290,  291,
      291,  291,  291,  292,  292,  292,  292,  292,  293,  294,
      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      295,  295,  295,  296,  296,  296,  296,  297,  298,  299,
      300,  300,  300,  300,  300,  301,  301,  301,  301,  301,
      301,  302,  303,  304,  304,  304,  305,  305,  305,  306,
      306,  306,  306,  306,  307,  307,  307,  308,  308,  309,
      310,  310,  311,  312,  313,  314,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  314,  314,  314,

      314,  314,  314,  314,  314,  314,  314,  314,  315,  315,
      315,  316,  316,  316,  316,  317,  318,  318,  318,  318,
      318,  318,  319,  320,  320,  320,  320,  320,  320,  320,
      320,  321,  321,  321,  321,  321,  322,  322,  322,  322,
      322,  322,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  323,  323,  323,  323,  324,  324,  324,
      324,  325,  326,  327,  328,  328,  328,  328,  328,  329,
      330,  330,  330,  330,  330,  330,  331,  332,  333,  334,
      334,  334,  334,  334,  335,  335,  335,  336,  336,  336,

      337,  337,  337,  338,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  340,  340,  340,  340,
      340,  340,  340,  340,  341,  341,  342,  342,  342,  343,
      343,  343,  344,  344,  344,  344,  345,  345,  345,  345,
      345,  346,  346,  346,  347,  347,  347,  347,  348,  348,
      348,  349,  350,  350,  350,  351,  351,  351,  351,  351,
      351,  351,  351,  351,  351,  351,  351,  351,  351,  352,
      352,  353,  353,  353,  354,  354,  355,  355,  356,  357,
      358,  358,  359,  359,  360,  360,  361,  361,  361,  361,

      361,  361,  361,  361,  361,  361,  362,  362,  362,  362,
      362,  362,  362,  363,  363,  363,  363,  363,  363,  363,
      363,  364,  365,  365,  365,  365,  366,  367,  368,  369,
      369,  369,  370,  370,  371,  371,  372,  372,  372,  372,
      372,  373,  373,  373,  374,  374,  374,  374,  374,  375,
      375,  375,  376,  376,  377,  378,  379,  380,  381,  381,
      382,  383,  384,  384,  385,  386,  387,  388,  389,  389,
      389,  389,  389,  390,  391,  391,  391,  392,  393,  394,
      395,  396,  396,  396,  397,  397,  398,  398,  398,  398,
      399,  399,  399,  399,  399,  399,  400,  400,  400,  400,

      400,  400,  400,  401,  401,  401,  401,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  403,  404,  405,  406,
      406,  407,  408,  408,  409,  409,  410,  411,  411,  412,
      413,  413,  413,  413,  413,  414,  415,  415,  415,  415,
      415,  416,  417,  418,  419,  420,  421,  421,  422,  423,
      424,  425,  426,  426,  426,  426,  426,  426,  426,  426,
      426,  426,  426,  426,  426,  427,  427,  427,  428,  429,
      430,  431,  431,  431,  431,  431,  432,  432,  432,  432,
      432,  432,  433,  433,  433,  433,  433,  433,  433,  434,
      434,  434,  434,  434,  434,  434,  435,  435,  436,  436,

      437,  437,  438,  439,  439,  439,  439,  439,  440,  441,
      441,  441,  441,  441,  441,  441,  441,  441,  442,  442,
      442,  442,  442,  442,  442,  442,  442,  442,  442,  442,
      443,  444,  444,  445,  445,  445,  446,  447,  447,  447,
      447,  447,  447,  447,  447,  447,  447,  447,  447,  448,
      448,  448,  448,  448,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  449,  449,  449,  449,  449,  449,  449,
      449,  450,  450,  450,  450,  450,  451,  452,  452,  452,
      452,  452,  452,  452,  452,  453,  453,  453,  453,  453,
      453,  454,  454,  454,  455,  456,  456,  456,  456,  456,

      456,  456,  456,  456,  456,  456,  456,  457,  458,  459,
      459,  459,  459,  459,  459,  459,  460,  461,  462,  462,
      463,  464,  465,  465,  466,  467,  468,  469,  469,  469,
      470,  470,  470,  470,  470,  470,  470,  470,  470,  470,
      470,  470,  470,  470,  471,  471,  472,  472,  472,  472,
      472,  472,  472,  472,  472,  472,  472,  472,  472,  473,
      473,  473,  473,  473,  473,  474,  475,  476,  476,  477,
      478,  478,  479,  480,  481,  482,  482,  482,  482,  482,
      483,  484,  484,  484,  485,  485,  486,  486,  487,  488,
      488,  488,  488,  488,  488,  488,  488,  489,  489,  489,

      489,  489,  490,  490,  490,  491,  492,  492,  492,  492,
      493,  493,  494,  495,  496,  496,  496,  496,  497,  497,
      497,  498,  498,  498,  498,  498,  499,  499,  499,  499,
      499,  500,  501,  501,  501,  501,  501,  501,  501,  502,
      502,  502,  503,  503,  504,  505,  505,  505,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  505,  506,
      506,  506,  507,  508,  509,  509,  509,  509,  509,  509,
      510,  511,  511,  511,  511,  511,  511,  512,  513,  514,
      515,  515,  515,  515,  516,  517,  517,  517,  518,  519,
      520,  521,  521,  521,  522,  523,  524,  525,  525,  526,

      526
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
       19,   19,   19,   19,   19,   19,   19,    1,    1,   20,
       21,   22,    1,    1,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       23,   24,   25,   26,    1,    1,   27,   28,   29,   30,

       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,   53,    1,   54,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[55] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1
    } ;

static yyconst short int yy_base[1204] =
    {   0,
        0,    0,   54,    0,   82,    0,  103,  116,  129,  142,
      155,  168,  181,  195,  216,  239,  262,    0,  268,  274,
      290,  298,  321,  344,  315,  338,  352,  362,  368,  374,
      380,  386,  392,  398,  404,  410,  416,  426,  434,  440,
      448,  458,  470,  480,  488,  498,  506,  512, 1788, 1789,
      132, 1789, 1782,    0, 1779, 1783, 1782, 1781, 1780,  135,
     1779,  233, 1778,  549, 1777, 1776, 1775, 1774, 1773, 1772,
     1771,  120, 1734,   84, 1736,  181, 1743, 1731, 1728,   78,
      126, 1726,  100,  135,  161,  133, 1789, 1735, 1763, 1762,
     1789,  212, 1758,    0, 1755, 1759, 1758, 1757, 1756,  255,

     1755,  555, 1754,  562, 1753, 1752, 1751, 1750, 1749, 1748,
     1747,  146,  203, 1707, 1712,  234, 1719,  152,  187, 1706,
      198,  111,  158,  232,  252, 1713,  218,  271, 1789, 1712,
     1740, 1739,  300, 1705,  137,  235,  235, 1698,  267,  206,
      278,  185, 1696,  307, 1702,  242, 1705,  296,  333, 1694,
      313,  342, 1707, 1692,  358,  372, 1705, 1704, 1689,  390,
      542, 1702, 1693, 1687,  437, 1695,  458,  546, 1690, 1684,
      451, 1692,  547, 1681, 1690, 1689, 1678,  283, 1687, 1676,
     1685,  555, 1684, 1683, 1672, 1681,  331, 1684,  553,  293,
      356,  546,  554,  432, 1669,  573,  437,  509, 1704, 1789,

        0, 1701, 1705, 1704, 1703, 1702,  601, 1701, 1700,  593,
     1699, 1698,  604,  612, 1697, 1696, 1695, 1694, 1693, 1692,
     1691, 1651, 1656, 1663, 1647, 1649, 1642, 1641, 1683, 1657,
     1641, 1644, 1640, 1635, 1646, 1676, 1644, 1630, 1630, 1636,
     1671, 1640, 1669, 1668, 1667, 1628, 1633, 1622, 1625, 1617,
     1618, 1660, 1659, 1614, 1615, 1613, 1607, 1609,  596, 1611,
     1627, 1626, 1602, 1613, 1611, 1613, 1601, 1602, 1605, 1605,
      451, 1600,  572,  238,  573, 1595,  308, 1592, 1601, 1595,
     1637,  416, 1597, 1602, 1602,  351,  478, 1596, 1589, 1587,
      587, 1593, 1586, 1600, 1583,  589, 1589, 1625, 1624, 1580,

     1578,  494, 1593, 1581, 1589, 1579, 1591,  504, 1588, 1576,
     1584, 1574,  597, 1579, 1578,  598, 1610, 1576,  599, 1575,
     1567, 1573, 1572, 1562, 1570, 1564, 1573,  622,  629,  529,
     1561,  631, 1560,  614, 1565, 1557, 1553, 1551, 1569, 1549,
      621, 1549, 1553, 1552, 1564, 1559, 1587, 1561, 1559, 1584,
     1540, 1556, 1537, 1548, 1579, 1578,  618, 1545, 1532, 1575,
     1574, 1573, 1572, 1571, 1570, 1540, 1524, 1567, 1537, 1565,
     1531, 1514, 1522,  648, 1518,  650, 1535, 1530, 1518,  651,
     1529, 1525,  652, 1519,  613, 1525, 1526, 1552, 1517, 1522,
     1520, 1519, 1522, 1517, 1545, 1544, 1508,  653,  654, 1542,

     1541, 1512, 1502, 1500, 1508, 1511, 1496,  324, 1534, 1489,
     1493,  655, 1531, 1497, 1485, 1489,  659, 1527, 1526, 1525,
     1480, 1493, 1489, 1483,  625, 1482, 1486, 1488, 1484, 1478,
      626, 1477, 1475, 1482, 1481, 1472, 1479, 1470, 1477, 1471,
     1475, 1474, 1504, 1472, 1458, 1468, 1500, 1499, 1498, 1497,
     1458, 1457, 1465, 1451, 1492, 1459, 1465, 1453,  663, 1450,
     1487, 1486,  649, 1441, 1442, 1483, 1456, 1445, 1480, 1450,
     1453, 1452, 1432, 1475, 1432, 1440, 1472, 1438, 1470, 1469,
     1426, 1467, 1466, 1465, 1464,  664, 1436, 1426,  670, 1422,
     1417, 1432, 1420, 1425,  669, 1420, 1425, 1418, 1424,  671,

     1419, 1412, 1421,  672, 1417, 1421, 1412, 1446, 1416, 1415,
     1443, 1417, 1403, 1413, 1439, 1438,  678,  673, 1395,  679,
     1394, 1435, 1434, 1404, 1388, 1389, 1388, 1387,  674, 1403,
     1427, 1401, 1383,  683, 1399, 1423, 1377, 1396, 1378,  684,
     1394, 1418, 1392, 1371, 1373, 1383, 1384, 1387, 1382, 1381,
     1364, 1366, 1376, 1377, 1380, 1375, 1361, 1370, 1369, 1358,
     1367, 1356, 1365, 1363, 1363, 1362, 1393, 1360, 1362, 1345,
     1389, 1388, 1387, 1386, 1342, 1341, 1345, 1357, 1381, 1380,
     1335, 1349,  686, 1349, 1333, 1375, 1374, 1373, 1372, 1344,
     1345, 1333, 1339, 1367, 1330, 1327, 1364, 1330, 1314, 1361,

     1323, 1330, 1358, 1357,  687, 1320, 1326, 1321, 1310, 1319,
     1316, 1322, 1320, 1309, 1310, 1317,  688, 1315, 1302, 1301,
     1300, 1297, 1311, 1312, 1296, 1337, 1308, 1304, 1290,  690,
     1289, 1307, 1306, 1330, 1285, 1328, 1298, 1297, 1325, 1287,
     1292, 1322, 1284, 1277, 1288, 1318, 1280, 1285, 1272, 1285,
     1313, 1285, 1284,  694, 1272, 1266, 1279, 1307, 1279, 1278,
      705, 1304, 1259, 1258, 1296, 1251,  708, 1250, 1249, 1248,
     1247, 1246, 1247, 1245, 1243, 1242, 1235, 1248, 1283,  100,
      160,  178,  352,  398,  423,  460,  463,  543,  551,  560,
      570,  700,  681,  710,  686,  713,  688,  684,  685,  680,

      700,  697,  700,  688,  693,  735,  693,  737,  713,  700,
      710,  742,  741,  714,  744,  703,  702,  747,  748,  713,
      750,  751,  705,  706,  712,  755,  756,  757,  758,  719,
      731,  761,  722,  764,  736,  766,  729,  741,  743,  746,
      774,  731,  732,  777,  733,  736,  752,  756,  784,  741,
      742,  787,  743,  789,  792,  793,  794,  795,  796,  797,
      798,  799,  755,  801,  802,  803,  804,  805,  764,  765,
      808,  810,  809,  811,  774,  788,  814,  815,  816,  817,
      818,  790,  784,  823,  780,  825,  801,  783,  799,  829,
      792,  789,  790,  804,  798,  837,  795,  812,  798,  796,

      842,  804,  844,  822,  849,  814,  854,  822,  856,  832,
      818,  827,  860,  822,  833,  863,  864, 1789, 1789,  816,
      866,  867,  833,  870,  835,  872,  873,  838,  875,  877,
      834,  846,  847,  844,  882,  883,  840,  852,  853,  850,
      889,  890,  891,  892,  893,  895,  868,  897,  898,  901,
      902,  903,  879,  880,  906,  878,  864,  884,  865,  886,
      879,  913,  869,  890,  916,  875,  876,  921,  922,  924,
      925,  897,  884,  886,  930,  929,  933,  892,  935,  936,
      938,  937,  904,  911,  898,  897,  917,  903,  947,  911,
      914,  920,  912,  932,  960,  962,  934,  964,  936,  966,

      938,  968,  969,  970,  926,  927,  934,  975,  976,  977,
      935,  936,  943,  955,  952,  953,  943, 1789,  940,  951,
      953,  963,  953,  962,  969,  958,  968,  964,  970, 1000,
     1001,  960, 1789,  970, 1006, 1007, 1008, 1009,  974,  966,
     1012,  987,  981, 1015,  987, 1017,  979,  994, 1020,  990,
      991,  994,  986,  982,  982,  989, 1000,  991, 1001, 1031,
     1034, 1007, 1037,  996,  997,  998, 1042, 1010, 1015, 1016,
     1046, 1047, 1016, 1021, 1022, 1052, 1053, 1016, 1017, 1031,
     1060, 1061, 1062, 1030, 1789, 1027, 1023, 1066, 1034, 1024,
     1069, 1038, 1045, 1073, 1076, 1032, 1041, 1041, 1050, 1055,

     1036, 1056, 1043, 1044, 1087, 1063, 1789, 1091, 1789, 1056,
     1057, 1069, 1095, 1063, 1054, 1098, 1099, 1100, 1071, 1102,
     1103, 1104, 1076, 1107, 1108, 1110, 1111, 1068, 1070, 1789,
     1115, 1083, 1117, 1085, 1119, 1080, 1076, 1097, 1079, 1124,
     1085, 1081, 1078, 1128, 1104, 1130, 1089, 1104, 1085, 1102,
     1091, 1107, 1104, 1100, 1101, 1142, 1102, 1115, 1146, 1118,
     1109, 1121, 1100, 1107, 1152, 1153, 1154, 1125, 1156, 1157,
     1128, 1159, 1160, 1161, 1163, 1121, 1122, 1134, 1126, 1789,
     1789, 1138, 1128, 1172, 1137, 1174, 1175, 1176, 1789, 1133,
     1145, 1137, 1135, 1136, 1137, 1138, 1184, 1143, 1159, 1187,

     1159, 1189, 1145, 1146, 1192, 1193, 1150, 1151, 1167, 1789,
     1168, 1789, 1198, 1199, 1200, 1176, 1169, 1203, 1161, 1166,
     1206, 1164, 1170, 1171, 1172, 1211, 1213, 1179, 1215, 1180,
     1789, 1217, 1176, 1177, 1196, 1197, 1181, 1182, 1225, 1178,
     1196, 1789, 1190, 1229, 1231, 1204, 1205, 1207, 1235, 1200,
     1238, 1210, 1211, 1212, 1204, 1206, 1216, 1217, 1789, 1210,
     1205, 1249, 1250, 1251, 1223, 1224, 1254, 1219, 1228, 1259,
     1260, 1234, 1235, 1220, 1221, 1240, 1789, 1266, 1267, 1268,
     1240, 1241, 1231, 1272, 1273, 1245, 1246, 1789, 1789, 1789,
     1276, 1237, 1250, 1789, 1789, 1789, 1789, 1240, 1789, 1789,

     1299, 1283, 1301
    } ;

static yyconst short int yy_def[1204] =
    {   0,
     1200,    1, 1200,    3,    3,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17, 1200, 1200,
     1200, 1200, 1201, 1202, 1203, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1201, 1202, 1203, 1200, 1200, 1200, 1200, 1200,

     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1201, 1200,

     1202, 1203, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,

     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,

     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,

     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,

     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,

     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,

     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,

     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,

     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,

     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,    0,

     1200, 1200, 1200
    } ;

static yyconst short int yy_nxt[1844] =
    {   0,
       50,   51,   52,   51,   53,   54,   55,   56,   57,   58,
       59,   60,   61,   62,   63,   64,   64,   64,   64,   65,
       66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
       76,   77,   78,   50,   79,   50,   50,   80,   81,   82,
       83,   84,   50,   50,   85,   86,   50,   50,   50,   87,
       88,   50,   89,   90,   91,   92,   52,   92,   93,   94,
       95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
      104,  104,  104,  105,  106,  107,  108,  109,  110,  111,
      112,  113,  114,  115,  116,  117,  118,  119,  120,   91,
       91,  121,  122,  123,  124,  125,   91,  126,  127,  128,

       91,   91,   91,  129,  130,   91,  131,  132,  133,   91,
      226,  134,  235,  135,   91,   91,   91,  236,  237,  136,
      137,  138,  139,  140,  227,   91,  141,  142,  143,  144,
      773,  242,  115,  198,  117,  198,  207,  263,  198,  243,
      121,   91,  144,  198,  145,  115,  198,  117,  222,   91,
      244,  264,  238,  121,   91,  144,  239,  145,  115,  249,
      117,  774,   91,  232,  223,  224,  146,   91,  144,  245,
      145,  115,  240,  117,  222,   91,  250,  276,  258,  146,
       91,  144,  229,  145,  115,  254,  117,  147,   91,  259,
      223,  224,  121,   91,  144,  246,  145,  115,  241,  117,

      147,   91,  247,  248,  265,  121,   91,  144,  775,  145,
      115,  249,  117,  198,   91,  198,  260,  261,  121,   91,
      230,  144,  148,  198,  115,  149,  117,   91,  250,  255,
      231,  256,  121,   91,  209,  229,  148,  236,  237,  149,
      245,   91,  144,  257,  150,  115,  280,  117,  210,  210,
      210,  210,  271,  121,   91,  151,  207,  152,  198,  266,
      248,  278,   91,  242,  153,  144,  198,  150,  115,  279,
      117,  243,  343,  230,  236,  277,  121,   91,  151,  394,
      152,  236,  282,  231,  317,   91,  245,  153,  144,  267,
      154,  115,  268,  117,  330,  269,  159,  249,  242,  121,

       91,  155,  159,  156,  272,  157,  243,  160,   91,  161,
      158,   91,  246,  160,  273,  161,  162,   91,  114,  163,
      248,  331,  162,  241,  164,  529,  114,  163,  222,  138,
      245,  165,  164,  166,  167,  222,  284,  138,   91,  165,
      356,  166,  167,  174,  274,  224,   91,  168,  397,  114,
      169,  223,  224,  241,  138,  170,  145,  332,   91,  288,
      138,  326,  171,  175,  172,  173,  174,  246,  530,   91,
      168,  227,  114,  169,  285,  286,  245,  138,  170,  145,
      114,   91,  289,  138,  333,  171,  175,  172,  173,  776,
      114,  138,   91,  145,  367,   91,  177,  406,  241,  684,

      176,  138,  177,  145,  292,   91,  245,  178,  180,  145,
      176,   91,  293,  178,  180,  145,  179,   91,  182,  138,
      114,  145,  179,   91,  182,  138,  114,  145,  181,   91,
      241,  138,  114,  145,  181,   91,  297,  138,  114,  145,
      183,   91,  402,  138,  114,  145,  183,   91,  356,  138,
      185,  145,  184,   91,  114,  138,  777,  145,  184,   91,
      185,  778,  187,  249,  186,  138,  245,  145,  187,   91,
      304,  245,  336,  138,  186,  145,  114,  188,  337,  138,
      341,  145,   91,  188,  310,  245,  114,  138,   91,  189,
      365,   91,  246,  779,  190,  191,   91,  138,  114,  189,

      248,   91,  391,  306,  190,  191,   91,  192,  114,  138,
      198,  145,  198,   91,  193,  407,  114,  192,   91,  138,
      198,  145,  347,   91,  193,  422,  114,  138,   91,  194,
      330,  195,  196,  197,  114,  428,   91,  138,  348,  194,
      114,  195,  196,  197,  780,  138,   91,  145,  348,   91,
      212,  138,  689,  145,   91,   91,  209,  331,  298,  299,
       91,  781,  213,  212,  214,  214,  214,  214,  328,  329,
      210,  210,  210,  210,  222,  213,  245,  214,  214,  214,
      214,  246,  300,  222,  307,  236,  334,  245,  246,  248,
      223,  224,  312,  321,  209,  335,  248,  376,  782,  223,

      224,  339,  207,  340,  198,  209,  393,  246,  210,  210,
      210,  210,  198,  212,  504,  248,  395,  348,  369,  210,
      210,  210,  210,  377,  411,  213,  416,  214,  214,  214,
      214,  347,  332,  347,  433,  436,  438,  447,  448,  378,
      379,  347,  347,  347,  449,  450,  356,  460,  475,  489,
      588,  376,  495,  500,  518,  520,  534,  453,  505,  333,
      540,  476,  547,  554,  583,  605,  589,  369,  548,  555,
      495,  489,  500,  504,  518,  529,  490,  377,  496,  630,
      520,  501,  519,  521,  534,  540,  502,  583,  605,  708,
      606,  630,  497,  378,  379,  744,  496,  584,  490,  535,

      501,  692,  519,  541,  631,  502,  752,  783,  521,  759,
      497,  784,  785,  606,  786,  709,  631,  505,  530,  710,
      584,  745,  787,  788,  789,  790,  791,  535,  541,  792,
      793,  794,  753,  795,  760,  761,  796,  797,  708,  798,
      799,  800,  803,  801,  804,  805,  807,  808,  809,  813,
      815,  816,  817,  818,  819,  820,  726,  821,  822,  729,
      823,  824,  732,  825,  709,  826,  827,  736,  710,  802,
      828,  829,  806,  830,  831,  741,  832,  833,  744,  834,
      810,  835,  836,  814,  837,  749,  838,  839,  752,  840,
      754,  811,  812,  841,  842,  757,  843,  759,  844,  845,

      846,  847,  848,  849,  850,  851,  852,  853,  854,  855,
      865,  862,  774,  866,  867,  868,  778,  869,  780,  781,
      870,  871,  760,  761,  784,  872,  786,  873,  874,  875,
      876,  877,  878,  879,  880,  856,  881,  857,  796,  882,
      883,  884,  885,  801,  886,  803,  858,  859,  887,  863,
      805,  860,  861,  864,  888,  889,  890,  809,  891,  892,
      893,  813,  894,  895,  816,  817,  896,  821,  822,  802,
      897,  898,  899,  826,  900,  901,  902,  806,  903,  904,
      905,  906,  907,  908,  909,  910,  911,  912,  913,  810,
      841,  842,  843,  844,  845,  814,  846,  914,  848,  849,

      811,  812,  850,  851,  852,  915,  916,  855,  917,  918,
      919,  921,  922,  924,  862,  926,  927,  865,  920,  923,
      928,  929,  868,  869,  925,  930,  931,  932,  933,  934,
      876,  935,  940,  856,  938,  857,  941,  944,  949,  946,
      950,  951,  952,  953,  858,  859,  954,  955,  889,  860,
      861,  956,  863,  957,  958,  959,  864,  936,  937,  960,
      939,  961,  942,  963,  964,  898,  965,  900,  966,  902,
      903,  967,  943,  969,  970,  971,  908,  909,  972,  947,
      945,  948,  974,  975,  976,  977,  978,  979,  980,  981,
      982,  983,  984,  985,  986,  987,  988,  989,  990,  968,

      991,  930,  931,  992,  993,  962,  973,  935,  994,  995,
      938,  996,  997,  941,  998,  999,  944, 1000,  946, 1001,
     1002,  949, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010,
     1011, 1012, 1013,  936,  937,  961,  939, 1015,  963,  942,
     1016, 1017, 1018,  967, 1019, 1020, 1021, 1022,  972,  943,
     1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030,  947,  945,
      948, 1031, 1033, 1035, 1037, 1038, 1039, 1040, 1042, 1043,
     1044,  968, 1045, 1046,  994, 1014,  973,  995, 1047,  962,
     1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1032,
     1034, 1058, 1059, 1060, 1061, 1062, 1013, 1063, 1064, 1065,

     1066, 1067, 1068, 1069, 1070, 1022, 1036, 1071, 1072, 1073,
     1041, 1026, 1027, 1074, 1057, 1075, 1031, 1076, 1033, 1077,
     1035, 1078, 1079, 1080, 1081, 1040, 1082, 1083, 1084, 1044,
     1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1014,
     1094, 1095, 1096, 1056, 1032, 1097, 1034, 1059, 1098, 1099,
     1100, 1101, 1102, 1065, 1066, 1067, 1103, 1069, 1070, 1104,
     1072, 1073, 1105, 1036, 1106, 1107, 1108, 1109, 1041, 1057,
     1110, 1111, 1112, 1113, 1114, 1086, 1115, 1118, 1119, 1120,
     1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1131,
     1132, 1133, 1134, 1105, 1106, 1135, 1136, 1137, 1138, 1113,

     1139, 1115, 1140, 1141, 1118, 1142, 1143, 1144, 1145, 1146,
     1147, 1148, 1126, 1116, 1149, 1151, 1129, 1152, 1132, 1117,
     1153, 1154, 1155, 1156, 1157, 1158, 1139, 1159, 1160, 1161,
     1144, 1130, 1162, 1163, 1164, 1165, 1149, 1166, 1116, 1167,
     1169, 1170, 1171, 1172, 1117, 1173, 1174, 1175, 1176, 1177,
     1162, 1178, 1179, 1180, 1181, 1167, 1182, 1150, 1183, 1130,
     1184, 1185, 1186, 1187, 1188, 1189, 1190, 1178, 1179, 1191,
     1192, 1193, 1194, 1184, 1185, 1195, 1196, 1191, 1197, 1150,
     1198, 1199, 1168,  201,  679,  772,  771,  770,  769,  768,
      767,  766,  765,  764,  763,  762,  758,  757, 1168,  199,

      199,  202,  202,  756,  755,  754,  751,  750,  749,  748,
      747,  746,  743,  742,  741,  740,  739,  738,  737,  736,
      735,  734,  733,  732,  731,  730,  729,  728,  727,  726,
      725,  634,  724,  723,  722,  721,  720,  719,  626,  718,
      717,  716,  715,  714,  713,  712,  711,  707,  706,  705,
      704,  703,  702,  701,  700,  699,  698,  697,  604,  603,
      696,  695,  600,  694,  693,  692,  691,  690,  689,  688,
      687,  686,  685,  684,  588,  587,  586,  683,  682,  681,
      680,  679,  579,  678,  677,  676,  675,  574,  573,  572,
      571,  674,  673,  672,  567,  671,  670,  669,  668,  667,

      666,  665,  664,  663,  662,  661,  660,  659,  658,  657,
      656,  655,  654,  653,  652,  651,  650,  649,  648,  542,
      647,  646,  645,  644,  536,  643,  642,  641,  531,  640,
      639,  638,  637,  636,  635,  634,  522,  633,  632,  516,
      515,  629,  628,  627,  626,  625,  624,  508,  623,  622,
      621,  620,  619,  618,  617,  616,  615,  614,  613,  612,
      611,  610,  609,  608,  607,  485,  604,  483,  603,  602,
      480,  479,  601,  600,  599,  598,  474,  597,  596,  595,
      594,  469,  593,  592,  466,  591,  590,  587,  586,  585,
      582,  581,  580,  579,  578,  577,  576,  575,  574,  573,

      572,  571,  570,  569,  568,  567,  566,  565,  564,  563,
      562,  561,  560,  559,  558,  557,  556,  553,  552,  551,
      550,  549,  546,  545,  544,  543,  542,  419,  418,  539,
      538,  537,  536,  533,  532,  531,  528,  527,  526,  525,
      524,  523,  401,  522,  517,  516,  515,  514,  513,  512,
      511,  510,  509,  508,  507,  506,  503,  499,  498,  494,
      493,  492,  491,  488,  487,  486,  485,  484,  483,  482,
      481,  480,  364,  363,  362,  479,  360,  478,  477,  474,
      355,  473,  472,  471,  470,  469,  468,  467,  466,  465,
      464,  463,  462,  461,  459,  458,  457,  456,  455,  454,

      452,  451,  446,  445,  444,  443,  442,  441,  440,  439,
      437,  317,  435,  434,  432,  431,  430,  429,  427,  426,
      425,  424,  423,  421,  420,  419,  418,  417,  415,  414,
      413,  412,  410,  409,  408,  405,  404,  403,  401,  400,
      399,  398,  396,  392,  390,  389,  388,  387,  386,  385,
      384,  383,  382,  381,  380,  375,  374,  373,  372,  371,
      253,  252,  370,  369,  368,  367,  366,  365,  364,  363,
      362,  361,  360,  359,  358,  357,  356,  355,  354,  353,
      352,  351,  350,  349,  229,  348,  347,  346,  345,  344,
      343,  342,  221,  220,  219,  218,  217,  216,  215,  212,

      211,  209,  208,  206,  205,  204,  203,  200,  200,  338,
      327,  325,  324,  323,  322,  320,  319,  318,  316,  315,
      314,  313,  311,  309,  308,  305,  303,  302,  301,  296,
      295,  294,  291,  290,  287,  283,  245,  281,  241,  275,
      253,  252,  251,  270,  262,  232,  228,  227,  221,  220,
      219,  218,  217,  216,  215,  211,  208,  206,  205,  204,
      203,  200,  200,  253,  252,  251,  241,  234,  233,  232,
      228,  225,  221,  220,  219,  218,  217,  216,  215,  211,
      208,  206,  205,  204,  203,  200,  200, 1200,   49, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,

     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200
    } ;

static yyconst short int yy_chk[1844] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    5,    5,
       74,    5,   80,    5,    5,    5,    5,   80,   80,    5,
        5,    5,    5,    5,   74,    5,    5,    5,    5,    7,
      680,   83,    7,   51,    7,   51,   60,  122,   60,   83,
        7,    7,    8,   51,    7,    8,   60,    8,   72,    7,
       84,  122,   81,    8,    8,    9,   81,    8,    9,   86,
        9,  681,    8,  135,   72,   72,    9,    9,   10,   84,
        9,   10,   81,   10,  112,    9,   86,  135,  118,   10,
       10,   11,   76,   10,   11,  112,   11,   11,   10,  118,
      112,  112,   11,   11,   12,   85,   11,   12,  123,   12,

       12,   11,   85,   85,  123,   12,   12,   13,  682,   12,
       13,  142,   13,   92,   12,   92,  119,  119,   13,   13,
       76,   14,   13,   92,   14,   13,   14,   13,  142,  113,
       76,  113,   14,   14,   62,  116,   14,  121,  121,   14,
      140,   14,   15,  113,   15,   15,  140,   15,   62,   62,
       62,   62,  127,   15,   15,   15,  100,   15,  100,  124,
      127,  137,   15,  124,   15,   16,  100,   16,   16,  137,
       16,  124,  274,  116,  136,  136,   16,   16,   16,  274,
       16,  146,  146,  116,  178,   16,  125,   16,   17,  125,
       17,   17,  125,   17,  190,  125,   19,  128,  139,   17,

       17,   17,   20,   17,  128,   17,  139,   19,   17,   19,
       17,   19,  141,   20,  128,   20,   19,   20,   21,   21,
      141,  190,   20,  178,   21,  408,   22,   22,  133,   21,
      148,   21,   22,   21,   21,  144,  148,   22,   21,   22,
      277,   22,   22,   25,  133,  133,   22,   23,  277,   23,
       23,  144,  144,  151,   25,   23,   25,  191,   25,  151,
       23,  187,   23,   25,   23,   23,   26,  149,  408,   23,
       24,  187,   24,   24,  149,  149,  152,   26,   24,   26,
       27,   26,  152,   24,  191,   24,   26,   24,   24,  683,
       28,   27,   24,   27,  286,   27,   29,  286,  155,  684,

       27,   28,   30,   28,  155,   28,  156,   29,   31,   29,
       28,   29,  156,   30,   32,   30,   29,   30,   33,   31,
       33,   31,   30,   31,   34,   32,   34,   32,   31,   32,
      160,   33,   35,   33,   32,   33,  160,   34,   36,   34,
       33,   34,  282,   35,   37,   35,   34,   35,  282,   36,
       37,   36,   35,   36,   38,   37,  685,   37,   36,   37,
       38,  686,   39,  197,   37,   38,  194,   38,   40,   38,
      165,  165,  194,   39,   38,   39,   41,   39,  194,   40,
      197,   40,   39,   40,  171,  171,   42,   41,   40,   41,
      271,   41,  167,  687,   41,   41,   41,   42,   43,   42,

      167,   42,  271,  167,   42,   42,   42,   43,   44,   43,
      198,   43,  198,   43,   43,  287,   45,   44,   43,   44,
      198,   44,  287,   44,   44,  302,   46,   45,   44,   45,
      330,   45,   45,   45,   47,  308,   45,   46,  302,   46,
       48,   46,   46,   46,  688,   47,   46,   47,  308,   47,
       64,   48,  689,   48,   47,   48,  102,  330,  161,  161,
       48,  690,   64,  104,   64,   64,   64,   64,  189,  189,
      102,  102,  102,  102,  168,  104,  161,  104,  104,  104,
      104,  173,  161,  182,  168,  192,  192,  189,  193,  173,
      168,  168,  173,  182,  210,  193,  193,  259,  691,  182,

      182,  196,  207,  196,  207,  213,  273,  196,  210,  210,
      210,  210,  207,  214,  385,  196,  275,  275,  273,  213,
      213,  213,  213,  259,  291,  214,  296,  214,  214,  214,
      214,  291,  332,  296,  313,  316,  319,  328,  328,  259,
      259,  313,  316,  319,  329,  329,  334,  341,  357,  374,
      463,  376,  380,  383,  398,  399,  412,  334,  385,  332,
      417,  357,  425,  431,  459,  486,  463,  341,  425,  431,
      495,  489,  500,  504,  518,  529,  374,  376,  380,  517,
      520,  383,  398,  399,  534,  540,  383,  583,  605,  617,
      486,  630,  380,  376,  376,  654,  495,  459,  489,  412,

      500,  692,  518,  417,  517,  500,  661,  693,  520,  667,
      495,  694,  695,  605,  696,  617,  630,  504,  529,  617,
      583,  654,  697,  698,  699,  700,  701,  534,  540,  702,
      703,  704,  661,  705,  667,  667,  706,  707,  708,  709,
      710,  711,  713,  712,  714,  715,  716,  717,  718,  719,
      720,  721,  722,  723,  724,  725,  726,  727,  728,  729,
      730,  731,  732,  733,  708,  734,  735,  736,  708,  712,
      737,  738,  715,  739,  740,  741,  742,  743,  744,  745,
      718,  746,  747,  719,  748,  749,  750,  751,  752,  753,
      754,  718,  718,  755,  756,  757,  758,  759,  760,  761,

      762,  763,  764,  765,  766,  767,  768,  769,  770,  771,
      773,  772,  774,  775,  776,  777,  778,  779,  780,  781,
      782,  783,  759,  759,  784,  785,  786,  787,  788,  789,
      790,  791,  792,  793,  794,  771,  795,  771,  796,  797,
      798,  799,  800,  801,  802,  803,  771,  771,  804,  772,
      805,  771,  771,  772,  806,  807,  808,  809,  810,  811,
      812,  813,  814,  815,  816,  817,  820,  821,  822,  801,
      823,  824,  825,  826,  827,  828,  829,  805,  830,  831,
      832,  833,  834,  835,  836,  837,  838,  839,  840,  809,
      841,  842,  843,  844,  845,  813,  846,  847,  848,  849,

      809,  809,  850,  851,  852,  853,  854,  855,  856,  857,
      858,  859,  860,  861,  862,  863,  864,  865,  858,  860,
      866,  867,  868,  869,  861,  870,  871,  872,  873,  874,
      876,  875,  878,  855,  877,  855,  879,  880,  882,  881,
      883,  884,  885,  886,  855,  855,  887,  888,  889,  855,
      855,  890,  862,  891,  892,  893,  862,  875,  875,  894,
      877,  895,  879,  896,  897,  898,  899,  900,  901,  902,
      903,  904,  879,  905,  906,  907,  908,  909,  910,  881,
      880,  881,  911,  912,  913,  914,  915,  916,  917,  919,
      920,  921,  922,  923,  924,  925,  926,  927,  928,  904,

      929,  930,  931,  932,  934,  895,  910,  935,  936,  937,
      938,  939,  940,  941,  942,  943,  944,  945,  946,  947,
      948,  949,  950,  951,  952,  953,  954,  955,  956,  957,
      958,  959,  960,  935,  935,  961,  938,  962,  963,  941,
      964,  965,  966,  967,  968,  969,  970,  971,  972,  941,
      973,  974,  975,  976,  977,  978,  979,  980,  946,  944,
      946,  981,  982,  983,  984,  986,  987,  988,  989,  990,
      991,  967,  992,  993,  994,  960,  972,  995,  996,  961,
      997,  998,  999, 1000, 1001, 1002, 1003, 1004, 1005,  981,
      982, 1006, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016,

     1017, 1018, 1019, 1020, 1021, 1022,  983, 1023, 1024, 1025,
      988, 1026, 1027, 1028, 1005, 1029, 1031, 1032, 1033, 1034,
     1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044,
     1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1013,
     1054, 1055, 1057, 1056, 1031, 1058, 1033, 1059, 1060, 1061,
     1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071,
     1072, 1073, 1074, 1035, 1075, 1076, 1077, 1078, 1040, 1056,
     1079, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1090, 1091,
     1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101,
     1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1111, 1113,

     1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123,
     1124, 1125, 1126, 1087, 1127, 1128, 1129, 1130, 1132, 1087,
     1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143,
     1144, 1100, 1145, 1146, 1147, 1148, 1149, 1150, 1115, 1151,
     1152, 1153, 1154, 1155, 1115, 1156, 1157, 1158, 1160, 1161,
     1162, 1163, 1164, 1165, 1166, 1167, 1168, 1127, 1169, 1129,
     1170, 1171, 1172, 1173, 1174, 1175, 1176, 1178, 1179, 1180,
     1181, 1182, 1183, 1184, 1185, 1186, 1187, 1191, 1192, 1149,
     1193, 1198, 1151, 1202,  679,  678,  677,  676,  675,  674,
      673,  672,  671,  670,  669,  668,  666,  665, 1167, 1201,

     1201, 1203, 1203,  664,  663,  662,  660,  659,  658,  657,
      656,  655,  653,  652,  651,  650,  649,  648,  647,  646,
      645,  644,  643,  642,  641,  640,  639,  638,  637,  636,
      635,  634,  633,  632,  631,  629,  628,  627,  626,  625,
      624,  623,  622,  621,  620,  619,  618,  616,  615,  614,
      613,  612,  611,  610,  609,  608,  607,  606,  604,  603,
      602,  601,  600,  599,  598,  597,  596,  595,  594,  593,
      592,  591,  590,  589,  588,  587,  586,  585,  584,  582,
      581,  580,  579,  578,  577,  576,  575,  574,  573,  572,
      571,  570,  569,  568,  567,  566,  565,  564,  563,  562,

      561,  560,  559,  558,  557,  556,  555,  554,  553,  552,
      551,  550,  549,  548,  547,  546,  545,  544,  543,  542,
      541,  539,  538,  537,  536,  535,  533,  532,  531,  530,
      528,  527,  526,  525,  524,  523,  522,  521,  519,  516,
      515,  514,  513,  512,  511,  510,  509,  508,  507,  506,
      505,  503,  502,  501,  499,  498,  497,  496,  494,  493,
      492,  491,  490,  488,  487,  485,  484,  483,  482,  481,
      480,  479,  478,  477,  476,  475,  474,  473,  472,  471,
      470,  469,  468,  467,  466,  465,  464,  462,  461,  460,
      458,  457,  456,  455,  454,  453,  452,  451,  450,  449,

      448,  447,  446,  445,  444,  443,  442,  441,  440,  439,
      438,  437,  436,  435,  434,  433,  432,  430,  429,  428,
      427,  426,  424,  423,  422,  421,  420,  419,  418,  416,
      415,  414,  413,  411,  410,  409,  407,  406,  405,  404,
      403,  402,  401,  400,  397,  396,  395,  394,  393,  392,
      391,  390,  389,  388,  387,  386,  384,  382,  381,  379,
      378,  377,  375,  373,  372,  371,  370,  369,  368,  367,
      366,  365,  364,  363,  362,  361,  360,  359,  358,  356,
      355,  354,  353,  352,  351,  350,  349,  348,  347,  346,
      345,  344,  343,  342,  340,  339,  338,  337,  336,  335,

      333,  331,  327,  326,  325,  324,  323,  322,  321,  320,
      318,  317,  315,  314,  312,  311,  310,  309,  307,  306,
      305,  304,  303,  301,  300,  299,  298,  297,  295,  294,
      293,  292,  290,  289,  288,  285,  284,  283,  281,  280,
      279,  278,  276,  272,  270,  269,  268,  267,  266,  265,
      264,  263,  262,  261,  260,  258,  257,  256,  255,  254,
      253,  252,  251,  250,  249,  248,  247,  246,  245,  244,
      243,  242,  241,  240,  239,  238,  237,  236,  235,  234,
      233,  232,  231,  230,  229,  228,  227,  226,  225,  224,
      223,  222,  221,  220,  219,  218,  217,  216,  215,  212,

      211,  209,  208,  206,  205,  204,  203,  202,  199,  195,
      188,  186,  185,  184,  183,  181,  180,  179,  177,  176,
      175,  174,  172,  170,  169,  166,  164,  163,  162,  159,
      158,  157,  154,  153,  150,  147,  145,  143,  138,  134,
      132,  131,  130,  126,  120,  117,  115,  114,  111,  110,
      109,  108,  107,  106,  105,  103,  101,   99,   98,   97,
       96,   95,   93,   90,   89,   88,   82,   79,   78,   77,
       75,   73,   71,   70,   69,   68,   67,   66,   65,   63,
       61,   59,   58,   57,   56,   55,   53,   49, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,

     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.lex"
#define INITIAL 0
#define YY_NEVER_INTERACTIVE 1
#define YY_STACK_USED 1
#line 10 "lexer.lex"
#ifdef WIN32
#pragma warning(disable:4127) // while(1) warning
#pragma warning(disable:4102) // unreferenced label warning
#pragma warning(disable:4505) // unreferenced local function
#pragma warning(disable:4267) // smaller type conversion warnings
#pragma warning(disable:4244) // smaller type conversion warnings
#pragma warning(disable:4702) // unreachable code in stl library on relesae
#pragma warning(disable:4211) // defining something as extern and then later on as static
#endif

#include <cstdlib>
#include <stdio.h>
#include <string.h>
#include "lexer.h"
#include "parser.yy.cc.h"

int yyline=1;
int yyerr=0;

void yy_done_parsing() {
	yy_delete_buffer( YY_CURRENT_BUFFER );
	
	delete yy_start_stack;
	yy_start_stack = 0;
	
	yy_init = 1;
}
#define s_global 1

#define s_camera 2

#define s_bbox 3

#define s_mesh 4

#define s_instance 5

#define s_light 6

#define s_pointlight 7

#define s_spherelight 8

#define s_squarelight 9

#define s_material 10

#define s_multimaterial 11

#define s_diffuse 12

#define s_indirectdiffuse 13

#define s_phong 14

#define s_stone 15

#define s_stonebump 16

#define s_reflective 17

#define s_refractive 18

#define s_sphere 19

#define s_blpatch 20

#define s_p0 21

#define s_matrix 22

#define s_hdr 23

#line 1317 "lexer.yy.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 75 "lexer.lex"


#line 1471 "lexer.yy.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1201 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 1200 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 77 "lexer.lex"
{ return YY_TRUE; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 78 "lexer.lex"
{ return YY_TRUE; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 79 "lexer.lex"
{ return YY_TRUE; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 80 "lexer.lex"
{ return YY_TRUE; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 82 "lexer.lex"
{ return YY_FALSE; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 83 "lexer.lex"
{ return YY_FALSE; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 84 "lexer.lex"
{ return YY_FALSE; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 85 "lexer.lex"
{ return YY_FALSE; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 87 "lexer.lex"
{ return YY_MATH_COS; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 88 "lexer.lex"
{ return YY_MATH_SIN; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 89 "lexer.lex"
{ return YY_MATH_TAN; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 90 "lexer.lex"
{ return YY_MATH_ACOS; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 91 "lexer.lex"
{ return YY_MATH_ASIN; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 92 "lexer.lex"
{ return YY_MATH_ATAN; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 93 "lexer.lex"
{ return YY_MATH_ATAN2; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 94 "lexer.lex"
{ return YY_MATH_LN; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 95 "lexer.lex"
{ return YY_MATH_LOG; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 96 "lexer.lex"
{ return YY_MATH_EXP; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 97 "lexer.lex"
{ return YY_MATH_SQRT; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 98 "lexer.lex"
{ return YY_MATH_E; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 99 "lexer.lex"
{ return YY_MATH_PI; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 101 "lexer.lex"
{ return YY_LT; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 102 "lexer.lex"
{ return YY_GT; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 103 "lexer.lex"
{ return YY_LBOX; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 104 "lexer.lex"
{ return YY_LBOX; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 105 "lexer.lex"
{ return YY_LCURLY; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 106 "lexer.lex"
{ yy_pop_state(); return YY_RCURLY; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 107 "lexer.lex"
{ return YY_LPAREN; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 108 "lexer.lex"
{ return YY_RPAREN; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 109 "lexer.lex"
{ return YY_COMMA; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 110 "lexer.lex"
{ return YY_EQUAL; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 111 "lexer.lex"
{ return YY_PLUS; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 112 "lexer.lex"
{ return YY_MINUS; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 113 "lexer.lex"
{ return YY_MUL; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 114 "lexer.lex"
{ return YY_DIV; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 115 "lexer.lex"
{ return YY_CARAT; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 116 "lexer.lex"
{ return YY_BSLASH; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 117 "lexer.lex"
{ return YY_X; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 118 "lexer.lex"
{ yyline++; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 122 "lexer.lex"
{ yy_push_state(s_global); return YY_S_GLOBAL; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 123 "lexer.lex"
{ return YY_SIZE; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 124 "lexer.lex"
{ return YY_POS; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 125 "lexer.lex"
{ return YY_IMG_BGCOLOR; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 126 "lexer.lex"
{ return YY_IMG_FGCOLOR; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 127 "lexer.lex"
{ return YY_GL_BGCOLOR; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 128 "lexer.lex"
{ return YY_GL_SPHERE_SECTIONS; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 129 "lexer.lex"
{ return YY_GL_RENDER_LIGHTS; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 130 "lexer.lex"
{ return YY_GL_RENDER_BBOX; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 131 "lexer.lex"
{ return YY_NUM_THREADS; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 132 "lexer.lex"
{ return YY_THREAD_JOB_SIZE; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 133 "lexer.lex"
{ return YY_RENDER_HANDLER_SLEEP; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 134 "lexer.lex"
{ return YY_RENDER_THREAD_SLEEP; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 135 "lexer.lex"
{ return YY_RENDER_SPINLOCK_SLEEP; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 136 "lexer.lex"
{ return YY_GAUSSIAN_BLUR_MAX; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 137 "lexer.lex"
{ return YY_GAUSSIAN_BLUR_SIGMA; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 138 "lexer.lex"
{ return YY_HEADLESS; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 139 "lexer.lex"
{ return YY_TRIANGLE_TEST; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 140 "lexer.lex"
{ return YY_PROJECTION; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 141 "lexer.lex"
{ return YY_BARYCENTRIC; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 142 "lexer.lex"
{ return YY_PLUCKER; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 143 "lexer.lex"
{ return YY_MOLLER; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 144 "lexer.lex"
{ return YY_BOX_COST; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 145 "lexer.lex"
{ return YY_OBJECT_COST; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 146 "lexer.lex"
{ return YY_PFM; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 147 "lexer.lex"
{ return YY_ANTI_ALIAS; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 148 "lexer.lex"
{ return YY_MAX_DIFFUSE_BOUNCE; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 149 "lexer.lex"
{ return YY_MAX_IOR_BOUNCE; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 150 "lexer.lex"
{ return YY_HDR_BLOOM_POWER; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 151 "lexer.lex"
{ return YY_HDR_BLOOM_RADIUS; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 152 "lexer.lex"
{ return YY_BCSPLINE_B; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 153 "lexer.lex"
{ return YY_BCSPLINE_C; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 155 "lexer.lex"
{ yy_push_state(s_camera); return YY_S_CAMERA; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 156 "lexer.lex"
{ return YY_POS; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 157 "lexer.lex"
{ return YY_DIR; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 158 "lexer.lex"
{ return YY_LOOKAT; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 159 "lexer.lex"
{ return YY_UP; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 160 "lexer.lex"
{ return YY_FOV; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 161 "lexer.lex"
{ return YY_ASPECT; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 162 "lexer.lex"
{ return YY_MIN_DRAW; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 163 "lexer.lex"
{ return YY_MAX_DRAW; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 165 "lexer.lex"
{ yy_push_state(s_p0); return YY_S_P0; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 166 "lexer.lex"
{ return YY_SPIRAL_NUM_SPHERES; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 167 "lexer.lex"
{ return YY_SPIRAL_RADIUS; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 168 "lexer.lex"
{ return YY_LORENZ_DT; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 169 "lexer.lex"
{ return YY_LORENZ_MIN_DISTANCE; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 170 "lexer.lex"
{ return YY_LORENZ_MAX_DISTANCE; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 171 "lexer.lex"
{ return YY_LORENZ_SIGMA; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 172 "lexer.lex"
{ return YY_LORENZ_RHO; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 173 "lexer.lex"
{ return YY_LORENZ_BETA; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 174 "lexer.lex"
{ return YY_LORENZ_RADIUS; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 175 "lexer.lex"
{ return YY_LORENZ_NUM_SPHERES; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 176 "lexer.lex"
{ return YY_LORENZ_START; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 178 "lexer.lex"
{ yy_push_state(s_mesh); return YY_S_MESH; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 179 "lexer.lex"
{ return YY_LOAD; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 181 "lexer.lex"
{ yy_push_state(s_instance); return YY_S_INSTANCE; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 182 "lexer.lex"
{ return YY_GEOMETRY; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 184 "lexer.lex"
{ yy_push_state(s_light); return YY_S_LIGHT; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 185 "lexer.lex"
{ yy_pop_state(); yy_push_state(s_pointlight); return YY_S_POINTLIGHT; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 186 "lexer.lex"
{ yy_pop_state(); yy_push_state(s_spherelight); return YY_S_SPHERELIGHT; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 187 "lexer.lex"
{ yy_pop_state(); yy_push_state(s_squarelight); return YY_S_SQUARELIGHT; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 189 "lexer.lex"
{ return YY_POS; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 190 "lexer.lex"
{ return YY_COLOR; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 191 "lexer.lex"
{ return YY_WATTAGE; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 192 "lexer.lex"
{ return YY_NUM_SAMPLES; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 194 "lexer.lex"
{ return YY_POS; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 195 "lexer.lex"
{ return YY_COLOR; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 196 "lexer.lex"
{ return YY_WATTAGE; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 197 "lexer.lex"
{ return YY_NUM_SAMPLES; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 198 "lexer.lex"
{ return YY_P1; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 199 "lexer.lex"
{ return YY_P2; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 201 "lexer.lex"
{ return YY_POS; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 202 "lexer.lex"
{ return YY_COLOR; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 203 "lexer.lex"
{ return YY_WATTAGE; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 204 "lexer.lex"
{ return YY_NUM_SAMPLES; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 205 "lexer.lex"
{ return YY_RADIUS; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 207 "lexer.lex"
{ yy_push_state(s_material); return YY_S_MATERIAL; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 208 "lexer.lex"
{ yy_push_state(s_multimaterial); return YY_S_MULTIMATERIAL; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 210 "lexer.lex"
{ yy_pop_state(); yy_push_state(s_diffuse); return YY_S_DIFFUSE; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 211 "lexer.lex"
{                 yy_push_state(s_diffuse); return YY_S_DIFFUSE; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 213 "lexer.lex"
{ yy_pop_state(); yy_push_state(s_indirectdiffuse); return YY_S_INDIRECT_DIFFUSE; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 214 "lexer.lex"
{                yy_push_state(s_indirectdiffuse); return YY_S_INDIRECT_DIFFUSE; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 216 "lexer.lex"
{ yy_pop_state(); yy_push_state(s_phong); return YY_S_PHONG; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 217 "lexer.lex"
{                 yy_push_state(s_phong); return YY_S_PHONG; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 219 "lexer.lex"
{ yy_pop_state(); yy_push_state(s_stone); return YY_S_STONE; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 220 "lexer.lex"
{                 yy_push_state(s_stone); return YY_S_STONE; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 222 "lexer.lex"
{ yy_pop_state(); yy_push_state(s_stonebump); return YY_S_STONEBUMP; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 223 "lexer.lex"
{                 yy_push_state(s_stonebump); return YY_S_STONEBUMP; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 225 "lexer.lex"
{ yy_pop_state(); yy_push_state(s_reflective); return YY_S_REFLECTIVE; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 226 "lexer.lex"
{                 yy_push_state(s_reflective); return YY_S_REFLECTIVE; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 228 "lexer.lex"
{ yy_pop_state(); yy_push_state(s_refractive); return YY_S_REFRACTIVE; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 229 "lexer.lex"
{                 yy_push_state(s_refractive); return YY_S_REFRACTIVE; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 231 "lexer.lex"
{ return YY_COLOR; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 232 "lexer.lex"
{ return YY_WEIGHT; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 233 "lexer.lex"
{ return YY_WEIGHT; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 234 "lexer.lex"
{ return YY_AMBIENT; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 235 "lexer.lex"
{ return YY_COLOR; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 236 "lexer.lex"
{ return YY_N; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 237 "lexer.lex"
{ return YY_WEIGHT; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 238 "lexer.lex"
{ return YY_WEIGHT; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 239 "lexer.lex"
{ return YY_IOR; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 240 "lexer.lex"
{ return YY_WEIGHT; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 241 "lexer.lex"
{ return YY_COLOR_A; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 242 "lexer.lex"
{ return YY_COLOR_B; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 243 "lexer.lex"
{ return YY_WEIGHT; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 244 "lexer.lex"
{ return YY_AMPLITUDE; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 245 "lexer.lex"
{ return YY_WEIGHT; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 248 "lexer.lex"
{ yy_push_state(s_sphere); return YY_S_SPHERE; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 249 "lexer.lex"
{ return YY_CENTER; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 250 "lexer.lex"
{ return YY_RADIUS; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 252 "lexer.lex"
{ yy_push_state(s_blpatch); return YY_S_BLPATCH; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 253 "lexer.lex"
{ return YY_P00; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 254 "lexer.lex"
{ return YY_P01; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 255 "lexer.lex"
{ return YY_P10; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 256 "lexer.lex"
{ return YY_P11; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 257 "lexer.lex"
{ return YY_U_CONSTRAINT; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 258 "lexer.lex"
{ return YY_V_CONSTRAINT; }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 260 "lexer.lex"
{ yy_push_state(s_matrix); return YY_S_MATRIX; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 261 "lexer.lex"
{ return YY_PUSH; }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 262 "lexer.lex"
{ return YY_POP; }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 263 "lexer.lex"
{ return YY_SET_IDENTITY; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 264 "lexer.lex"
{ return YY_ROTATE; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 265 "lexer.lex"
{ return YY_TRANSLATE; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 266 "lexer.lex"
{ return YY_SCALE; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 268 "lexer.lex"
{ yylval.str = _strdup(yytext); return YY_STRING; }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 269 "lexer.lex"
{ yylval.integer = atoi(yytext); return YY_PARSE_INT; }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 270 "lexer.lex"
{ yylval.real = (float)atof(yytext); return YY_REAL; }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 272 "lexer.lex"
// eat up whitespace
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 273 "lexer.lex"
// eat up comments 
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 274 "lexer.lex"
{ printf("\nParse error #%d line %d near: %s\n", ++yyerr, yyline, yytext); }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 276 "lexer.lex"
ECHO;
	YY_BREAK
#line 2412 "lexer.yy.cc"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(s_global):
			case YY_STATE_EOF(s_camera):
			case YY_STATE_EOF(s_bbox):
			case YY_STATE_EOF(s_mesh):
			case YY_STATE_EOF(s_instance):
			case YY_STATE_EOF(s_light):
			case YY_STATE_EOF(s_pointlight):
			case YY_STATE_EOF(s_spherelight):
			case YY_STATE_EOF(s_squarelight):
			case YY_STATE_EOF(s_material):
			case YY_STATE_EOF(s_multimaterial):
			case YY_STATE_EOF(s_diffuse):
			case YY_STATE_EOF(s_indirectdiffuse):
			case YY_STATE_EOF(s_phong):
			case YY_STATE_EOF(s_stone):
			case YY_STATE_EOF(s_stonebump):
			case YY_STATE_EOF(s_reflective):
			case YY_STATE_EOF(s_refractive):
			case YY_STATE_EOF(s_sphere):
			case YY_STATE_EOF(s_blpatch):
			case YY_STATE_EOF(s_p0):
			case YY_STATE_EOF(s_matrix):
			case YY_STATE_EOF(s_hdr):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1201 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1201 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1200);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 276 "lexer.lex"

