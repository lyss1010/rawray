#line 2 "lexer.yy.cc"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern int yylineno;
int yylineno = 1;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 116
#define YY_END_OF_BUFFER 117
static yyconst short int yy_acclist[369] =
    {   0,
      117,  115,  116,  113,  115,  116,   32,  116,  115,  116,
      114,  115,  116,  115,  116,   22,  115,  116,   23,  115,
      116,   28,  115,  116,   26,  115,  116,   24,  113,  115,
      116,   27,  115,  116,  112,  115,  116,   29,  115,  116,
      111,  115,  116,   16,  115,  116,   25,  115,  116,   17,
      115,  116,   18,  115,  116,   31,  115,  116,   19,  115,
      116,   30,  115,  116,  115,  116,  115,  116,  115,  116,
      115,  116,   14,  115,  116,  115,  116,  115,  116,  115,
      116,  115,  116,  115,  116,  115,  116,  115,  116,  115,
      116,   20,  115,  116,   21,  115,  116,  116,  113,  116,

      116,  114,  116,  116,   22,  116,   23,  116,   28,  116,
       26,  116,   24,  113,  116,   27,  116,  112,  116,   29,
      116,  111,  116,   16,  116,   25,  116,   17,  116,   18,
      116,   31,  116,   19,  116,   30,  116,  116,  116,  116,
      116,   14,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,   20,  116,   21,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  113,  110,  114,   22,   23,   28,   26,
       24,  113,   27,  112,  112,   29,  111,  112,  111,   16,

       25,   17,   18,   31,   19,   30,   14,   10,   65,   15,
       20,   21,   60,   81,   82,   83,   78,   79,   80,  110,
        3,   12,   10,   11,   65,   15,    4,    5,   36,   58,
       61,   57,   60,   81,   82,   83,   78,   79,   80,   96,
      106,  107,  108,  109,    6,    7,    8,    3,   12,   11,
       84,    4,   13,    5,   36,   58,   61,   57,   85,   96,
      106,  107,  108,  109,    6,    7,    8,    9,   93,   84,
       92,   13,   34,   85,   94,   95,    9,   56,    1,   33,
       93,   90,   92,  102,   35,   55,   34,   62,   59,   94,
       95,  103,  104,  105,   56,    2,    1,   33,   90,  102,

       35,   55,   54,   62,   59,   64,   63,   97,   99,  101,
      100,  103,  104,  105,    2,   86,   98,   77,   50,   54,
       87,   97,   99,  101,  100,   68,   86,   98,   89,   91,
       77,   50,   87,   72,   89,   88,   91,   41,   52,   73,
       88,   53,   71,   76,   53,   39,   42,   43,   51,   74,
       67,   39,   51,   49,   47,   37,   38,   40,   37,   38,
       75,   66,   48,   45,   70,   69,   44,   46
    } ;

static yyconst short int yy_accept[745] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    2,    4,    7,
        9,   11,   14,   16,   19,   22,   25,   28,   32,   35,
       38,   41,   44,   47,   50,   53,   56,   59,   62,   65,
       67,   69,   71,   73,   76,   78,   80,   82,   84,   86,
       88,   90,   92,   95,   98,   99,  101,  102,  104,  105,
      107,  109,  111,  113,  116,  118,  120,  122,  124,  126,
      128,  130,  132,  134,  136,  138,  139,  140,  141,  142,
      144,  145,  146,  147,  148,  149,  150,  151,  152,  153,

      154,  155,  157,  159,  160,  161,  162,  163,  164,  165,
      166,  167,  168,  169,  170,  171,  172,  173,  174,  175,
      176,  177,  178,  179,  180,  181,  182,  183,  184,  185,
      185,  186,  187,  187,  188,  189,  190,  191,  193,  194,
      195,  196,  197,  198,  199,  200,  201,  202,  203,  204,
      205,  206,  207,  207,  207,  207,  207,  207,  207,  207,
      208,  208,  208,  208,  208,  208,  209,  209,  209,  209,
      210,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  212,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,

      213,  213,  213,  214,  215,  216,  217,  218,  219,  220,
      220,  220,  220,  220,  220,  220,  220,  220,  220,  220,
      220,  220,  220,  220,  220,  221,  221,  221,  221,  221,
      221,  222,  222,  222,  223,  223,  223,  223,  224,  225,
      225,  225,  226,  227,  227,  227,  227,  227,  228,  228,
      228,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  230,  230,  230,  230,
      230,  230,  231,  232,  232,  232,  232,  233,  234,  235,
      236,  237,  238,  239,  240,  240,  240,  240,  240,  241,
      241,  241,  241,  241,  241,  241,  242,  243,  244,  245,

      245,  245,  246,  247,  248,  248,  248,  249,  249,  249,
      250,  250,  250,  250,  251,  251,  252,  252,  252,  252,
      252,  252,  253,  253,  254,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      256,  256,  256,  256,  256,  256,  257,  258,  258,  258,
      258,  258,  258,  259,  260,  260,  260,  260,  261,  261,
      261,  261,  261,  261,  261,  262,  263,  264,  265,  265,
      265,  266,  267,  268,  269,  269,  269,  269,  269,  269,
      269,  270,  270,  271,  271,  271,  271,  271,  272,  272,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,

      273,  273,  273,  273,  273,  273,  273,  274,  274,  274,
      274,  274,  274,  275,  275,  276,  277,  277,  277,  277,
      277,  277,  277,  277,  277,  278,  278,  279,  279,  280,
      281,  281,  282,  282,  282,  282,  283,  284,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  286,  286,  286,
      286,  287,  287,  287,  287,  287,  287,  288,  289,  290,
      290,  290,  290,  291,  292,  292,  292,  292,  292,  293,
      294,  294,  294,  295,  296,  297,  298,  299,  299,  299,
      299,  299,  300,  301,  301,  301,  301,  301,  301,  301,
      301,  301,  302,  302,  302,  303,  303,  304,  304,  304,

      304,  304,  304,  304,  304,  304,  305,  306,  307,  308,
      308,  309,  310,  311,  312,  313,  314,  314,  314,  314,
      314,  314,  314,  314,  314,  314,  314,  315,  316,  317,
      318,  318,  318,  318,  319,  319,  319,  319,  319,  319,
      320,  320,  320,  320,  321,  321,  321,  321,  321,  321,
      321,  321,  321,  321,  322,  323,  324,  325,  326,  326,
      327,  327,  327,  327,  327,  327,  327,  327,  327,  327,
      328,  329,  330,  330,  331,  332,  332,  332,  332,  332,
      332,  332,  332,  332,  333,  333,  333,  333,  333,  333,
      333,  333,  333,  333,  333,  333,  334,  334,  334,  334,

      334,  334,  335,  335,  335,  335,  335,  336,  337,  338,
      338,  338,  338,  338,  338,  338,  338,  339,  340,  340,
      340,  340,  340,  340,  340,  341,  341,  341,  341,  341,
      341,  341,  341,  341,  341,  341,  341,  341,  342,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  344,  345,  345,  345,
      346,  346,  347,  347,  347,  347,  347,  347,  347,  347,
      348,  349,  350,  350,  350,  350,  351,  351,  352,  352,
      352,  352,  353,  353,  353,  353,  353,  353,  353,  353,
      353,  354,  354,  354,  354,  354,  354,  354,  355,  355,

      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      356,  356,  356,  357,  358,  358,  358,  358,  358,  358,
      358,  358,  358,  358,  359,  360,  361,  361,  361,  361,
      361,  361,  362,  363,  364,  364,  364,  365,  366,  367,
      368,  368,  369,  369
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
       19,   20,   20,   20,   20,   20,   20,    1,    1,   21,
       22,   23,    1,    1,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
       24,   25,   26,   27,    1,    1,   28,   29,   30,   31,

       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       52,   53,   54,    1,   55,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[56] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst short int yy_base[747] =
    {   0,
        0,    0,   55,    0,   83,    0,  106,  128,  142,  155,
      168,  181,  194,  207,  228,  251,  264,  277,  290,  303,
      324,  345,  358,  371,  384,  398, 1164, 1165,  123, 1165,
     1158,    0, 1155, 1159, 1158, 1157, 1156,  136, 1155,  246,
     1154,  342, 1153, 1152, 1151, 1150, 1149, 1148, 1147,  106,
     1109,   87, 1111,  172, 1107, 1104,  121,  132,  203, 1102,
      136,  113, 1141, 1140, 1165,  185, 1136,    0, 1133, 1137,
     1136, 1135, 1134,  224, 1133,  363, 1132,  431, 1131, 1130,
     1129, 1128, 1127, 1126, 1125,  223, 1098, 1083, 1088,  190,
       93, 1091, 1082,  101, 1079, 1072,  238, 1087,  174,  172,

     1082, 1115, 1114,  242, 1079, 1072,  109,  216,  142, 1085,
     1069,  187, 1075,  268,  272, 1078,  207, 1067,  218, 1080,
      298,  388, 1071,  264, 1078,  311,  307,  351,  307, 1100,
     1102,    0, 1096, 1100, 1099, 1098, 1097,  320, 1096, 1095,
      437, 1094, 1093,  450,  457, 1092, 1091, 1090, 1089, 1088,
     1087, 1086, 1045, 1050, 1057, 1041, 1043, 1036, 1035, 1078,
     1051, 1035, 1035, 1030, 1041, 1072, 1039, 1025, 1025, 1068,
     1067, 1025, 1021, 1019, 1037, 1023, 1028, 1017, 1020,  309,
     1058, 1057, 1013, 1009,  434,  338, 1028, 1016, 1014, 1005,
     1006, 1009, 1009, 1013, 1017,   77,  325,  998,  358,  995,

     1004,  998, 1041, 1040, 1039, 1038, 1037, 1036, 1035,  307,
      994,  999,  254,  988,  986,  992, 1002,  269,  989,  998,
      391,  404,  371,  992, 1025,  980,  984,  983,  995,  990,
     1019,  992,  990, 1016,  988,  969,  980, 1012, 1011,  980,
      976, 1008, 1007,  420,  973,  979,  967, 1003,  972,  956,
     1000,  960,  972,  947,  952,  456,  969,  964,  952,  963,
      959,  958,  952,  228,  960,  987,  951,  956,  958,  938,
      952,  981,  980,  943,  394,  411,  978,  977,  976,  975,
      974,  973,  972,  971,  941,  931,  929,  927,  966,  920,
      937,  929,  931,  916,  926,  959,  958,  957,  956,  925,

      911,  953,  952,  255,  906,  907,  949,  921,  910,  946,
      919,  918,  898,  942,  898,  940,  438,  913,  441,  893,
      907,  936,  892,  934,  933,  888,  892,  902,  885,  900,
      888,  893,  888,  891,  893,  892,  459,  888,  884,  919,
      888,  887,  877,  882,  886,  913,  912,  163,  460,  868,
      462,  867,  909,  908,  877,  861,  862,  904,  877,  872,
      871,  854,  869,  852,  897,  896,  895,  894,  854,  866,
      891,  890,  889,  888,  859,  860,  848,  854,  846,  843,
      881,  846,  879,  833,  463,  851,  846,  875,  844,  873,
      835,  839,  840,  835,  832,  838,  836,  835,  819,  480,

      820,  819,  831,  832,  816,  826,  857,  811,  375,  810,
      828,  827,  852,  806,  850,  849,  816,  804,  807,  801,
      801,  799,  791,  804,  840,  806,  838,  807,  836,  835,
      806,  833,  806,  788,  785,  829,  828,  827,  800,  788,
      785,  797,  790,  791,  777,  775,  818,  481,  791,  776,
      815,  784,  770,  767,  470,  774,  810,  809,  808,  759,
      758,  762,  804,  803,  772,  756,  755,  769,  798,  797,
      494,  485,  796,  795,  794,  793,  792,  761,  753,  755,
      745,  787,  786,  740,  754,  738,  743,  738,  737,  749,
      734,  777,  748,  732,  774,  747,  772,  737,  496,  744,

      728,  735,  482,  486,  737,  766,  765, 1165, 1165,  714,
      763,  762,  761,  760,  759,  758,  522,  727,  711,  458,
      709,  462,  453,  505,  708,  727,  752,  751,  750,  749,
      699,  713,  716,  745,  701,  490,  703,  493,  506,  742,
      705,  710,  710,  738,  697,  697,  701,  691,  516,  696,
      525,  695,  497,  731,  730,  729,  728,  727,  681, 1165,
      676,  685,  685,  693,  681,  688,  693,  680,  688,  716,
      715,  714,  664,  712,  711,  676,  526,  672,  662,  502,
      673,  510,  676,  705,  672,  671,  658,  662,  671,  660,
      668,  657,  656,  518,  665,  694,  667,  527,  535,  531,

      658, 1165,  653,  647,  534,  655,  688,  687,  686,  657,
      638,  639,  645,  648,  632,  631, 1165, 1165,  636,  635,
      645,  642,  641,  624, 1165,  547,  633,  555,  632,  536,
      623,  616,  635,  615,  557,  618,  612,  657,  142,  148,
      201,  263,  303,  311,  326,  377,  518,  530,  526,  531,
      523,  525,  526,  538,  528, 1165, 1165,  540,  530,  577,
      579,  581,  537,  549,  539,  540,  544,  560,  589, 1165,
     1165,  590,  546,  547,  563, 1165,  564, 1165,  596,  569,
      563,  598,  555,  560,  563,  564,  604,  569,  606,  570,
      608,  583,  584,  568,  569,  564,  582, 1165,  576,  587,

      589,  619,  583,  621,  592,  585,  586,  596,  597, 1165,
      590,  585,  630,  631,  602,  635,  599,  607,  610,  611,
      597,  598,  617, 1165,  644,  645,  616,  617,  608,  621,
      622, 1165, 1165, 1165,  612,  624, 1165, 1165, 1165, 1165,
      614, 1165, 1165,  681,  657,  683
    } ;

static yyconst short int yy_def[747] =
    {   0,
      743,    1,  743,    3,    3,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,  743,  743,  743,  743,
      744,  745,  746,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  744,  745,  746,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,

      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  744,
      743,  745,  746,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,

      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,

      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,

      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,

      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,

      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,

      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,    0,  743,  743,  743
    } ;

static yyconst short int yy_nxt[1221] =
    {   0,
       28,   29,   30,   29,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   42,   42,   42,   42,
       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       53,   54,   28,   55,   28,   56,   28,   28,   57,   58,
       28,   28,   59,   28,   60,   61,   62,   28,   28,   28,
       28,   28,   28,   63,   64,   65,   66,   30,   66,   67,
       68,   69,   70,   71,   72,   73,   74,   75,   76,   77,
       78,   78,   78,   78,   78,   79,   80,   81,   82,   83,
       84,   85,   86,   87,   88,   89,   90,   65,   91,   92,
       93,   65,   65,   94,   95,   96,   65,   97,   65,   98,

       99,  100,   65,   65,  101,   65,   65,   65,  102,  103,
      104,   65,  227,  105,  157,  106,   65,   65,   65,  271,
      184,  107,  108,   65,  129,  109,  129,   65,  158,  110,
      111,  185,   65,   86,  129,  153,   89,  138,   65,  129,
      179,  166,  167,  660,   94,   65,  112,  129,  113,  166,
      199,  154,  155,   65,  114,   86,  165,  180,   89,  168,
       65,  166,  167,  169,  409,  175,   94,   65,  112,   86,
      113,  176,   89,  160,   65,   65,  114,  171,  177,  178,
      115,   65,   86,  202,  113,   89,  129,   65,  129,   65,
      410,  160,  661,  115,   65,   86,  129,  113,   89,  179,

       65,  116,   65,  204,  205,  206,   94,   65,   86,  176,
      113,   89,  161,   65,  116,   65,  194,  178,  170,   94,
       65,   86,  162,  113,   89,  138,   65,  129,   65,  337,
      161,  662,   94,   65,   86,  129,  117,   89,  171,   65,
      162,   65,  171,  200,  172,   94,   65,  140,  212,  117,
      173,  201,  153,  171,   65,   86,  373,  118,   89,  214,
       65,  141,  141,  141,  141,  141,   94,   65,  154,  155,
      119,  153,  374,  171,  338,   65,  190,  120,   86,  191,
      118,   89,  192,   65,  207,  208,  209,  196,  155,   94,
       65,   86,  288,  119,   89,  219,   65,  663,   65,  231,

      120,  293,  121,   65,   86,  158,  113,   89,  129,   65,
      129,   65,  166,  210,  232,  121,   65,  122,  129,  113,
      123,  138,   65,  129,   65,  216,  221,  222,   94,   65,
      122,  129,  113,  123,  285,   65,  252,   65,  166,  167,
      239,   94,   65,  143,  253,  113,  171,  166,  223,  664,
       65,   86,  665,  124,   89,  144,   65,  145,  145,  145,
      145,  145,   94,   65,  140,  260,  113,  666,  125,  272,
      232,   65,   86,  261,  124,   89,  409,   65,  141,  141,
      141,  141,  141,   94,   65,   86,  176,  113,   89,  125,
       65,  239,   65,  224,  178,  349,   94,   65,   86,  274,

      126,   89,  410,   65,  239,   65,  296,  297,  667,   94,
       65,   86,  351,  126,   89,  300,   65,  153,   65,  298,
      299,  317,  127,   65,  350,   86,  113,  217,   89,  128,
       65,   65,  143,  154,  155,  256,  127,   65,  140,  317,
      113,  352,  385,  128,  144,   65,  145,  145,  145,  145,
      145,  140,  141,  141,  141,  141,  141,  256,  143,  318,
      337,  349,  257,  351,  385,  141,  141,  141,  141,  141,
      144,  499,  145,  145,  145,  145,  145,  318,  258,  259,
      386,  448,  448,  549,  257,  561,  524,  551,  566,  564,
      350,  577,  352,  562,  580,  517,  565,  499,  594,  567,

      258,  259,  386,  580,  500,  338,  524,  582,  449,  449,
      550,  582,  450,  450,  552,  501,  502,  549,  578,  594,
      503,  504,  518,  517,  519,  525,  551,  577,  626,  526,
      500,  581,  630,  520,  521,  635,  628,  630,  522,  523,
      581,  501,  502,  595,  550,  525,  503,  504,  626,  526,
      518,  583,  519,  552,  578,  583,  628,  627,  635,  668,
      669,  520,  521,  670,  595,  629,  522,  523,  671,  672,
      673,  674,  675,  676,  677,  678,  631,  627,  660,  636,
      679,  631,  682,  683,  684,  629,  685,  686,  687,  688,
      689,  691,  692,  693,  694,  695,  696,  679,  697,  682,

      698,  699,  636,  700,  701,  702,  704,  689,  705,  691,
      706,  707,  708,  709,  710,  711,  712,  713,  680,  714,
      702,  715,  716,  718,  681,  719,  720,  721,  722,  723,
      724,  725,  726,  727,  690,  680,  716,  728,  729,  730,
      731,  681,  732,  733,  734,  725,  726,  735,  736,  703,
      737,  690,  738,  739,  740,  741,  742,  132,  638,  659,
      658,  657,  656,  655,  703,  654,  717,  653,  652,  651,
      650,  649,  648,  647,  646,  645,  644,  643,  642,  641,
      717,  130,  130,  133,  133,  640,  639,  609,  638,  607,
      637,  634,  633,  632,  625,  596,  624,  623,  622,  621,

      620,  619,  618,  617,  616,  615,  584,  614,  613,  612,
      611,  610,  575,  609,  608,  607,  571,  570,  606,  605,
      604,  603,  602,  601,  600,  599,  598,  597,  558,  557,
      556,  555,  596,  593,  592,  591,  590,  589,  588,  544,
      587,  586,  585,  584,  579,  576,  575,  574,  573,  572,
      571,  570,  528,  527,  569,  568,  563,  560,  559,  516,
      515,  558,  557,  556,  555,  554,  507,  506,  553,  548,
      547,  546,  545,  544,  543,  495,  542,  541,  492,  540,
      539,  538,  537,  536,  535,  534,  533,  483,  482,  532,
      531,  530,  529,  477,  476,  528,  474,  527,  516,  515,

      514,  513,  512,  511,  464,  463,  510,  509,  508,  507,
      506,  457,  505,  498,  497,  496,  495,  494,  493,  492,
      491,  490,  489,  488,  487,  486,  485,  484,  483,  437,
      482,  481,  480,  479,  432,  478,  477,  476,  475,  474,
      473,  425,  472,  471,  470,  469,  468,  467,  466,  465,
      464,  463,  462,  413,  461,  460,  459,  458,  457,  456,
      455,  454,  453,  452,  451,  447,  446,  445,  444,  443,
      442,  441,  440,  439,  390,  438,  437,  436,  435,  434,
      383,  433,  432,  431,  430,  429,  428,  427,  426,  425,
      373,  372,  371,  424,  423,  368,  367,  366,  365,  422,

      421,  420,  419,  418,  417,  358,  416,  415,  414,  413,
      353,  412,  411,  347,  346,  408,  407,  406,  405,  404,
      340,  403,  402,  401,  400,  399,  398,  397,  396,  395,
      394,  393,  392,  391,  325,  390,  389,  322,  388,  387,
      384,  383,  382,  314,  381,  380,  379,  310,  378,  377,
      307,  376,  375,  372,  371,  370,  369,  368,  367,  366,
      365,  364,  363,  362,  361,  360,  359,  358,  357,  356,
      355,  354,  284,  283,  282,  281,  280,  279,  278,  353,
      348,  347,  346,  345,  344,  343,  342,  341,  340,  339,
      336,  335,  334,  333,  332,  331,  330,  329,  328,  327,

      326,  325,  324,  323,  322,  321,  320,  319,  243,  242,
      316,  315,  314,  238,  313,  312,  311,  310,  309,  308,
      307,  306,  305,  304,  303,  302,  225,  301,  295,  294,
      292,  291,  290,  289,  287,  286,  284,  283,  282,  281,
      280,  279,  278,  277,  276,  275,  273,  270,  269,  268,
      267,  266,  265,  264,  263,  262,  255,  254,  182,  181,
      251,  250,  249,  248,  247,  246,  245,  244,  243,  242,
      241,  240,  239,  238,  237,  236,  235,  234,  233,  160,
      232,  231,  230,  229,  228,  227,  226,  152,  151,  150,
      149,  148,  147,  146,  143,  142,  140,  139,  137,  136,

      135,  134,  131,  225,  131,  220,  218,  215,  213,  211,
      171,  203,  179,  198,  197,  182,  181,  195,  193,  189,
      188,  187,  186,  159,  158,  183,  152,  151,  150,  149,
      148,  147,  146,  142,  139,  137,  136,  135,  134,  131,
      131,  182,  181,  174,  164,  163,  159,  156,  152,  151,
      150,  149,  148,  147,  146,  142,  139,  137,  136,  135,
      134,  131,  131,  743,   27,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,

      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743
    } ;

static yyconst short int yy_chk[1221] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        5,    5,  196,    5,   52,    5,    5,    5,    5,  196,
       91,    5,    5,    5,   29,    5,   29,    5,   52,    5,
        5,   91,    5,    7,   29,   50,    7,   38,    7,   38,
       62,   94,   94,  639,    7,    7,    7,   38,    7,  107,
      107,   50,   50,    7,    7,    8,   57,   62,    8,   58,
        8,   57,   57,   58,  348,   61,    8,    8,    8,    9,
        8,   61,    9,   54,    9,    8,    8,  109,   61,   61,
        9,    9,   10,  109,    9,   10,   66,   10,   66,    9,
      348,   90,  640,   10,   10,   11,   66,   10,   11,  100,

       11,   11,   10,  112,  112,  112,   11,   11,   12,   99,
       11,   12,   54,   12,   12,   11,  100,   99,   59,   12,
       12,   13,   54,   12,   13,   74,   13,   74,   12,  264,
       90,  641,   13,   13,   14,   74,   13,   14,   59,   14,
       90,   13,  117,  108,   59,   14,   14,   40,  117,   14,
       59,  108,   86,  119,   14,   15,  304,   15,   15,  119,
       15,   40,   40,   40,   40,   40,   15,   15,   86,   86,
       15,  104,  304,   97,  264,   15,   97,   15,   16,   97,
       16,   16,   97,   16,  114,  114,  114,  104,  104,   16,
       16,   17,  213,   16,   17,  124,   17,  642,   16,  213,

       16,  218,   17,   17,   18,  124,   17,   18,  129,   18,
      129,   17,  115,  115,  218,   18,   18,   19,  129,   18,
       19,  138,   19,  138,   18,  121,  126,  126,   19,   19,
       20,  138,   19,   20,  210,   20,  180,   19,  121,  121,
      210,   20,   20,   42,  180,   20,  126,  127,  127,  643,
       20,   21,  644,   21,   21,   42,   21,   42,   42,   42,
       42,   42,   21,   21,   76,  186,   21,  645,   21,  197,
      197,   21,   22,  186,   22,   22,  409,   22,   76,   76,
       76,   76,   76,   22,   22,   23,  128,   22,   23,   22,
       23,  199,   22,  128,  128,  275,   23,   23,   24,  199,

       23,   24,  409,   24,  223,   23,  221,  221,  646,   24,
       24,   25,  276,   24,   25,  223,   25,  122,   24,  222,
      222,  244,   25,   25,  275,   26,   25,  122,   26,   25,
       26,   25,   78,  122,  122,  185,   26,   26,  141,  317,
       26,  276,  319,   26,   78,   26,   78,   78,   78,   78,
       78,  144,  141,  141,  141,  141,  141,  256,  145,  244,
      337,  349,  185,  351,  385,  144,  144,  144,  144,  144,
      145,  455,  145,  145,  145,  145,  145,  317,  185,  185,
      319,  400,  448,  503,  256,  520,  472,  504,  523,  522,
      349,  536,  351,  520,  538,  471,  522,  499,  553,  523,

      256,  256,  385,  580,  455,  337,  524,  539,  400,  448,
      503,  582,  400,  448,  504,  455,  455,  549,  536,  594,
      455,  455,  471,  517,  471,  472,  551,  577,  598,  472,
      499,  538,  600,  471,  471,  605,  599,  630,  471,  471,
      580,  499,  499,  553,  549,  524,  499,  499,  626,  524,
      517,  539,  517,  551,  577,  582,  628,  598,  635,  647,
      648,  517,  517,  649,  594,  599,  517,  517,  650,  651,
      652,  653,  654,  655,  658,  659,  600,  626,  660,  605,
      661,  630,  662,  663,  664,  628,  665,  666,  667,  668,
      669,  672,  673,  674,  675,  677,  680,  679,  681,  682,

      683,  684,  635,  685,  686,  687,  688,  689,  690,  691,
      692,  693,  694,  695,  696,  697,  699,  700,  661,  701,
      702,  703,  704,  705,  661,  706,  707,  708,  709,  711,
      712,  713,  714,  715,  669,  679,  716,  717,  718,  719,
      720,  679,  721,  722,  723,  725,  726,  727,  728,  687,
      729,  689,  730,  731,  735,  736,  741,  745,  638,  637,
      636,  634,  633,  632,  702,  631,  704,  629,  627,  624,
      623,  622,  621,  620,  619,  616,  615,  614,  613,  612,
      716,  744,  744,  746,  746,  611,  610,  609,  608,  607,
      606,  604,  603,  601,  597,  596,  595,  593,  592,  591,

      590,  589,  588,  587,  586,  585,  584,  583,  581,  579,
      578,  576,  575,  574,  573,  572,  571,  570,  569,  568,
      567,  566,  565,  564,  563,  562,  561,  559,  558,  557,
      556,  555,  554,  552,  550,  548,  547,  546,  545,  544,
      543,  542,  541,  540,  537,  535,  534,  533,  532,  531,
      530,  529,  528,  527,  526,  525,  521,  519,  518,  516,
      515,  514,  513,  512,  511,  510,  507,  506,  505,  502,
      501,  500,  498,  497,  496,  495,  494,  493,  492,  491,
      490,  489,  488,  487,  486,  485,  484,  483,  482,  481,
      480,  479,  478,  477,  476,  475,  474,  473,  470,  469,

      468,  467,  466,  465,  464,  463,  462,  461,  460,  459,
      458,  457,  456,  454,  453,  452,  451,  450,  449,  447,
      446,  445,  444,  443,  442,  441,  440,  439,  438,  437,
      436,  435,  434,  433,  432,  431,  430,  429,  428,  427,
      426,  425,  424,  423,  422,  421,  420,  419,  418,  417,
      416,  415,  414,  413,  412,  411,  410,  408,  407,  406,
      405,  404,  403,  402,  401,  399,  398,  397,  396,  395,
      394,  393,  392,  391,  390,  389,  388,  387,  386,  384,
      383,  382,  381,  380,  379,  378,  377,  376,  375,  374,
      373,  372,  371,  370,  369,  368,  367,  366,  365,  364,

      363,  362,  361,  360,  359,  358,  357,  356,  355,  354,
      353,  352,  350,  347,  346,  345,  344,  343,  342,  341,
      340,  339,  338,  336,  335,  334,  333,  332,  331,  330,
      329,  328,  327,  326,  325,  324,  323,  322,  321,  320,
      318,  316,  315,  314,  313,  312,  311,  310,  309,  308,
      307,  306,  305,  303,  302,  301,  300,  299,  298,  297,
      296,  295,  294,  293,  292,  291,  290,  289,  288,  287,
      286,  285,  284,  283,  282,  281,  280,  279,  278,  277,
      274,  273,  272,  271,  270,  269,  268,  267,  266,  265,
      263,  262,  261,  260,  259,  258,  257,  255,  254,  253,

      252,  251,  250,  249,  248,  247,  246,  245,  243,  242,
      241,  240,  239,  238,  237,  236,  235,  234,  233,  232,
      231,  230,  229,  228,  227,  226,  225,  224,  220,  219,
      217,  216,  215,  214,  212,  211,  209,  208,  207,  206,
      205,  204,  203,  202,  201,  200,  198,  195,  194,  193,
      192,  191,  190,  189,  188,  187,  184,  183,  182,  181,
      179,  178,  177,  176,  175,  174,  173,  172,  171,  170,
      169,  168,  167,  166,  165,  164,  163,  162,  161,  160,
      159,  158,  157,  156,  155,  154,  153,  152,  151,  150,
      149,  148,  147,  146,  143,  142,  140,  139,  137,  136,

      135,  134,  133,  131,  130,  125,  123,  120,  118,  116,
      113,  111,  110,  106,  105,  103,  102,  101,   98,   96,
       95,   93,   92,   89,   88,   87,   85,   84,   83,   82,
       81,   80,   79,   77,   75,   73,   72,   71,   70,   69,
       67,   64,   63,   60,   56,   55,   53,   51,   49,   48,
       47,   46,   45,   44,   43,   41,   39,   37,   36,   35,
       34,   33,   31,   27,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,

      743,  743,  743,  743,  743,  743,  743,  743,  743,  743,
      743,  743,  743,  743,  743,  743,  743,  743,  743,  743
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.lex"
#define INITIAL 0
#define YY_NEVER_INTERACTIVE 1
#define YY_STACK_USED 1
#line 10 "lexer.lex"
#ifdef WIN32
#pragma warning(disable:4127) // while(1) warning
#pragma warning(disable:4102) // unreferenced label warning
#pragma warning(disable:4505) // unreferenced local function
#pragma warning(disable:4267) // smaller type conversion warnings
#pragma warning(disable:4244) // smaller type conversion warnings
#endif

#include <cstdlib>
#include <stdio.h>
#include <string.h>
#include "lexer.h"
#include "parser.yy.cc.h"

int yyline=1;
int yyerr=0;

void yy_done_parsing() {
	yy_delete_buffer( YY_CURRENT_BUFFER );
	
	delete yy_start_stack;
	yy_start_stack = 0;
	
	yy_init = 1;
}
#define s_global 1

#define s_camera 2

#define s_triangle 3

#define s_mesh 4

#define s_instance 5

#define s_light 6

#define s_pointlight 7

#define s_material 8

#define s_lambert 9

#define s_sphere 10

#define s_blpatch 11

#define s_p0 12

#line 984 "lexer.yy.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 62 "lexer.lex"


#line 1138 "lexer.yy.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 744 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 743 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 64 "lexer.lex"
{ return YY_ENABLE; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 65 "lexer.lex"
{ return YY_DISABLE; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 66 "lexer.lex"
{ return YY_MATH_COS; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 67 "lexer.lex"
{ return YY_MATH_SIN; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 68 "lexer.lex"
{ return YY_MATH_TAN; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 69 "lexer.lex"
{ return YY_MATH_ACOS; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 70 "lexer.lex"
{ return YY_MATH_ASIN; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 71 "lexer.lex"
{ return YY_MATH_ATAN; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 72 "lexer.lex"
{ return YY_MATH_ATAN2; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 73 "lexer.lex"
{ return YY_MATH_LN; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 74 "lexer.lex"
{ return YY_MATH_LOG; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 75 "lexer.lex"
{ return YY_MATH_EXP; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 76 "lexer.lex"
{ return YY_MATH_SQRT; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 77 "lexer.lex"
{ return YY_MATH_E; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 78 "lexer.lex"
{ return YY_MATH_PI; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 80 "lexer.lex"
{ return YY_LT; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 81 "lexer.lex"
{ return YY_GT; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 82 "lexer.lex"
{ return YY_LBOX; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 83 "lexer.lex"
{ return YY_LBOX; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 84 "lexer.lex"
{ return YY_LCURLY; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 85 "lexer.lex"
{ yy_pop_state(); return YY_RCURLY; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 86 "lexer.lex"
{ return YY_LPAREN; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 87 "lexer.lex"
{ return YY_RPAREN; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 88 "lexer.lex"
{ return YY_COMMA; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 89 "lexer.lex"
{ return YY_EQUAL; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 90 "lexer.lex"
{ return YY_PLUS; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 91 "lexer.lex"
{ return YY_MINUS; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 92 "lexer.lex"
{ return YY_MUL; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 93 "lexer.lex"
{ return YY_DIV; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 94 "lexer.lex"
{ return YY_CARAT; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 95 "lexer.lex"
{ return YY_BSLASH; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 96 "lexer.lex"
{ yyline++; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 99 "lexer.lex"
{ yy_push_state(s_global); return YY_S_GLOBAL; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 100 "lexer.lex"
{ return YY_WIDTH; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 101 "lexer.lex"
{ return YY_HEIGHT; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 102 "lexer.lex"
{ return YY_POS; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 103 "lexer.lex"
{ return YY_IMG_BGCOLOR; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 104 "lexer.lex"
{ return YY_IMG_FGCOLOR; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 105 "lexer.lex"
{ return YY_GL_BGCOLOR; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 106 "lexer.lex"
{ return YY_GL_SPHERE_SECTIONS; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 107 "lexer.lex"
{ return YY_NUM_THREADS; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 108 "lexer.lex"
{ return YY_RENDER_X_BLOCK; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 109 "lexer.lex"
{ return YY_RENDER_Y_BLOCK; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 110 "lexer.lex"
{ return YY_RENDER_HANDLER_SLEEP; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 111 "lexer.lex"
{ return YY_RENDER_THREAD_SLEEP; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 112 "lexer.lex"
{ return YY_RENDER_SPINLOCK_SLEEP; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 113 "lexer.lex"
{ return YY_GAUSSIAN_BLUR_MAX; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 114 "lexer.lex"
{ return YY_GAUSSIAN_BLUR_SIGMA; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 115 "lexer.lex"
{ return YY_GL_RENDER_LIGHTS; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 116 "lexer.lex"
{ return YY_HEADLESS; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 117 "lexer.lex"
{ return YY_TRIANGLE_TEST; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 118 "lexer.lex"
{ return YY_PROJECTION; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 119 "lexer.lex"
{ return YY_BARYCENTRIC; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 120 "lexer.lex"
{ return YY_PLUCKER; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 121 "lexer.lex"
{ return YY_MOLLER; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 124 "lexer.lex"
{ yy_push_state(s_camera); return YY_S_CAMERA; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 125 "lexer.lex"
{ return YY_POS; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 126 "lexer.lex"
{ return YY_DIR; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 127 "lexer.lex"
{ return YY_LOOKAT; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 128 "lexer.lex"
{ return YY_UP; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 129 "lexer.lex"
{ return YY_FOV; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 130 "lexer.lex"
{ return YY_ASPECT; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 131 "lexer.lex"
{ return YY_MIN_DRAW; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 132 "lexer.lex"
{ return YY_MAX_DRAW; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 134 "lexer.lex"
{ yy_push_state(s_p0); return YY_S_P0; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 135 "lexer.lex"
{ return YY_SPIRAL_NUM_SPHERES; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 136 "lexer.lex"
{ return YY_SPIRAL_RADIUS; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 137 "lexer.lex"
{ return YY_LORENZ_DT; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 138 "lexer.lex"
{ return YY_LORENZ_MIN_DISTANCE; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 139 "lexer.lex"
{ return YY_LORENZ_MAX_DISTANCE; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 140 "lexer.lex"
{ return YY_LORENZ_SIGMA; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 141 "lexer.lex"
{ return YY_LORENZ_RHO; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 142 "lexer.lex"
{ return YY_LORENZ_BETA; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 143 "lexer.lex"
{ return YY_LORENZ_RADIUS; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 144 "lexer.lex"
{ return YY_LORENZ_NUM_SPHERES; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 145 "lexer.lex"
{ return YY_LORENZ_START; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 147 "lexer.lex"
{ yy_push_state(s_triangle); return YY_S_TRIANGLE; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 148 "lexer.lex"
{ return YY_V1; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 149 "lexer.lex"
{ return YY_V2; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 150 "lexer.lex"
{ return YY_V3; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 151 "lexer.lex"
{ return YY_N1; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 152 "lexer.lex"
{ return YY_N2; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 153 "lexer.lex"
{ return YY_N3; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 155 "lexer.lex"
{ yy_push_state(s_mesh); return YY_S_MESH; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 156 "lexer.lex"
{ return YY_LOAD; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 158 "lexer.lex"
{ yy_push_state(s_instance); return YY_S_INSTANCE; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 159 "lexer.lex"
{ return YY_GEOMETRY; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 161 "lexer.lex"
{ return YY_PUSHMATRIX; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 162 "lexer.lex"
{ return YY_POPMATRIX; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 163 "lexer.lex"
{ return YY_ROTATE; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 164 "lexer.lex"
{ return YY_TRANSLATE; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 165 "lexer.lex"
{ return YY_SCALE; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 167 "lexer.lex"
{ yy_push_state(s_light); return YY_S_LIGHT; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 168 "lexer.lex"
{ yy_pop_state(); yy_push_state(s_pointlight); return YY_S_POINTLIGHT; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 169 "lexer.lex"
{ return YY_COLOR; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 170 "lexer.lex"
{ return YY_POS; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 171 "lexer.lex"
{ return YY_WATTAGE; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 173 "lexer.lex"
{ yy_push_state(s_material); return YY_S_MATERIAL; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 174 "lexer.lex"
{ yy_pop_state(); yy_push_state(s_lambert); return YY_S_LAMBERT; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 175 "lexer.lex"
{ return YY_DIFFUSE; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 176 "lexer.lex"
{ return YY_AMBIENT; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 178 "lexer.lex"
{ yy_push_state(s_sphere); return YY_S_SPHERE; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 179 "lexer.lex"
{ return YY_CENTER; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 180 "lexer.lex"
{ return YY_RADIUS; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 182 "lexer.lex"
{ yy_push_state(s_blpatch); return YY_S_BLPATCH; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 183 "lexer.lex"
{ return YY_P00; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 184 "lexer.lex"
{ return YY_P01; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 185 "lexer.lex"
{ return YY_P10; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 186 "lexer.lex"
{ return YY_P11; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 190 "lexer.lex"
{ yylval.str = _strdup(yytext); return YY_STRING; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 191 "lexer.lex"
{ yylval.integer = atoi(yytext); return YY_PARSE_INT; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 192 "lexer.lex"
{ yylval.real = (float)atof(yytext); return YY_REAL; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 194 "lexer.lex"
// eat up whitespace
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 195 "lexer.lex"
// eat up comments 
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 196 "lexer.lex"
{ printf("\nParse error #%d line %d near: %s\n", ++yyerr, yyline, yytext); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 198 "lexer.lex"
ECHO;
	YY_BREAK
#line 1809 "lexer.yy.cc"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(s_global):
			case YY_STATE_EOF(s_camera):
			case YY_STATE_EOF(s_triangle):
			case YY_STATE_EOF(s_mesh):
			case YY_STATE_EOF(s_instance):
			case YY_STATE_EOF(s_light):
			case YY_STATE_EOF(s_pointlight):
			case YY_STATE_EOF(s_material):
			case YY_STATE_EOF(s_lambert):
			case YY_STATE_EOF(s_sphere):
			case YY_STATE_EOF(s_blpatch):
			case YY_STATE_EOF(s_p0):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 744 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 744 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 743);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 198 "lexer.lex"

