#line 2 "lexer.yy.cc"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern int yylineno;
int yylineno = 1;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 120
#define YY_END_OF_BUFFER 121
static yyconst short int yy_acclist[381] =
    {   0,
      121,  119,  120,  117,  119,  120,   32,  120,  119,  120,
      118,  119,  120,  119,  120,   22,  119,  120,   23,  119,
      120,   28,  119,  120,   26,  119,  120,   24,  117,  119,
      120,   27,  119,  120,  116,  119,  120,   29,  119,  120,
      115,  119,  120,   16,  119,  120,   25,  119,  120,   17,
      119,  120,   18,  119,  120,   31,  119,  120,   19,  119,
      120,   30,  119,  120,  119,  120,  119,  120,  119,  120,
      119,  120,   14,  119,  120,  119,  120,  119,  120,  119,
      120,  119,  120,  119,  120,  119,  120,  119,  120,  119,
      120,   20,  119,  120,   21,  119,  120,  120,  117,  120,

      120,  118,  120,  120,   22,  120,   23,  120,   28,  120,
       26,  120,   24,  117,  120,   27,  120,  116,  120,   29,
      120,  115,  120,   16,  120,   25,  120,   17,  120,   18,
      120,   31,  120,   19,  120,   30,  120,  120,  120,  120,
      120,   14,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,   20,  120,   21,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  117,  114,  118,
       22,   23,   28,   26,   24,  117,   27,  116,  116,   29,

      115,  116,  115,   16,   25,   17,   18,   31,   19,   30,
       14,   10,   65,   15,   20,   21,   60,   81,   82,   83,
       78,   79,   80,  114,    3,   12,   10,   11,   65,   15,
        4,    5,   36,   58,   61,   57,   60,   81,   82,   83,
       78,   79,   80,   96,  100,  110,  111,  112,  113,    6,
        7,    8,    3,   12,   11,   84,    4,   13,    5,   36,
       58,   61,   57,   85,   96,  100,  110,  111,  112,  113,
        6,    7,    8,    9,   93,   84,   92,   13,   34,   85,
       94,   95,   99,    9,   56,    1,   33,   93,   90,   92,
      106,   35,   55,   34,   62,   59,   94,   95,   99,  107,

      108,  109,   56,    2,    1,   33,   90,  106,   35,   55,
       54,   62,   59,   64,   63,   97,  101,  103,  105,  104,
      107,  108,  109,    2,   86,  102,   77,   50,   54,   87,
       98,   97,  101,  103,  105,  104,   68,   86,  102,   89,
       91,   77,   50,   87,   98,   72,   89,   88,   91,   41,
       52,   73,   88,   53,   71,   76,   53,   39,   42,   43,
       51,   74,   67,   39,   51,   49,   47,   37,   38,   40,
       37,   38,   75,   66,   48,   45,   70,   69,   44,   46
    } ;

static yyconst short int yy_accept[774] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        4,    7,    9,   11,   14,   16,   19,   22,   25,   28,
       32,   35,   38,   41,   44,   47,   50,   53,   56,   59,
       62,   65,   67,   69,   71,   73,   76,   78,   80,   82,
       84,   86,   88,   90,   92,   95,   98,   99,  101,  102,
      104,  105,  107,  109,  111,  113,  116,  118,  120,  122,
      124,  126,  128,  130,  132,  134,  136,  138,  139,  140,
      141,  142,  144,  145,  146,  147,  148,  149,  150,  151,

      152,  153,  154,  155,  157,  159,  160,  161,  162,  163,
      164,  165,  166,  167,  168,  169,  170,  171,  172,  173,
      174,  175,  176,  177,  178,  179,  180,  181,  182,  183,
      184,  185,  186,  187,  188,  189,  189,  190,  191,  191,
      192,  193,  194,  195,  197,  198,  199,  200,  201,  202,
      203,  204,  205,  206,  207,  208,  209,  210,  211,  211,
      211,  211,  211,  211,  211,  211,  212,  212,  212,  212,
      212,  212,  213,  213,  213,  213,  214,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  216,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,

      217,  217,  217,  217,  217,  217,  217,  217,  217,  218,
      219,  220,  221,  222,  223,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  224,  225,  225,  225,  225,  225,
      225,  226,  226,  226,  227,  227,  227,  227,  228,  229,
      229,  229,  230,  231,  231,  231,  231,  231,  232,  232,
      232,  233,  233,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  234,  234,  234,  234,
      234,  234,  235,  236,  236,  236,  236,  237,  238,  239,
      240,  241,  242,  243,  244,  244,  244,  244,  244,  244,

      245,  245,  245,  246,  246,  246,  246,  246,  246,  246,
      247,  248,  249,  250,  250,  250,  251,  252,  253,  253,
      253,  254,  254,  254,  255,  255,  255,  255,  256,  256,
      257,  257,  257,  257,  257,  257,  258,  258,  259,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  261,  261,  261,  261,  261,  261,
      262,  263,  263,  263,  263,  263,  263,  264,  265,  265,
      265,  265,  265,  266,  266,  266,  267,  267,  267,  267,
      267,  267,  267,  268,  269,  270,  271,  271,  271,  272,
      273,  274,  275,  275,  275,  275,  275,  275,  275,  276,

      276,  277,  277,  277,  277,  277,  278,  278,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  280,  280,  280,  280,  280,
      280,  281,  281,  281,  282,  283,  283,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  285,  285,  286,  286,
      287,  288,  288,  289,  289,  289,  289,  290,  291,  292,
      292,  292,  292,  292,  292,  292,  292,  292,  293,  293,
      293,  293,  294,  294,  294,  294,  294,  294,  295,  296,
      297,  297,  297,  297,  297,  298,  299,  299,  300,  300,
      300,  300,  300,  301,  302,  302,  302,  303,  304,  305,

      306,  307,  307,  307,  307,  307,  308,  309,  309,  309,
      309,  309,  309,  309,  309,  309,  310,  310,  310,  311,
      311,  312,  312,  312,  312,  312,  312,  312,  312,  312,
      313,  314,  315,  316,  316,  316,  317,  318,  319,  320,
      321,  322,  323,  323,  323,  323,  323,  323,  323,  323,
      323,  323,  323,  324,  325,  326,  327,  327,  327,  327,
      328,  328,  328,  328,  328,  328,  329,  329,  329,  329,
      330,  330,  330,  330,  330,  330,  330,  330,  330,  330,
      331,  332,  333,  334,  335,  336,  337,  337,  338,  338,
      338,  338,  338,  338,  338,  338,  338,  338,  339,  340,

      341,  341,  342,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  344,  344,  344,  344,  344,  344,  344,  344,
      344,  344,  344,  344,  345,  346,  346,  346,  346,  346,
      346,  347,  347,  347,  347,  347,  348,  349,  350,  350,
      350,  350,  350,  350,  350,  350,  351,  352,  352,  352,
      352,  352,  352,  352,  353,  353,  353,  353,  353,  353,
      353,  353,  353,  353,  353,  353,  353,  354,  355,  355,
      355,  355,  355,  355,  355,  355,  355,  355,  355,  355,
      355,  355,  355,  355,  355,  356,  357,  357,  357,  358,
      358,  359,  359,  359,  359,  359,  359,  359,  359,  360,

      361,  362,  362,  362,  362,  363,  363,  364,  364,  364,
      364,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      366,  366,  366,  366,  366,  366,  366,  367,  367,  367,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  368,
      368,  368,  369,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  371,  372,  373,  373,  373,  373,  373,
      373,  374,  375,  376,  376,  376,  377,  378,  379,  380,
      380,  381,  381
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    1,    1,    1,    7,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
       19,   20,   20,   20,   20,   20,   20,    1,    1,   21,
       22,   23,    1,    1,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       44,   45,   46,   47,   48,   49,   50,   51,   52,   53,
       24,   25,   26,   27,    1,    1,   28,   29,   30,   31,

       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       52,   53,   54,    1,   55,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[56] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst short int yy_base[776] =
    {   0,
        0,    0,   55,    0,   83,    0,  106,  128,  142,  155,
      168,  181,  195,  209,  230,  253,  276,  299,  312,  325,
      338,  351,  372,  393,  406,  419,  432,  446, 1214, 1215,
      123, 1215, 1208,    0, 1205, 1209, 1208, 1207, 1206,  136,
     1205,  248, 1204,  390, 1203, 1202, 1201, 1200, 1199, 1198,
     1197,  106, 1159,   87, 1161,  176, 1157, 1154,  121,  132,
      240, 1152,  136,  113, 1191, 1190, 1215,  185, 1186,    0,
     1183, 1187, 1186, 1185, 1184,  229, 1183,  411, 1182,  479,
     1181, 1180, 1179, 1178, 1177, 1176, 1175,  200, 1148, 1133,
     1138,  203,   93, 1141, 1132,  101, 1129, 1122,  255, 1137,

      148,  146, 1132, 1165, 1164,  225, 1129, 1122,  109,  182,
      164, 1135, 1119,  293, 1125,  303,  233, 1128, 1117,  177,
     1116,  209, 1129, 1114,  217, 1127,  257,  288, 1118,  190,
     1125,  297,  248,  318,  275, 1147, 1149,    0, 1143, 1147,
     1146, 1145, 1144,  355, 1143, 1142,  485, 1141, 1140,  498,
      505, 1139, 1138, 1137, 1136, 1135, 1134, 1133, 1092, 1097,
     1104, 1088, 1090, 1083, 1082, 1125, 1098, 1082, 1082, 1077,
     1088, 1119, 1086, 1072, 1072, 1115, 1114, 1072, 1068, 1066,
     1084, 1070, 1075, 1064, 1067,  289, 1105, 1104, 1060, 1056,
      481,  295, 1075, 1063, 1061, 1052, 1053, 1056, 1056, 1060,

     1064,   77,  291, 1045,  338, 1042, 1051, 1045, 1088, 1087,
     1086, 1085, 1084, 1083, 1082,  274, 1041,  300, 1046,  324,
     1035, 1033,  337, 1033, 1031, 1037, 1047,  341, 1034, 1043,
      372,  379,  159, 1037, 1070, 1025, 1029, 1028, 1040, 1035,
     1064, 1037, 1035, 1061, 1033, 1014, 1025, 1057, 1056, 1025,
     1021, 1053, 1052,  395, 1018, 1024, 1012, 1048, 1017, 1001,
     1045, 1005, 1017,  992,  997,  504, 1014, 1009,  997, 1008,
     1004, 1003,  997,  303, 1005, 1032,  996, 1001, 1003,  983,
      997, 1026, 1025,  988,  383,  391, 1023, 1022, 1021, 1020,
     1019, 1018, 1017, 1016,  986,  976,  969,  973,  971, 1010,

      964,  968, 1007,  961,  978,  970,  972,  957,  967, 1000,
      999,  998,  997,  966,  952,  994,  993,  438,  947,  948,
      990,  962,  951,  987,  960,  959,  939,  983,  939,  981,
      417,  954,  442,  934,  948,  977,  933,  975,  974,  929,
      933,  943,  926,  941,  929,  934,  929,  932,  934,  933,
      396,  929,  925,  960,  929,  928,  918,  923,  927,  954,
      953,  234,  453,  909,  459,  908,  950,  949,  918,  902,
      901,  902,  944,  917,  899,  941,  914,  909,  908,  891,
      906,  889,  934,  933,  932,  931,  891,  903,  928,  927,
      926,  925,  896,  897,  885,  891,  883,  880,  918,  883,

      916,  870,  451,  888,  883,  912,  881,  910,  872,  876,
      877,  872,  869,  875,  873,  872,  856,  440,  857,  856,
      868,  869,  853,  863,  894,  848,  373,  847,  865,  864,
      889,  843,  861,  886,  885,  852,  883,  850,  838,  841,
      835,  835,  833,  825,  838,  874,  840,  872,  841,  870,
      869,  840,  867,  840,  822,  819,  863,  862,  861,  834,
      822,  819,  831,  824,  825,  811,  809,  852,  506,  825,
      810,  849,  818,  804,  801,  507,  808,  844,  843,  842,
      793,  792,  796,  799,  837,  836,  805,  834,  803,  787,
      786,  800,  829,  828,  526,  423,  827,  826,  825,  824,

      823,  792,  784,  786,  776,  818,  817,  771,  785,  769,
      774,  769,  768,  780,  765,  808,  779,  763,  805,  778,
      803,  768,  527,  775,  759,  766,  509,  511,  768,  797,
      796, 1215, 1215,  745,  749,  793,  792,  791,  790,  789,
      788,  787,  546,  756,  740,  484,  738,  502,  496,  539,
      737,  756,  781,  780,  779,  778,  728,  742,  745,  774,
      730,  532,  732,  449,  542,  771,  734,  739,  739,  767,
      726,  726,  730,  720,  534,  725,  554,  724,  529,  760,
      759,  758,  757,  756,  755,  754,  708, 1215,  703,  712,
      712,  720,  708,  715,  720,  707,  715,  743,  742,  741,

      691,  739,  738,  703,  566,  699,  689,  543,  700,  544,
      698,  727,  694,  693,  680,  684,  693,  682,  690,  679,
      678,  549,  687,  716,  714,  686,  550,  558,  562,  677,
     1215,  672,  666,  563,  674,  707,  142,  163,  265,  296,
      307,  382,  388,  403,  421, 1215, 1215,  431,  437,  519,
      539,  540,  539, 1215,  591,  558,  595,  562,  597,  557,
      553,  574,  556,  602,  562,  558,  605,  608,  566,  581,
      578,  567,  573,  574,  585,  576,  588,  582,  583,  576,
      578,  579,  592,  582, 1215, 1215,  594,  584,  629,  630,
      631,  587,  599,  588,  589,  593,  609,  638, 1215, 1215,

      639,  595,  597,  613, 1215,  614, 1215,  645,  621,  614,
      649,  606,  611,  613,  614,  654,  619,  656,  620,  658,
      633,  634,  618,  619,  614,  632, 1215,  626,  637,  638,
      669,  633,  671,  642,  634,  636,  646,  647, 1215,  640,
      635,  680,  681,  654,  685,  649,  657,  660,  662,  647,
      648,  667, 1215,  694,  695,  666,  667,  658,  671,  672,
     1215, 1215, 1215,  662,  674, 1215, 1215, 1215, 1215,  664,
     1215, 1215,  731,  707,  733
    } ;

static yyconst short int yy_def[776] =
    {   0,
      772,    1,  772,    3,    3,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,  772,  772,
      772,  772,  773,  774,  775,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  773,  774,
      775,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,

      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  773,  772,  774,  775,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,

      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,

      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,

      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,

      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,

      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,

      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,    0,  772,  772,  772
    } ;

static yyconst short int yy_nxt[1271] =
    {   0,
       30,   31,   32,   31,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   44,   44,   44,   44,
       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   30,   57,   30,   58,   30,   30,   59,   60,
       30,   30,   61,   30,   62,   63,   64,   30,   30,   30,
       30,   30,   30,   65,   66,   67,   68,   32,   68,   69,
       70,   71,   72,   73,   74,   75,   76,   77,   78,   79,
       80,   80,   80,   80,   80,   81,   82,   83,   84,   85,
       86,   87,   88,   89,   90,   91,   92,   67,   93,   94,
       95,   67,   67,   96,   97,   98,   67,   99,   67,  100,

      101,  102,   67,   67,  103,   67,   67,   67,  104,  105,
      106,   67,  237,  107,  163,  108,   67,   67,   67,  281,
      190,  109,  110,   67,  135,  111,  135,   67,  164,  112,
      113,  191,   67,   88,  135,  159,   91,  144,   67,  135,
      185,  172,  173,  667,   96,   67,  114,  135,  115,  172,
      205,  160,  161,   67,  116,   88,  171,  186,   91,  174,
       67,  172,  173,  175,  638,  181,   96,   67,  114,   88,
      115,  182,   91,  185,   67,   67,  116,  166,  183,  184,
      117,   67,   88,  182,  115,   91,  135,   67,  135,   67,
      200,  184,  249,  117,   67,   88,  135,  115,   91,  177,

       67,  118,   67,  314,  166,  208,   96,   67,   88,  206,
      115,   91,  177,   67,  118,   67,  167,  207,  219,   96,
       67,  229,   88,  115,  119,   91,  168,   67,   67,  159,
      144,  164,  135,   96,   67,  427,   88,  120,  119,   91,
      135,   67,   67,  167,  177,  160,  161,   96,   67,  146,
      221,  120,  177,  168,  159,  176,   67,   88,  224,  121,
       91,  428,   67,  147,  147,  147,  147,  147,   96,   67,
      202,  161,  122,  172,  216,  177,  135,   67,  135,  123,
       88,  178,  121,   91,  226,   67,  135,  179,  172,  233,
      177,   96,   67,  196,  668,  122,  197,  172,  173,  198,

       67,  295,  123,   88,  351,  124,   91,  249,   67,  210,
      211,  212,  231,  232,   96,   67,  262,  159,  125,  213,
      214,  215,  270,   67,  263,  126,   88,  227,  124,   91,
      271,   67,  177,  160,  161,  282,  242,   96,   67,   88,
      297,  125,   91,  669,   67,  241,   67,  670,  126,  352,
      127,   67,   88,  182,  115,   91,  144,   67,  135,   67,
      234,  184,  299,  127,   67,  128,  135,  115,  129,  241,
       67,  249,   67,  307,  427,  302,   96,   67,  128,  284,
      115,  129,  241,   67,  363,   67,  242,  310,  311,   96,
       67,  149,  365,  115,  312,  313,  331,  351,   67,   88,

      428,  130,   91,  150,   67,  151,  151,  151,  151,  151,
       96,   67,  146,  364,  115,  671,  131,  672,  331,   67,
       88,  366,  130,   91,  550,   67,  147,  147,  147,  147,
      147,   96,   67,   88,  332,  115,   91,  131,   67,  391,
       67,  469,  352,  403,   96,   67,   88,  673,  132,   91,
      608,   67,  403,   67,  363,  392,  332,   96,   67,   88,
      365,  132,   91,  551,   67,  674,   67,  552,  470,  675,
      133,   67,  471,   88,  115,  676,   91,  134,   67,   67,
      149,  404,  266,  364,  133,   67,  146,  609,  115,  366,
      404,  134,  150,   67,  151,  151,  151,  151,  151,  146,

      147,  147,  147,  147,  147,  266,  149,  469,  523,  267,
      575,  589,  577,  147,  147,  147,  147,  147,  150,  590,
      151,  151,  151,  151,  151,  268,  269,  543,  523,  592,
      622,  594,  267,  605,  470,  575,  593,  576,  471,  578,
      550,  524,  595,  610,  608,  610,  677,  543,  268,  269,
      622,  655,  525,  526,  544,  577,  545,  527,  528,  657,
      606,  524,  576,  659,  664,  546,  547,  605,  678,  679,
      548,  549,  525,  526,  544,  623,  545,  527,  528,  551,
      656,  609,  578,  552,  680,  546,  547,  611,  658,  611,
      548,  549,  655,  681,  606,  623,  657,  682,  659,  683,

      684,  685,  686,  664,  687,  688,  667,  660,  665,  689,
      690,  691,  692,  693,  694,  695,  696,  697,  698,  699,
      700,  656,  701,  702,  703,  658,  704,  705,  706,  707,
      689,  708,  711,  712,  713,  714,  715,  716,  717,  718,
      720,  721,  660,  722,  723,  724,  708,  665,  725,  726,
      711,  727,  728,  729,  730,  731,  733,  718,  734,  720,
      735,  736,  737,  738,  739,  740,  741,  742,  743,  709,
      731,  744,  745,  747,  748,  710,  749,  750,  751,  752,
      753,  754,  755,  719,  709,  756,  745,  757,  758,  759,
      710,  760,  761,  762,  763,  754,  755,  764,  765,  732,

      766,  719,  767,  768,  769,  770,  771,  138,  636,  666,
      663,  662,  661,  654,  732,  625,  746,  624,  653,  652,
      651,  650,  649,  648,  647,  646,  645,  644,  612,  643,
      746,  136,  136,  139,  139,  642,  641,  640,  639,  603,
      638,  637,  636,  599,  598,  635,  634,  633,  632,  631,
      630,  629,  628,  627,  626,  586,  585,  584,  583,  582,
      625,  624,  621,  620,  619,  618,  617,  616,  570,  615,
      614,  613,  612,  607,  604,  603,  602,  601,  600,  599,
      598,  554,  553,  597,  596,  591,  588,  587,  542,  541,
      586,  585,  584,  583,  582,  581,  580,  531,  530,  579,

      574,  573,  572,  571,  570,  569,  519,  568,  567,  516,
      566,  565,  564,  563,  562,  561,  560,  559,  507,  506,
      558,  557,  556,  555,  501,  500,  554,  498,  553,  542,
      541,  540,  539,  538,  537,  488,  536,  486,  485,  535,
      534,  533,  532,  531,  530,  478,  529,  522,  521,  520,
      519,  518,  517,  516,  515,  514,  513,  512,  511,  510,
      509,  508,  507,  458,  506,  505,  504,  503,  453,  502,
      501,  500,  499,  498,  497,  446,  496,  495,  494,  493,
      492,  491,  490,  489,  488,  487,  486,  485,  484,  483,
      431,  482,  481,  480,  479,  478,  477,  476,  475,  474,

      473,  472,  468,  467,  466,  465,  464,  463,  462,  461,
      460,  408,  459,  458,  457,  456,  455,  401,  454,  453,
      452,  451,  450,  449,  448,  447,  446,  391,  390,  389,
      445,  444,  386,  385,  384,  383,  443,  442,  441,  440,
      439,  438,  376,  437,  436,  373,  435,  434,  433,  432,
      431,  367,  430,  429,  361,  360,  426,  425,  424,  423,
      422,  354,  421,  420,  419,  418,  417,  416,  415,  414,
      413,  412,  411,  410,  409,  339,  408,  407,  336,  406,
      405,  402,  401,  400,  328,  399,  398,  397,  324,  396,
      395,  321,  394,  393,  390,  389,  388,  387,  386,  385,

      384,  383,  382,  381,  380,  379,  378,  377,  376,  375,
      374,  373,  372,  371,  370,  369,  368,  294,  293,  292,
      291,  290,  289,  288,  367,  362,  361,  360,  359,  358,
      357,  356,  355,  354,  353,  350,  349,  348,  347,  346,
      345,  344,  343,  342,  341,  340,  339,  338,  337,  336,
      335,  334,  333,  253,  252,  330,  329,  328,  248,  327,
      326,  325,  324,  323,  322,  321,  320,  319,  318,  317,
      316,  235,  315,  309,  308,  306,  305,  304,  303,  301,
      300,  298,  296,  294,  293,  292,  291,  290,  289,  288,
      287,  286,  285,  283,  280,  279,  278,  277,  276,  275,

      274,  273,  272,  265,  264,  188,  187,  261,  260,  259,
      258,  257,  256,  255,  254,  253,  252,  251,  250,  249,
      248,  247,  246,  245,  244,  243,  166,  242,  241,  240,
      239,  238,  237,  236,  158,  157,  156,  155,  154,  153,
      152,  149,  148,  146,  145,  143,  142,  141,  140,  137,
      235,  137,  230,  228,  225,  223,  222,  220,  218,  217,
      177,  209,  185,  204,  203,  188,  187,  201,  199,  195,
      194,  193,  192,  165,  164,  189,  158,  157,  156,  155,
      154,  153,  152,  148,  145,  143,  142,  141,  140,  137,
      137,  188,  187,  180,  170,  169,  165,  162,  158,  157,

      156,  155,  154,  153,  152,  148,  145,  143,  142,  141,
      140,  137,  137,  772,   29,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772
    } ;

static yyconst short int yy_chk[1271] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        5,    5,  202,    5,   54,    5,    5,    5,    5,  202,
       93,    5,    5,    5,   31,    5,   31,    5,   54,    5,
        5,   93,    5,    7,   31,   52,    7,   40,    7,   40,
       64,   96,   96,  637,    7,    7,    7,   40,    7,  109,
      109,   52,   52,    7,    7,    8,   59,   64,    8,   60,
        8,   59,   59,   60,  638,   63,    8,    8,    8,    9,
        8,   63,    9,  102,    9,    8,    8,   56,   63,   63,
        9,    9,   10,  101,    9,   10,   68,   10,   68,    9,
      102,  101,  233,   10,   10,   11,   68,   10,   11,  111,

       11,   11,   10,  233,   92,  111,   11,   11,   12,  110,
       11,   12,  120,   12,   12,   11,   56,  110,  120,   12,
       12,  130,   13,   12,   13,   13,   56,   13,   12,   88,
       76,  130,   76,   13,   13,  362,   14,   13,   14,   14,
       76,   14,   13,   92,  122,   88,   88,   14,   14,   42,
      122,   14,  125,   92,  106,   61,   14,   15,  125,   15,
       15,  362,   15,   42,   42,   42,   42,   42,   15,   15,
      106,  106,   15,  117,  117,   61,  135,   15,  135,   15,
       16,   61,   16,   16,  127,   16,  135,   61,  133,  133,
       99,   16,   16,   99,  639,   16,   99,  127,  127,   99,

       16,  216,   16,   17,  274,   17,   17,  216,   17,  114,
      114,  114,  132,  132,   17,   17,  186,  128,   17,  116,
      116,  116,  192,   17,  186,   17,   18,  128,   18,   18,
      192,   18,  132,  128,  128,  203,  203,   18,   18,   19,
      218,   18,   19,  640,   19,  218,   18,  641,   18,  274,
       19,   19,   20,  134,   19,   20,  144,   20,  144,   19,
      134,  134,  220,   20,   20,   21,  144,   20,   21,  220,
       21,  205,   20,  228,  427,  223,   21,   21,   22,  205,
       21,   22,  223,   22,  285,   21,  228,  231,  231,   22,
       22,   44,  286,   22,  232,  232,  254,  351,   22,   23,

      427,   23,   23,   44,   23,   44,   44,   44,   44,   44,
       23,   23,   78,  285,   23,  642,   23,  643,  331,   23,
       24,  286,   24,   24,  496,   24,   78,   78,   78,   78,
       78,   24,   24,   25,  254,   24,   25,   24,   25,  318,
       24,  418,  351,  333,   25,   25,   26,  644,   25,   26,
      564,   26,  403,   25,  363,  318,  331,   26,   26,   27,
      365,   26,   27,  496,   27,  645,   26,  496,  418,  648,
       27,   27,  418,   28,   27,  649,   28,   27,   28,   27,
       80,  333,  191,  363,   28,   28,  147,  564,   28,  365,
      403,   28,   80,   28,   80,   80,   80,   80,   80,  150,

      147,  147,  147,  147,  147,  266,  151,  469,  476,  191,
      527,  546,  528,  150,  150,  150,  150,  150,  151,  546,
      151,  151,  151,  151,  151,  191,  191,  495,  523,  548,
      579,  549,  266,  562,  469,  575,  548,  527,  469,  528,
      550,  476,  549,  565,  608,  610,  650,  543,  266,  266,
      622,  627,  476,  476,  495,  577,  495,  476,  476,  628,
      562,  523,  575,  629,  634,  495,  495,  605,  651,  652,
      495,  495,  523,  523,  543,  579,  543,  523,  523,  550,
      627,  608,  577,  550,  653,  543,  543,  565,  628,  610,
      543,  543,  655,  656,  605,  622,  657,  658,  659,  660,

      661,  662,  663,  664,  665,  666,  667,  629,  634,  668,
      669,  670,  671,  672,  673,  674,  675,  676,  677,  678,
      679,  655,  680,  681,  682,  657,  683,  684,  687,  688,
      689,  690,  691,  692,  693,  694,  695,  696,  697,  698,
      701,  702,  659,  703,  704,  706,  708,  664,  709,  710,
      711,  712,  713,  714,  715,  716,  717,  718,  719,  720,
      721,  722,  723,  724,  725,  726,  728,  729,  730,  690,
      731,  732,  733,  734,  735,  690,  736,  737,  738,  740,
      741,  742,  743,  698,  708,  744,  745,  746,  747,  748,
      708,  749,  750,  751,  752,  754,  755,  756,  757,  716,

      758,  718,  759,  760,  764,  765,  770,  774,  636,  635,
      633,  632,  630,  626,  731,  625,  733,  624,  623,  621,
      620,  619,  618,  617,  616,  615,  614,  613,  612,  611,
      745,  773,  773,  775,  775,  609,  607,  606,  604,  603,
      602,  601,  600,  599,  598,  597,  596,  595,  594,  593,
      592,  591,  590,  589,  587,  586,  585,  584,  583,  582,
      581,  580,  578,  576,  574,  573,  572,  571,  570,  569,
      568,  567,  566,  563,  561,  560,  559,  558,  557,  556,
      555,  554,  553,  552,  551,  547,  545,  544,  542,  541,
      540,  539,  538,  537,  536,  535,  534,  531,  530,  529,

      526,  525,  524,  522,  521,  520,  519,  518,  517,  516,
      515,  514,  513,  512,  511,  510,  509,  508,  507,  506,
      505,  504,  503,  502,  501,  500,  499,  498,  497,  494,
      493,  492,  491,  490,  489,  488,  487,  486,  485,  484,
      483,  482,  481,  480,  479,  478,  477,  475,  474,  473,
      472,  471,  470,  468,  467,  466,  465,  464,  463,  462,
      461,  460,  459,  458,  457,  456,  455,  454,  453,  452,
      451,  450,  449,  448,  447,  446,  445,  444,  443,  442,
      441,  440,  439,  438,  437,  436,  435,  434,  433,  432,
      431,  430,  429,  428,  426,  425,  424,  423,  422,  421,

      420,  419,  417,  416,  415,  414,  413,  412,  411,  410,
      409,  408,  407,  406,  405,  404,  402,  401,  400,  399,
      398,  397,  396,  395,  394,  393,  392,  391,  390,  389,
      388,  387,  386,  385,  384,  383,  382,  381,  380,  379,
      378,  377,  376,  375,  374,  373,  372,  371,  370,  369,
      368,  367,  366,  364,  361,  360,  359,  358,  357,  356,
      355,  354,  353,  352,  350,  349,  348,  347,  346,  345,
      344,  343,  342,  341,  340,  339,  338,  337,  336,  335,
      334,  332,  330,  329,  328,  327,  326,  325,  324,  323,
      322,  321,  320,  319,  317,  316,  315,  314,  313,  312,

      311,  310,  309,  308,  307,  306,  305,  304,  303,  302,
      301,  300,  299,  298,  297,  296,  295,  294,  293,  292,
      291,  290,  289,  288,  287,  284,  283,  282,  281,  280,
      279,  278,  277,  276,  275,  273,  272,  271,  270,  269,
      268,  267,  265,  264,  263,  262,  261,  260,  259,  258,
      257,  256,  255,  253,  252,  251,  250,  249,  248,  247,
      246,  245,  244,  243,  242,  241,  240,  239,  238,  237,
      236,  235,  234,  230,  229,  227,  226,  225,  224,  222,
      221,  219,  217,  215,  214,  213,  212,  211,  210,  209,
      208,  207,  206,  204,  201,  200,  199,  198,  197,  196,

      195,  194,  193,  190,  189,  188,  187,  185,  184,  183,
      182,  181,  180,  179,  178,  177,  176,  175,  174,  173,
      172,  171,  170,  169,  168,  167,  166,  165,  164,  163,
      162,  161,  160,  159,  158,  157,  156,  155,  154,  153,
      152,  149,  148,  146,  145,  143,  142,  141,  140,  139,
      137,  136,  131,  129,  126,  124,  123,  121,  119,  118,
      115,  113,  112,  108,  107,  105,  104,  103,  100,   98,
       97,   95,   94,   91,   90,   89,   87,   86,   85,   84,
       83,   82,   81,   79,   77,   75,   74,   73,   72,   71,
       69,   66,   65,   62,   58,   57,   55,   53,   51,   50,

       49,   48,   47,   46,   45,   43,   41,   39,   38,   37,
       36,   35,   33,   29,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  772,  772,  772,  772,  772
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer.lex"
#define INITIAL 0
#define YY_NEVER_INTERACTIVE 1
#define YY_STACK_USED 1
#line 10 "lexer.lex"
#ifdef WIN32
#pragma warning(disable:4127) // while(1) warning
#pragma warning(disable:4102) // unreferenced label warning
#pragma warning(disable:4505) // unreferenced local function
#pragma warning(disable:4267) // smaller type conversion warnings
#pragma warning(disable:4244) // smaller type conversion warnings
#endif

#include <cstdlib>
#include <stdio.h>
#include <string.h>
#include "lexer.h"
#include "parser.yy.cc.h"

int yyline=1;
int yyerr=0;

void yy_done_parsing() {
	yy_delete_buffer( YY_CURRENT_BUFFER );
	
	delete yy_start_stack;
	yy_start_stack = 0;
	
	yy_init = 1;
}
#define s_global 1

#define s_camera 2

#define s_triangle 3

#define s_mesh 4

#define s_instance 5

#define s_light 6

#define s_pointlight 7

#define s_constantlight 8

#define s_material 9

#define s_lambert 10

#define s_sphere 11

#define s_blpatch 12

#define s_p0 13

#line 1006 "lexer.yy.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 63 "lexer.lex"


#line 1160 "lexer.yy.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 773 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_current_state != 772 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 65 "lexer.lex"
{ return YY_ENABLE; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 66 "lexer.lex"
{ return YY_DISABLE; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 67 "lexer.lex"
{ return YY_MATH_COS; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 68 "lexer.lex"
{ return YY_MATH_SIN; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 69 "lexer.lex"
{ return YY_MATH_TAN; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 70 "lexer.lex"
{ return YY_MATH_ACOS; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 71 "lexer.lex"
{ return YY_MATH_ASIN; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 72 "lexer.lex"
{ return YY_MATH_ATAN; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 73 "lexer.lex"
{ return YY_MATH_ATAN2; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 74 "lexer.lex"
{ return YY_MATH_LN; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 75 "lexer.lex"
{ return YY_MATH_LOG; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 76 "lexer.lex"
{ return YY_MATH_EXP; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 77 "lexer.lex"
{ return YY_MATH_SQRT; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 78 "lexer.lex"
{ return YY_MATH_E; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 79 "lexer.lex"
{ return YY_MATH_PI; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 81 "lexer.lex"
{ return YY_LT; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 82 "lexer.lex"
{ return YY_GT; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 83 "lexer.lex"
{ return YY_LBOX; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 84 "lexer.lex"
{ return YY_LBOX; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 85 "lexer.lex"
{ return YY_LCURLY; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 86 "lexer.lex"
{ yy_pop_state(); return YY_RCURLY; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 87 "lexer.lex"
{ return YY_LPAREN; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 88 "lexer.lex"
{ return YY_RPAREN; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 89 "lexer.lex"
{ return YY_COMMA; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 90 "lexer.lex"
{ return YY_EQUAL; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 91 "lexer.lex"
{ return YY_PLUS; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 92 "lexer.lex"
{ return YY_MINUS; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 93 "lexer.lex"
{ return YY_MUL; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 94 "lexer.lex"
{ return YY_DIV; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 95 "lexer.lex"
{ return YY_CARAT; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 96 "lexer.lex"
{ return YY_BSLASH; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 97 "lexer.lex"
{ yyline++; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 100 "lexer.lex"
{ yy_push_state(s_global); return YY_S_GLOBAL; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 101 "lexer.lex"
{ return YY_WIDTH; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 102 "lexer.lex"
{ return YY_HEIGHT; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 103 "lexer.lex"
{ return YY_POS; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 104 "lexer.lex"
{ return YY_IMG_BGCOLOR; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 105 "lexer.lex"
{ return YY_IMG_FGCOLOR; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 106 "lexer.lex"
{ return YY_GL_BGCOLOR; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 107 "lexer.lex"
{ return YY_GL_SPHERE_SECTIONS; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 108 "lexer.lex"
{ return YY_NUM_THREADS; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 109 "lexer.lex"
{ return YY_RENDER_X_BLOCK; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 110 "lexer.lex"
{ return YY_RENDER_Y_BLOCK; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 111 "lexer.lex"
{ return YY_RENDER_HANDLER_SLEEP; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 112 "lexer.lex"
{ return YY_RENDER_THREAD_SLEEP; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 113 "lexer.lex"
{ return YY_RENDER_SPINLOCK_SLEEP; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 114 "lexer.lex"
{ return YY_GAUSSIAN_BLUR_MAX; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 115 "lexer.lex"
{ return YY_GAUSSIAN_BLUR_SIGMA; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 116 "lexer.lex"
{ return YY_GL_RENDER_LIGHTS; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 117 "lexer.lex"
{ return YY_HEADLESS; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 118 "lexer.lex"
{ return YY_TRIANGLE_TEST; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 119 "lexer.lex"
{ return YY_PROJECTION; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 120 "lexer.lex"
{ return YY_BARYCENTRIC; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 121 "lexer.lex"
{ return YY_PLUCKER; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 122 "lexer.lex"
{ return YY_MOLLER; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 125 "lexer.lex"
{ yy_push_state(s_camera); return YY_S_CAMERA; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 126 "lexer.lex"
{ return YY_POS; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 127 "lexer.lex"
{ return YY_DIR; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 128 "lexer.lex"
{ return YY_LOOKAT; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 129 "lexer.lex"
{ return YY_UP; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 130 "lexer.lex"
{ return YY_FOV; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 131 "lexer.lex"
{ return YY_ASPECT; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 132 "lexer.lex"
{ return YY_MIN_DRAW; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 133 "lexer.lex"
{ return YY_MAX_DRAW; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 135 "lexer.lex"
{ yy_push_state(s_p0); return YY_S_P0; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 136 "lexer.lex"
{ return YY_SPIRAL_NUM_SPHERES; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 137 "lexer.lex"
{ return YY_SPIRAL_RADIUS; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 138 "lexer.lex"
{ return YY_LORENZ_DT; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 139 "lexer.lex"
{ return YY_LORENZ_MIN_DISTANCE; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 140 "lexer.lex"
{ return YY_LORENZ_MAX_DISTANCE; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 141 "lexer.lex"
{ return YY_LORENZ_SIGMA; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 142 "lexer.lex"
{ return YY_LORENZ_RHO; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 143 "lexer.lex"
{ return YY_LORENZ_BETA; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 144 "lexer.lex"
{ return YY_LORENZ_RADIUS; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 145 "lexer.lex"
{ return YY_LORENZ_NUM_SPHERES; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 146 "lexer.lex"
{ return YY_LORENZ_START; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 148 "lexer.lex"
{ yy_push_state(s_triangle); return YY_S_TRIANGLE; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 149 "lexer.lex"
{ return YY_V1; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 150 "lexer.lex"
{ return YY_V2; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 151 "lexer.lex"
{ return YY_V3; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 152 "lexer.lex"
{ return YY_N1; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 153 "lexer.lex"
{ return YY_N2; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 154 "lexer.lex"
{ return YY_N3; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 156 "lexer.lex"
{ yy_push_state(s_mesh); return YY_S_MESH; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 157 "lexer.lex"
{ return YY_LOAD; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 159 "lexer.lex"
{ yy_push_state(s_instance); return YY_S_INSTANCE; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 160 "lexer.lex"
{ return YY_GEOMETRY; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 162 "lexer.lex"
{ return YY_PUSHMATRIX; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 163 "lexer.lex"
{ return YY_POPMATRIX; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 164 "lexer.lex"
{ return YY_ROTATE; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 165 "lexer.lex"
{ return YY_TRANSLATE; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 166 "lexer.lex"
{ return YY_SCALE; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 168 "lexer.lex"
{ yy_push_state(s_light); return YY_S_LIGHT; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 170 "lexer.lex"
{ yy_pop_state(); yy_push_state(s_pointlight); return YY_S_POINTLIGHT; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 171 "lexer.lex"
{ return YY_COLOR; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 172 "lexer.lex"
{ return YY_POS; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 173 "lexer.lex"
{ return YY_WATTAGE; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 175 "lexer.lex"
{ yy_pop_state(); yy_push_state(s_constantlight); return YY_S_CONSTANTLIGHT; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 176 "lexer.lex"
{ return YY_COLOR; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 177 "lexer.lex"
{ return YY_POS; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 178 "lexer.lex"
{ return YY_WATTAGE; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 180 "lexer.lex"
{ yy_push_state(s_material); return YY_S_MATERIAL; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 181 "lexer.lex"
{ yy_pop_state(); yy_push_state(s_lambert); return YY_S_LAMBERT; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 182 "lexer.lex"
{ return YY_DIFFUSE; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 183 "lexer.lex"
{ return YY_AMBIENT; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 185 "lexer.lex"
{ yy_push_state(s_sphere); return YY_S_SPHERE; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 186 "lexer.lex"
{ return YY_CENTER; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 187 "lexer.lex"
{ return YY_RADIUS; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 189 "lexer.lex"
{ yy_push_state(s_blpatch); return YY_S_BLPATCH; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 190 "lexer.lex"
{ return YY_P00; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 191 "lexer.lex"
{ return YY_P01; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 192 "lexer.lex"
{ return YY_P10; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 193 "lexer.lex"
{ return YY_P11; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 197 "lexer.lex"
{ yylval.str = _strdup(yytext); return YY_STRING; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 198 "lexer.lex"
{ yylval.integer = atoi(yytext); return YY_PARSE_INT; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 199 "lexer.lex"
{ yylval.real = (float)atof(yytext); return YY_REAL; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 201 "lexer.lex"
// eat up whitespace
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 202 "lexer.lex"
// eat up comments 
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 203 "lexer.lex"
{ printf("\nParse error #%d line %d near: %s\n", ++yyerr, yyline, yytext); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 205 "lexer.lex"
ECHO;
	YY_BREAK
#line 1851 "lexer.yy.cc"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(s_global):
			case YY_STATE_EOF(s_camera):
			case YY_STATE_EOF(s_triangle):
			case YY_STATE_EOF(s_mesh):
			case YY_STATE_EOF(s_instance):
			case YY_STATE_EOF(s_light):
			case YY_STATE_EOF(s_pointlight):
			case YY_STATE_EOF(s_constantlight):
			case YY_STATE_EOF(s_material):
			case YY_STATE_EOF(s_lambert):
			case YY_STATE_EOF(s_sphere):
			case YY_STATE_EOF(s_blpatch):
			case YY_STATE_EOF(s_p0):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 773 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 773 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 772);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 205 "lexer.lex"

