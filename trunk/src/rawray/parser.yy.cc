
/*  A Bison parser, made from parser.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	YY_REAL	258
#define	YY_PARSE_INT	259
#define	YY_STRING	260
#define	YY_PARSE_TRUE	261
#define	YY_PARSE_FALSE	262
#define	YY_ENABLE	263
#define	YY_DISABLE	264
#define	YY_MATH_COS	265
#define	YY_MATH_SIN	266
#define	YY_MATH_TAN	267
#define	YY_MATH_ACOS	268
#define	YY_MATH_ASIN	269
#define	YY_MATH_ATAN	270
#define	YY_MATH_ATAN2	271
#define	YY_MATH_LN	272
#define	YY_MATH_LOG	273
#define	YY_MATH_EXP	274
#define	YY_MATH_SQRT	275
#define	YY_MATH_E	276
#define	YY_MATH_PI	277
#define	YY_LT	278
#define	YY_GT	279
#define	YY_LBOX	280
#define	YY_RBOX	281
#define	YY_LCURLY	282
#define	YY_RCURLY	283
#define	YY_LPAREN	284
#define	YY_RPAREN	285
#define	YY_COMMA	286
#define	YY_EQUAL	287
#define	YY_PLUS	288
#define	YY_MINUS	289
#define	YY_DIV	290
#define	YY_MUL	291
#define	YY_CARAT	292
#define	YY_BSLASH	293
#define	YY_S_GLOBAL	294
#define	YY_WIDTH	295
#define	YY_HEIGHT	296
#define	YY_POS	297
#define	YY_IMG_BGCOLOR	298
#define	YY_IMG_FGCOLOR	299
#define	YY_GL_BGCOLOR	300
#define	YY_GL_SPHERE_SECTIONS	301
#define	YY_GL_RENDER_LIGHTS	302
#define	YY_HEADLESS	303
#define	YY_NUM_THREADS	304
#define	YY_RENDER_X_BLOCK	305
#define	YY_RENDER_Y_BLOCK	306
#define	YY_RENDER_HANDLER_SLEEP	307
#define	YY_RENDER_THREAD_SLEEP	308
#define	YY_RENDER_SPINLOCK_SLEEP	309
#define	YY_GAUSSIAN_BLUR_MAX	310
#define	YY_GAUSSIAN_BLUR_SIGMA	311
#define	YY_TRIANGLE_TEST	312
#define	YY_BARYCENTRIC	313
#define	YY_PROJECTION	314
#define	YY_PLUCKER	315
#define	YY_MOLLER	316
#define	YY_S_CAMERA	317
#define	YY_DIR	318
#define	YY_LOOKAT	319
#define	YY_UP	320
#define	YY_FOV	321
#define	YY_ASPECT	322
#define	YY_MIN_DRAW	323
#define	YY_MAX_DRAW	324
#define	YY_S_P0	325
#define	YY_SPIRAL_NUM_SPHERES	326
#define	YY_SPIRAL_RADIUS	327
#define	YY_LORENZ_DT	328
#define	YY_LORENZ_MIN_DISTANCE	329
#define	YY_LORENZ_MAX_DISTANCE	330
#define	YY_LORENZ_SIGMA	331
#define	YY_LORENZ_RHO	332
#define	YY_LORENZ_BETA	333
#define	YY_LORENZ_RADIUS	334
#define	YY_LORENZ_NUM_SPHERES	335
#define	YY_LORENZ_START	336
#define	YY_S_TRIANGLE	337
#define	YY_V1	338
#define	YY_V2	339
#define	YY_V3	340
#define	YY_N1	341
#define	YY_N2	342
#define	YY_N3	343
#define	YY_S_MESH	344
#define	YY_LOAD	345
#define	YY_S_INSTANCE	346
#define	YY_GEOMETRY	347
#define	YY_PUSHMATRIX	348
#define	YY_POPMATRIX	349
#define	YY_ROTATE	350
#define	YY_TRANSLATE	351
#define	YY_SCALE	352
#define	YY_S_LIGHT	353
#define	YY_S_POINTLIGHT	354
#define	YY_S_CONSTANTLIGHT	355
#define	YY_WATTAGE	356
#define	YY_COLOR	357
#define	YY_S_MATERIAL	358
#define	YY_S_LAMBERT	359
#define	YY_S_PLASTICA	360
#define	YY_DIFFUSE	361
#define	YY_AMBIENT	362
#define	YY_S_SPHERE	363
#define	YY_CENTER	364
#define	YY_RADIUS	365
#define	YY_S_BLPATCH	366
#define	YY_P00	367
#define	YY_P01	368
#define	YY_P10	369
#define	YY_P11	370
#define	YY_EQUALS	371
#define	NEG	372

#line 1 "parser.y"

#ifdef WIN32
#pragma warning(disable:4244) // smaller type conversion warnings
#pragma warning(disable:4701) // variable used without being initialized
#endif

#include "parser.h"
#include <malloc.h>
#include <stdlib.h>
#include <math.h>
#include <stack>
#include <queue>
#include <map>
#include <string>
#include <iostream>
#include "lexer.h"
#include "math/vector3.h"
#include "math/vector4.h"
#include "math/matrix4x4.h"
#include "object.h"
#include "material.h"
#include "lambert.h"
#include "plastica.h"
#include "light.h"
#include "point_light.h"
#include "constant_light.h"
#include "options.h"
#include "scene.h"
#include "camera.h"
#include "image.h"
#include "triangle_factory.h"
#include "sphere.h"
#include "bl_patch.h"

//#define YYDEBUG 1

#define yyerror(x) printf("Parser error #%d on line %d: %s\n", ++yyerr, yyline, x);

extern int yylex();
extern int yyline;
extern int yyerr;
extern FILE *yyin, *yyout;


// variables for adding objects, keeping track of variables
rawray::Camera*                         g_camera = NULL;
rawray::Scene*                          g_scene = NULL;
rawray::Image*                          g_image = NULL;

rawray::Object*                         g_obj = NULL;
rawray::Material*                       g_material = NULL;
rawray::Light*                          g_light = NULL;
rawray::TriangleMesh*                   g_mesh = NULL;

std::map<std::string, rawray::Object*>  g_objectMap;
std::stack<math::Matrix4x4>             g_matrixStack;


#line 60 "parser.y"
typedef union
{
    float			real;
    int				integer;
    char*			str;
    float			vec[4];
} YYSTYPE;

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		423
#define	YYFLAG		-32768
#define	YYNTBASE	118

#define YYTRANSLATE(x) ((unsigned)(x) <= 372 ? yytranslate[x] : 167)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     1,     3,     5,     8,    10,    13,    15,    18,    20,
    23,    25,    28,    30,    33,    35,    38,    40,    43,    45,
    48,    50,    53,    55,    58,    63,    68,    73,    77,    81,
    83,    85,    87,    89,    91,    93,    96,    99,   102,   105,
   108,   111,   114,   117,   120,   123,   126,   129,   132,   135,
   138,   141,   144,   148,   151,   154,   157,   160,   163,   166,
   169,   172,   175,   178,   181,   184,   185,   190,   191,   196,
   199,   202,   205,   206,   211,   212,   217,   220,   223,   226,
   229,   232,   235,   238,   241,   244,   247,   250,   253,   256,
   259,   262,   265,   268,   271,   274,   277,   280,   283,   286,
   289,   292,   295,   298,   301,   302,   308,   309,   316,   317,
   323,   324,   331,   332,   338,   339,   346,   347,   353,   354,
   361,   363,   365,   368,   371,   374,   382,   390,   398,   406,
   414,   422,   430,   438,   442,   446,   456,   466,   476,   486,
   496,   506,   516,   526,   536,   546,   556,   566,   576,   586,
   596,   606,   610,   614,   616,   618,   620,   624,   628,   632,
   636,   640,   643,   647,   649,   653,   657,   661,   665,   669,
   672,   676,   681,   686,   691,   696,   701,   706,   711,   716,
   721,   726,   731,   736,   741,   746,   751,   756,   761,   766,
   771,   776,   778
};

static const short yyrhs[] = {    -1,
   119,     0,   130,     0,   119,   130,     0,   132,     0,   120,
   132,     0,   133,     0,   121,   133,     0,   137,     0,   122,
   137,     0,   141,     0,   123,   141,     0,   142,     0,   124,
   142,     0,   143,     0,   125,   143,     0,   144,     0,   126,
   144,     0,   145,     0,   127,   145,     0,   146,     0,   128,
   146,     0,   147,     0,   129,   147,     0,    39,    27,   120,
    28,     0,    62,    27,   121,    28,     0,    70,    27,   125,
    28,     0,    98,   134,    28,     0,   103,   138,    28,     0,
   160,     0,   131,     0,   148,     0,   151,     0,   154,     0,
   157,     0,    41,   164,     0,    40,   164,     0,    43,   161,
     0,    44,   161,     0,    45,   161,     0,    46,   164,     0,
     8,    47,     0,     9,    47,     0,     8,    48,     0,     9,
    48,     0,    49,   164,     0,    52,   164,     0,    53,   164,
     0,    54,   164,     0,    50,   164,     0,    51,   164,     0,
    57,    58,     0,    57,    58,    59,     0,    57,    60,     0,
    57,    61,     0,    55,   164,     0,    56,   164,     0,    42,
   161,     0,    63,   161,     0,    64,   161,     0,    65,   161,
     0,    66,   163,     0,    67,   163,     0,    68,   163,     0,
    69,   163,     0,     0,    99,    27,   135,   122,     0,     0,
   100,    27,   136,   122,     0,    42,   161,     0,   101,   163,
     0,   102,   161,     0,     0,   104,    27,   139,   123,     0,
     0,   105,    27,   140,   124,     0,   106,   161,     0,   107,
   161,     0,   106,   161,     0,   107,   161,     0,    71,   164,
     0,    72,   163,     0,    73,   163,     0,    74,   163,     0,
    75,   163,     0,    76,   163,     0,    77,   163,     0,    78,
   163,     0,    79,   163,     0,    80,   164,     0,    81,   161,
     0,    90,     5,     0,   109,   161,     0,   110,   163,     0,
    83,   161,     0,    84,   161,     0,    85,   161,     0,    86,
   161,     0,    87,   161,     0,    88,   161,     0,   112,   161,
     0,   113,   161,     0,   114,   161,     0,   115,   161,     0,
     0,    82,    27,   149,   128,    28,     0,     0,    82,     5,
    27,   150,   128,    28,     0,     0,    89,    27,   152,   126,
    28,     0,     0,    89,     5,    27,   153,   126,    28,     0,
     0,   108,    27,   155,   127,    28,     0,     0,   108,     5,
    27,   156,   127,    28,     0,     0,   111,    27,   158,   129,
    28,     0,     0,   111,     5,    27,   159,   129,    28,     0,
    93,     0,    94,     0,    95,   162,     0,    96,   161,     0,
    97,   161,     0,    23,   163,    31,   163,    31,   163,    24,
     0,    23,   163,    31,   163,    31,   164,    24,     0,    23,
   163,    31,   164,    31,   163,    24,     0,    23,   163,    31,
   164,    31,   164,    24,     0,    23,   164,    31,   163,    31,
   163,    24,     0,    23,   164,    31,   163,    31,   164,    24,
     0,    23,   164,    31,   164,    31,   163,    24,     0,    23,
   164,    31,   164,    31,   164,    24,     0,    23,   163,    24,
     0,    23,   164,    24,     0,    23,   163,    31,   163,    31,
   163,    31,   163,    24,     0,    23,   163,    31,   163,    31,
   163,    31,   164,    24,     0,    23,   163,    31,   163,    31,
   164,    31,   163,    24,     0,    23,   163,    31,   163,    31,
   164,    31,   164,    24,     0,    23,   163,    31,   164,    31,
   163,    31,   163,    24,     0,    23,   163,    31,   164,    31,
   163,    31,   164,    24,     0,    23,   163,    31,   164,    31,
   164,    31,   163,    24,     0,    23,   163,    31,   164,    31,
   164,    31,   164,    24,     0,    23,   164,    31,   163,    31,
   163,    31,   163,    24,     0,    23,   164,    31,   163,    31,
   163,    31,   164,    24,     0,    23,   164,    31,   163,    31,
   164,    31,   163,    24,     0,    23,   164,    31,   163,    31,
   164,    31,   164,    24,     0,    23,   164,    31,   164,    31,
   163,    31,   163,    24,     0,    23,   164,    31,   164,    31,
   163,    31,   164,    24,     0,    23,   164,    31,   164,    31,
   164,    31,   163,    24,     0,    23,   164,    31,   164,    31,
   164,    31,   164,    24,     0,    23,   163,    24,     0,    23,
   164,    24,     0,     3,     0,   165,     0,   166,     0,   163,
    33,   163,     0,   163,    34,   163,     0,   163,    36,   163,
     0,   163,    35,   163,     0,   163,    37,   163,     0,    34,
   163,     0,    29,   163,    30,     0,     4,     0,   164,    33,
   164,     0,   164,    34,   164,     0,   164,    36,   164,     0,
   164,    35,   164,     0,   164,    37,   164,     0,    34,   164,
     0,    29,   164,    30,     0,    11,    29,   163,    30,     0,
    11,    29,   164,    30,     0,    10,    29,   163,    30,     0,
    10,    29,   164,    30,     0,    12,    29,   163,    30,     0,
    12,    29,   164,    30,     0,    14,    29,   163,    30,     0,
    14,    29,   164,    30,     0,    13,    29,   163,    30,     0,
    13,    29,   164,    30,     0,    15,    29,   163,    30,     0,
    15,    29,   164,    30,     0,    17,    29,   163,    30,     0,
    17,    29,   164,    30,     0,    18,    29,   163,    30,     0,
    18,    29,   164,    30,     0,    19,    29,   163,    30,     0,
    19,    29,   164,    30,     0,    20,    29,   163,    30,     0,
    20,    29,   164,    30,     0,    21,     0,    22,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   212,   212,   213,   213,   216,   216,   217,   217,   218,   218,
   219,   219,   220,   220,   221,   221,   222,   222,   223,   223,
   224,   224,   225,   225,   229,   231,   232,   233,   234,   235,
   236,   239,   241,   242,   243,   246,   248,   249,   250,   251,
   252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
   262,   263,   264,   265,   266,   267,   268,   271,   273,   274,
   275,   276,   277,   278,   279,   282,   289,   289,   295,   297,
   299,   300,   303,   310,   310,   316,   318,   320,   323,   325,
   328,   330,   331,   332,   333,   334,   335,   336,   337,   338,
   339,   342,   354,   356,   359,   361,   362,   363,   364,   365,
   368,   370,   371,   372,   375,   383,   389,   399,   406,   411,
   416,   425,   432,   437,   442,   449,   456,   461,   466,   473,
   480,   482,   483,   484,   485,   488,   490,   491,   492,   493,
   494,   495,   496,   497,   498,   501,   503,   504,   505,   506,
   507,   508,   509,   510,   511,   512,   513,   514,   515,   516,
   517,   518,   519,   521,   523,   524,   525,   526,   527,   528,
   529,   530,   531,   534,   536,   537,   538,   539,   540,   541,
   542,   545,   547,   548,   549,   550,   551,   552,   553,   554,
   555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
   565,   568,   570
};

static const char * const yytname[] = {   "$","error","$undefined.","YY_REAL",
"YY_PARSE_INT","YY_STRING","YY_PARSE_TRUE","YY_PARSE_FALSE","YY_ENABLE","YY_DISABLE",
"YY_MATH_COS","YY_MATH_SIN","YY_MATH_TAN","YY_MATH_ACOS","YY_MATH_ASIN","YY_MATH_ATAN",
"YY_MATH_ATAN2","YY_MATH_LN","YY_MATH_LOG","YY_MATH_EXP","YY_MATH_SQRT","YY_MATH_E",
"YY_MATH_PI","YY_LT","YY_GT","YY_LBOX","YY_RBOX","YY_LCURLY","YY_RCURLY","YY_LPAREN",
"YY_RPAREN","YY_COMMA","YY_EQUAL","YY_PLUS","YY_MINUS","YY_DIV","YY_MUL","YY_CARAT",
"YY_BSLASH","YY_S_GLOBAL","YY_WIDTH","YY_HEIGHT","YY_POS","YY_IMG_BGCOLOR","YY_IMG_FGCOLOR",
"YY_GL_BGCOLOR","YY_GL_SPHERE_SECTIONS","YY_GL_RENDER_LIGHTS","YY_HEADLESS",
"YY_NUM_THREADS","YY_RENDER_X_BLOCK","YY_RENDER_Y_BLOCK","YY_RENDER_HANDLER_SLEEP",
"YY_RENDER_THREAD_SLEEP","YY_RENDER_SPINLOCK_SLEEP","YY_GAUSSIAN_BLUR_MAX","YY_GAUSSIAN_BLUR_SIGMA",
"YY_TRIANGLE_TEST","YY_BARYCENTRIC","YY_PROJECTION","YY_PLUCKER","YY_MOLLER",
"YY_S_CAMERA","YY_DIR","YY_LOOKAT","YY_UP","YY_FOV","YY_ASPECT","YY_MIN_DRAW",
"YY_MAX_DRAW","YY_S_P0","YY_SPIRAL_NUM_SPHERES","YY_SPIRAL_RADIUS","YY_LORENZ_DT",
"YY_LORENZ_MIN_DISTANCE","YY_LORENZ_MAX_DISTANCE","YY_LORENZ_SIGMA","YY_LORENZ_RHO",
"YY_LORENZ_BETA","YY_LORENZ_RADIUS","YY_LORENZ_NUM_SPHERES","YY_LORENZ_START",
"YY_S_TRIANGLE","YY_V1","YY_V2","YY_V3","YY_N1","YY_N2","YY_N3","YY_S_MESH",
"YY_LOAD","YY_S_INSTANCE","YY_GEOMETRY","YY_PUSHMATRIX","YY_POPMATRIX","YY_ROTATE",
"YY_TRANSLATE","YY_SCALE","YY_S_LIGHT","YY_S_POINTLIGHT","YY_S_CONSTANTLIGHT",
"YY_WATTAGE","YY_COLOR","YY_S_MATERIAL","YY_S_LAMBERT","YY_S_PLASTICA","YY_DIFFUSE",
"YY_AMBIENT","YY_S_SPHERE","YY_CENTER","YY_RADIUS","YY_S_BLPATCH","YY_P00","YY_P01",
"YY_P10","YY_P11","YY_EQUALS","NEG","input","option_blocks","global_stuff","camera_stuff",
"light_stuff","lambert_stuff","plastica_stuff","p0_stuff","mesh_stuff","sphere_stuff",
"triangle_stuff","blpatch_stuff","block","object_type","global_option","camera_option",
"light_type","@1","@2","light_option","material_type","@3","@4","lambert_option",
"plastica_option","p0_option","mesh_option","sphere_option","triangle_option",
"blpatch_option","object_triangle","@5","@6","object_mesh","@7","@8","object_sphere",
"@9","@10","object_blpatch","@11","@12","transformation","vector3","vector4",
"rExp","iExp","fExp","constantExp",""
};
#endif

static const short yyr1[] = {     0,
   118,   118,   119,   119,   120,   120,   121,   121,   122,   122,
   123,   123,   124,   124,   125,   125,   126,   126,   127,   127,
   128,   128,   129,   129,   130,   130,   130,   130,   130,   130,
   130,   131,   131,   131,   131,   132,   132,   132,   132,   132,
   132,   132,   132,   132,   132,   132,   132,   132,   132,   132,
   132,   132,   132,   132,   132,   132,   132,   133,   133,   133,
   133,   133,   133,   133,   133,   135,   134,   136,   134,   137,
   137,   137,   139,   138,   140,   138,   141,   141,   142,   142,
   143,   143,   143,   143,   143,   143,   143,   143,   143,   143,
   143,   144,   145,   145,   146,   146,   146,   146,   146,   146,
   147,   147,   147,   147,   149,   148,   150,   148,   152,   151,
   153,   151,   155,   154,   156,   154,   158,   157,   159,   157,
   160,   160,   160,   160,   160,   161,   161,   161,   161,   161,
   161,   161,   161,   161,   161,   162,   162,   162,   162,   162,
   162,   162,   162,   162,   162,   162,   162,   162,   162,   162,
   162,   162,   162,   163,   163,   163,   163,   163,   163,   163,
   163,   163,   163,   164,   164,   164,   164,   164,   164,   164,
   164,   165,   165,   165,   165,   165,   165,   165,   165,   165,
   165,   165,   165,   165,   165,   165,   165,   165,   165,   165,
   165,   166,   166
};

static const short yyr2[] = {     0,
     0,     1,     1,     2,     1,     2,     1,     2,     1,     2,
     1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
     1,     2,     1,     2,     4,     4,     4,     3,     3,     1,
     1,     1,     1,     1,     1,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     3,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     0,     4,     0,     4,     2,
     2,     2,     0,     4,     0,     4,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     0,     5,     0,     6,     0,     5,
     0,     6,     0,     5,     0,     6,     0,     5,     0,     6,
     1,     1,     2,     2,     2,     7,     7,     7,     7,     7,
     7,     7,     7,     3,     3,     9,     9,     9,     9,     9,
     9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
     9,     3,     3,     1,     1,     1,     3,     3,     3,     3,
     3,     2,     3,     1,     3,     3,     3,     3,     3,     2,
     3,     4,     4,     4,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
     4,     1,     1
};

static const short yydefact[] = {     1,
     0,     0,     0,     0,     0,   121,   122,     0,     0,     0,
     0,     0,     0,     0,     2,     3,    31,    32,    33,    34,
    35,    30,     0,     0,     0,     0,   105,     0,   109,     0,
   123,     0,   124,   125,     0,     0,     0,     0,     0,     0,
     0,   113,     0,   117,     4,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     5,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     7,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    15,   107,     0,   111,
     0,   154,   164,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   192,   193,     0,     0,     0,     0,   155,
   156,     0,     0,    66,    68,    28,    73,    75,    29,   115,
     0,   119,     0,    42,    44,    43,    45,     0,     0,    37,
    36,    38,    39,    40,    41,    46,    50,    51,    47,    48,
    49,    56,    57,    52,    54,    55,    25,     6,    58,    59,
    60,    61,     0,     0,    62,    63,    64,    65,    26,     8,
    81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    27,    16,     0,     0,     0,     0,     0,     0,     0,
     0,    21,     0,     0,     0,    17,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   162,   170,
   152,     0,     0,     0,     0,     0,     0,   153,     0,     0,
     0,     0,     0,     0,   134,     0,   135,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    19,     0,     0,     0,
     0,     0,     0,    23,    53,     0,    95,    96,    97,    98,
    99,   100,   106,    22,     0,    92,   110,    18,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   163,   171,
     0,     0,   157,   158,   160,   159,   161,     0,     0,   165,
   166,   168,   167,   169,     0,     0,     0,     0,     0,     0,
     0,    67,     9,    69,     0,     0,    74,    11,     0,     0,
    76,    13,     0,    93,    94,   114,    20,     0,   101,   102,
   103,   104,   118,    24,   108,   112,   174,   175,   172,   173,
   176,   177,   180,   181,   178,   179,   182,   183,   184,   185,
   186,   187,   188,   189,   190,   191,     0,     0,     0,     0,
     0,     0,     0,     0,    70,    71,    72,    10,    77,    78,
    12,    79,    80,    14,   116,   120,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   126,   127,   128,   129,   130,   131,   132,   133,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,   136,   137,   138,   139,   140,   141,
   142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
     0,     0,     0
};

static const short yydefgoto[] = {   421,
    15,    63,    73,   292,   297,   301,    86,   185,   226,   181,
   233,    16,    17,    64,    74,    37,   219,   220,   293,    40,
   221,   222,   298,   302,    87,   186,   227,   182,   234,    18,
    89,   174,    19,    91,   183,    20,   121,   223,    21,   123,
   228,    22,    33,    31,   197,   198,   110,   111
};

static const short yypact[] = {   187,
     5,    11,    18,     6,     7,-32768,-32768,    31,    36,    36,
   -56,   -40,     8,    10,   187,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   366,   252,   280,    48,-32768,    81,-32768,   421,
-32768,   421,-32768,-32768,    83,    99,   109,   158,   167,   182,
   184,-32768,   213,-32768,-32768,    24,    54,     2,     2,    36,
    36,    36,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     0,    95,-32768,    36,    36,    36,    36,   448,   448,
   448,   448,   236,-32768,     2,   448,   448,   448,   448,   448,
   448,   448,   448,     2,    36,   125,-32768,-32768,   145,-32768,
   154,-32768,-32768,   216,   219,   226,   227,   229,   230,   233,
   234,   238,   246,-32768,-32768,   421,   421,    -7,   147,-32768,
-32768,   237,   359,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
    33,-32768,   -94,-32768,-32768,-32768,-32768,     2,     2,   393,
   393,-32768,-32768,-32768,   393,   393,   393,   393,   393,   393,
   393,   393,   393,   206,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   448,   448,   907,   907,   907,   907,-32768,-32768,
   393,   907,   907,   907,   907,   907,   907,   907,   907,   393,
-32768,-32768,-32768,   145,    36,    36,    36,    36,    36,    36,
    28,-32768,   154,   241,   -24,-32768,   421,   421,   421,   421,
   421,   421,   421,   421,   421,   421,   217,   343,   240,   242,
-32768,   421,   448,   448,   448,   448,   448,-32768,   421,     2,
     2,     2,     2,     2,-32768,   421,-32768,   421,   -33,   -33,
    27,    49,    33,    36,   448,   -14,-32768,   -94,    36,    36,
    36,    36,   -25,-32768,-32768,    34,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   -23,-32768,-32768,-32768,   654,   667,
   675,   683,   691,   699,   707,   715,   723,   731,   739,   747,
   755,   763,   771,   779,   787,   795,   803,   811,-32768,-32768,
    94,   156,    70,    70,   240,   240,   240,   291,   818,   133,
   133,   242,   242,   242,   825,   832,   839,   846,    36,   448,
    36,   -33,-32768,   -33,    36,    36,    27,-32768,    36,    36,
    49,-32768,   -12,-32768,   907,-32768,-32768,   -21,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   421,   421,   421,   421,
   421,   421,   421,   421,-32768,   907,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   853,   860,   867,   874,
   881,   888,   895,   902,   305,   450,   455,   469,   474,   488,
   493,   507,   421,   421,   421,   421,   421,   421,   421,   421,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   512,   526,
   531,   545,   550,   564,   569,   583,   588,   602,   607,   621,
   626,   640,   645,   659,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   266,   286,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,    67,-32768,-32768,-32768,   105,    66,   117,
    64,   278,-32768,   243,   223,-32768,-32768,-32768,  -269,-32768,
-32768,-32768,    26,    -4,   244,  -175,  -204,  -173,  -232,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   157,-32768,   -30,    25,-32768,-32768
};


#define	YYLAST		944


static const short yytable[] = {   108,
   314,   112,   313,   247,   316,    93,   356,   244,   289,   248,
    26,    28,    41,   306,    43,   355,   201,   229,   230,   231,
   232,   307,   348,   202,   348,   203,   204,   205,   206,   207,
   128,    23,    27,    29,    42,   129,    44,    24,   155,   156,
   157,   158,    35,    36,    25,   162,   163,   164,   165,   166,
   167,   168,   169,    30,   109,   243,   113,   144,    32,   145,
   146,   315,   244,    38,    39,   184,   184,   290,   291,   248,
   124,   125,   130,   131,    88,   314,   199,   135,   136,   137,
   138,   139,   140,   141,   142,   143,   229,   230,   231,   232,
   229,   230,   231,   232,   224,   225,   224,   225,   307,   161,
   126,   127,    46,    47,   205,   206,   207,    90,   170,   114,
   175,   176,   177,   178,   179,   180,   175,   176,   177,   178,
   179,   180,   147,   199,   337,   115,   203,   204,   205,   206,
   207,   200,   295,   296,    48,    49,   116,    50,    51,    52,
    53,   224,   225,    54,    55,    56,    57,    58,    59,    60,
    61,    62,   172,   200,   299,   300,   249,   251,   253,   255,
   257,   259,   261,   263,   265,   267,    34,   212,   213,   214,
   208,   271,   273,   274,   275,   276,   277,   209,   278,   210,
   211,   212,   213,   214,   117,   285,   338,   287,   210,   211,
   212,   213,   214,   118,   305,    75,    76,    77,    78,    79,
    80,    81,    82,    83,    84,    85,   132,   133,   134,   119,
   120,   250,   252,   254,   256,   258,   260,   262,   264,   266,
   268,   149,   150,   151,   152,     1,   272,   175,   176,   177,
   178,   179,   180,   279,   280,   281,   282,   283,   284,   122,
   286,   171,   288,   184,   187,   246,   269,   188,     2,   203,
   204,   205,   206,   207,   189,   190,     3,   191,   192,   346,
   215,   193,   194,   159,   235,   422,   195,   216,     4,   203,
   204,   205,   206,   207,   196,     5,   207,    65,   214,     6,
     7,     8,     9,    10,    11,   423,   294,   245,   303,    12,
   236,   308,    45,    65,    13,   160,   354,    14,    66,    67,
    68,    69,    70,    71,    72,   148,   357,   359,   361,   363,
   365,   367,   369,   371,    66,    67,    68,    69,    70,    71,
    72,   339,   351,   203,   204,   205,   206,   207,   381,   173,
     0,   237,   238,   239,   240,   241,   242,   203,   204,   205,
   206,   207,   389,   391,   393,   395,   397,   399,   401,   403,
    75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
    85,   358,   360,   362,   364,   366,   368,   370,   372,     0,
     0,     0,   270,    46,    47,   210,   211,   212,   213,   214,
   304,     0,   217,     0,     0,   309,   310,   311,   312,   218,
     0,   210,   211,   212,   213,   214,     0,   390,   392,   394,
   396,   398,   400,   402,   404,    48,    49,     0,    50,    51,
    52,    53,     0,     0,    54,    55,    56,    57,    58,    59,
    60,    61,    62,    92,    93,   210,   211,   212,   213,   214,
    94,    95,    96,    97,    98,    99,     0,   100,   101,   102,
   103,   104,   105,     0,     0,   345,     0,   347,     0,   106,
    92,   349,   350,     0,   107,   352,   353,    94,    95,    96,
    97,    98,    99,     0,   100,   101,   102,   103,   104,   105,
     0,     0,     0,   382,     0,     0,   153,     0,   383,     0,
     0,   154,   210,   211,   212,   213,   214,   203,   204,   205,
   206,   207,   384,     0,     0,     0,     0,   385,     0,     0,
     0,   210,   211,   212,   213,   214,   203,   204,   205,   206,
   207,   386,     0,     0,     0,     0,   387,     0,     0,     0,
   210,   211,   212,   213,   214,   203,   204,   205,   206,   207,
   388,     0,     0,     0,     0,   405,     0,     0,     0,   210,
   211,   212,   213,   214,   203,   204,   205,   206,   207,   406,
     0,     0,     0,     0,   407,     0,     0,     0,   210,   211,
   212,   213,   214,   203,   204,   205,   206,   207,   408,     0,
     0,     0,     0,   409,     0,     0,     0,   210,   211,   212,
   213,   214,   203,   204,   205,   206,   207,   410,     0,     0,
     0,     0,   411,     0,     0,     0,   210,   211,   212,   213,
   214,   203,   204,   205,   206,   207,   412,     0,     0,     0,
     0,   413,     0,     0,     0,   210,   211,   212,   213,   214,
   203,   204,   205,   206,   207,   414,     0,     0,     0,     0,
   415,     0,     0,     0,   210,   211,   212,   213,   214,   203,
   204,   205,   206,   207,   416,     0,     0,     0,     0,   417,
     0,     0,     0,   210,   211,   212,   213,   214,   203,   204,
   205,   206,   207,   418,     0,     0,     0,     0,   419,     0,
     0,     0,   210,   211,   212,   213,   214,   203,   204,   205,
   206,   207,   420,   317,     0,     0,   203,   204,   205,   206,
   207,   210,   211,   212,   213,   214,   318,     0,     0,   210,
   211,   212,   213,   214,   319,     0,     0,   203,   204,   205,
   206,   207,   320,     0,     0,   210,   211,   212,   213,   214,
   321,     0,     0,   203,   204,   205,   206,   207,   322,     0,
     0,   210,   211,   212,   213,   214,   323,     0,     0,   203,
   204,   205,   206,   207,   324,     0,     0,   210,   211,   212,
   213,   214,   325,     0,     0,   203,   204,   205,   206,   207,
   326,     0,     0,   210,   211,   212,   213,   214,   327,     0,
     0,   203,   204,   205,   206,   207,   328,     0,     0,   210,
   211,   212,   213,   214,   329,     0,     0,   203,   204,   205,
   206,   207,   330,     0,     0,   210,   211,   212,   213,   214,
   331,     0,     0,   203,   204,   205,   206,   207,   332,     0,
     0,   210,   211,   212,   213,   214,   333,     0,     0,   203,
   204,   205,   206,   207,   334,     0,     0,   210,   211,   212,
   213,   214,   335,     0,     0,   203,   204,   205,   206,   207,
   336,     0,     0,   210,   211,   212,   213,   214,   340,     0,
   210,   211,   212,   213,   214,   341,     0,   203,   204,   205,
   206,   207,   342,     0,   210,   211,   212,   213,   214,   343,
     0,   203,   204,   205,   206,   207,   344,     0,   210,   211,
   212,   213,   214,   373,     0,   203,   204,   205,   206,   207,
   374,     0,   210,   211,   212,   213,   214,   375,     0,   203,
   204,   205,   206,   207,   376,     0,   210,   211,   212,   213,
   214,   377,     0,   203,   204,   205,   206,   207,   378,     0,
   210,   211,   212,   213,   214,   379,     0,   203,   204,   205,
   206,   207,   380,     0,   210,   211,   212,   213,   214,   203,
   204,   205,   206,   207
};

static const short yycheck[] = {    30,
   233,    32,    28,    28,    28,     4,    28,   181,    42,   185,
     5,     5,     5,    28,     5,    28,    24,   112,   113,   114,
   115,   226,   292,    31,   294,    33,    34,    35,    36,    37,
    29,    27,    27,    27,    27,    34,    27,    27,    69,    70,
    71,    72,    99,   100,    27,    76,    77,    78,    79,    80,
    81,    82,    83,    23,    30,    28,    32,    58,    23,    60,
    61,    28,   236,   104,   105,    90,    90,   101,   102,   245,
    47,    48,    48,    49,    27,   308,   107,    53,    54,    55,
    56,    57,    58,    59,    60,    61,   112,   113,   114,   115,
   112,   113,   114,   115,   109,   110,   109,   110,   303,    75,
    47,    48,     8,     9,    35,    36,    37,    27,    84,    27,
    83,    84,    85,    86,    87,    88,    83,    84,    85,    86,
    87,    88,    28,   154,    31,    27,    33,    34,    35,    36,
    37,   107,   106,   107,    40,    41,    28,    43,    44,    45,
    46,   109,   110,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    28,   129,   106,   107,   187,   188,   189,   190,
   191,   192,   193,   194,   195,   196,    10,    35,    36,    37,
    24,   202,   203,   204,   205,   206,   207,    31,   209,    33,
    34,    35,    36,    37,    27,   216,    31,   218,    33,    34,
    35,    36,    37,    27,   225,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    50,    51,    52,    28,
    27,   187,   188,   189,   190,   191,   192,   193,   194,   195,
   196,    65,    66,    67,    68,    39,   202,    83,    84,    85,
    86,    87,    88,   209,   210,   211,   212,   213,   214,    27,
   216,    85,   218,    90,    29,     5,    30,    29,    62,    33,
    34,    35,    36,    37,    29,    29,    70,    29,    29,   290,
    24,    29,    29,    28,    59,     0,    29,    31,    82,    33,
    34,    35,    36,    37,    29,    89,    37,    42,    37,    93,
    94,    95,    96,    97,    98,     0,   220,   183,   223,   103,
   174,   228,    15,    42,   108,    73,   301,   111,    63,    64,
    65,    66,    67,    68,    69,    63,   337,   338,   339,   340,
   341,   342,   343,   344,    63,    64,    65,    66,    67,    68,
    69,    31,   297,    33,    34,    35,    36,    37,    24,    86,
    -1,   175,   176,   177,   178,   179,   180,    33,    34,    35,
    36,    37,   373,   374,   375,   376,   377,   378,   379,   380,
    71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
    81,   337,   338,   339,   340,   341,   342,   343,   344,    -1,
    -1,    -1,    30,     8,     9,    33,    34,    35,    36,    37,
   224,    -1,    24,    -1,    -1,   229,   230,   231,   232,    31,
    -1,    33,    34,    35,    36,    37,    -1,   373,   374,   375,
   376,   377,   378,   379,   380,    40,    41,    -1,    43,    44,
    45,    46,    -1,    -1,    49,    50,    51,    52,    53,    54,
    55,    56,    57,     3,     4,    33,    34,    35,    36,    37,
    10,    11,    12,    13,    14,    15,    -1,    17,    18,    19,
    20,    21,    22,    -1,    -1,   289,    -1,   291,    -1,    29,
     3,   295,   296,    -1,    34,   299,   300,    10,    11,    12,
    13,    14,    15,    -1,    17,    18,    19,    20,    21,    22,
    -1,    -1,    -1,    24,    -1,    -1,    29,    -1,    24,    -1,
    -1,    34,    33,    34,    35,    36,    37,    33,    34,    35,
    36,    37,    24,    -1,    -1,    -1,    -1,    24,    -1,    -1,
    -1,    33,    34,    35,    36,    37,    33,    34,    35,    36,
    37,    24,    -1,    -1,    -1,    -1,    24,    -1,    -1,    -1,
    33,    34,    35,    36,    37,    33,    34,    35,    36,    37,
    24,    -1,    -1,    -1,    -1,    24,    -1,    -1,    -1,    33,
    34,    35,    36,    37,    33,    34,    35,    36,    37,    24,
    -1,    -1,    -1,    -1,    24,    -1,    -1,    -1,    33,    34,
    35,    36,    37,    33,    34,    35,    36,    37,    24,    -1,
    -1,    -1,    -1,    24,    -1,    -1,    -1,    33,    34,    35,
    36,    37,    33,    34,    35,    36,    37,    24,    -1,    -1,
    -1,    -1,    24,    -1,    -1,    -1,    33,    34,    35,    36,
    37,    33,    34,    35,    36,    37,    24,    -1,    -1,    -1,
    -1,    24,    -1,    -1,    -1,    33,    34,    35,    36,    37,
    33,    34,    35,    36,    37,    24,    -1,    -1,    -1,    -1,
    24,    -1,    -1,    -1,    33,    34,    35,    36,    37,    33,
    34,    35,    36,    37,    24,    -1,    -1,    -1,    -1,    24,
    -1,    -1,    -1,    33,    34,    35,    36,    37,    33,    34,
    35,    36,    37,    24,    -1,    -1,    -1,    -1,    24,    -1,
    -1,    -1,    33,    34,    35,    36,    37,    33,    34,    35,
    36,    37,    24,    30,    -1,    -1,    33,    34,    35,    36,
    37,    33,    34,    35,    36,    37,    30,    -1,    -1,    33,
    34,    35,    36,    37,    30,    -1,    -1,    33,    34,    35,
    36,    37,    30,    -1,    -1,    33,    34,    35,    36,    37,
    30,    -1,    -1,    33,    34,    35,    36,    37,    30,    -1,
    -1,    33,    34,    35,    36,    37,    30,    -1,    -1,    33,
    34,    35,    36,    37,    30,    -1,    -1,    33,    34,    35,
    36,    37,    30,    -1,    -1,    33,    34,    35,    36,    37,
    30,    -1,    -1,    33,    34,    35,    36,    37,    30,    -1,
    -1,    33,    34,    35,    36,    37,    30,    -1,    -1,    33,
    34,    35,    36,    37,    30,    -1,    -1,    33,    34,    35,
    36,    37,    30,    -1,    -1,    33,    34,    35,    36,    37,
    30,    -1,    -1,    33,    34,    35,    36,    37,    30,    -1,
    -1,    33,    34,    35,    36,    37,    30,    -1,    -1,    33,
    34,    35,    36,    37,    30,    -1,    -1,    33,    34,    35,
    36,    37,    30,    -1,    -1,    33,    34,    35,    36,    37,
    30,    -1,    -1,    33,    34,    35,    36,    37,    31,    -1,
    33,    34,    35,    36,    37,    31,    -1,    33,    34,    35,
    36,    37,    31,    -1,    33,    34,    35,    36,    37,    31,
    -1,    33,    34,    35,    36,    37,    31,    -1,    33,    34,
    35,    36,    37,    31,    -1,    33,    34,    35,    36,    37,
    31,    -1,    33,    34,    35,    36,    37,    31,    -1,    33,
    34,    35,    36,    37,    31,    -1,    33,    34,    35,    36,
    37,    31,    -1,    33,    34,    35,    36,    37,    31,    -1,
    33,    34,    35,    36,    37,    31,    -1,    33,    34,    35,
    36,    37,    31,    -1,    33,    34,    35,    36,    37,    33,
    34,    35,    36,    37
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 192 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

int
yyparse(YYPARSE_PARAM)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 25:
#line 230 "parser.y"
{ ;
    break;}
case 26:
#line 231 "parser.y"
{ ;
    break;}
case 27:
#line 232 "parser.y"
{ ;
    break;}
case 28:
#line 233 "parser.y"
{ ;
    break;}
case 29:
#line 234 "parser.y"
{ ;
    break;}
case 30:
#line 235 "parser.y"
{ ;
    break;}
case 31:
#line 236 "parser.y"
{ ;
    break;}
case 36:
#line 247 "parser.y"
{ g_image->Resize( g_image->GetWidth(), rawray::options::global::win_height = yyvsp[0].integer ); ;
    break;}
case 37:
#line 248 "parser.y"
{ g_image->Resize( rawray::options::global::win_width = yyvsp[0].integer, g_image->GetHeight() ); ;
    break;}
case 38:
#line 249 "parser.y"
{ rawray::options::global::img_bg_color = math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ); ;
    break;}
case 39:
#line 250 "parser.y"
{ rawray::options::global::img_fg_color = math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ); ;
    break;}
case 40:
#line 251 "parser.y"
{ rawray::options::global::gl_bg_color = math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ); ;
    break;}
case 41:
#line 252 "parser.y"
{ rawray::options::global::gl_sphere_sections = yyvsp[0].integer; ;
    break;}
case 42:
#line 253 "parser.y"
{ rawray::options::global::gl_render_lights = true; ;
    break;}
case 43:
#line 254 "parser.y"
{ rawray::options::global::gl_render_lights = false; ;
    break;}
case 44:
#line 255 "parser.y"
{ rawray::options::global::headless = true; ;
    break;}
case 45:
#line 256 "parser.y"
{ rawray::options::global::headless = false; ;
    break;}
case 46:
#line 257 "parser.y"
{ rawray::options::global::num_threads = yyvsp[0].integer; ;
    break;}
case 47:
#line 258 "parser.y"
{ rawray::options::global::render_handler_sleep = yyvsp[0].integer; ;
    break;}
case 48:
#line 259 "parser.y"
{ rawray::options::global::render_thread_sleep = yyvsp[0].integer; ;
    break;}
case 49:
#line 260 "parser.y"
{ rawray::options::global::render_spinlock_sleep = yyvsp[0].integer; ;
    break;}
case 50:
#line 261 "parser.y"
{ rawray::options::global::render_x_block = yyvsp[0].integer; ;
    break;}
case 51:
#line 262 "parser.y"
{ rawray::options::global::render_y_block = yyvsp[0].integer; ;
    break;}
case 52:
#line 263 "parser.y"
{ rawray::options::global::triangle_intersection_algorithm = rawray::options::BARYCENTRIC; ;
    break;}
case 53:
#line 264 "parser.y"
{ rawray::options::global::triangle_intersection_algorithm = rawray::options::BARYCENTRIC_PROJECTION; ;
    break;}
case 54:
#line 265 "parser.y"
{ rawray::options::global::triangle_intersection_algorithm = rawray::options::PLUCKER; ;
    break;}
case 55:
#line 266 "parser.y"
{ rawray::options::global::triangle_intersection_algorithm = rawray::options::MOLLER; ;
    break;}
case 56:
#line 267 "parser.y"
{ rawray::options::global::gaussian_blur_max = yyvsp[0].integer ;
    break;}
case 57:
#line 268 "parser.y"
{ rawray::options::global::gaussian_blur_sigma = yyvsp[0].integer ;
    break;}
case 58:
#line 272 "parser.y"
{ g_camera->SetEye(		rawray::options::camera::eye = math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 59:
#line 273 "parser.y"
{ g_camera->SetViewDir( rawray::options::camera::view = math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 60:
#line 274 "parser.y"
{ g_camera->SetLookAt(	rawray::options::camera::lookat = math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 61:
#line 275 "parser.y"
{ g_camera->SetUp(		rawray::options::camera::up = math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 62:
#line 276 "parser.y"
{ g_camera->SetFOV(		rawray::options::camera::fov = yyvsp[0].real ); ;
    break;}
case 63:
#line 277 "parser.y"
{ g_camera->SetAspect(	rawray::options::camera::aspect = yyvsp[0].real ); ;
    break;}
case 64:
#line 278 "parser.y"
{ g_camera->SetMinDraw( rawray::options::camera::min_draw = yyvsp[0].real ); ;
    break;}
case 65:
#line 279 "parser.y"
{ g_camera->SetMinDraw( rawray::options::camera::max_draw = yyvsp[0].real ); ;
    break;}
case 66:
#line 284 "parser.y"
{
				g_light = new rawray::PointLight();
				g_scene->AddLight( g_light );
			;
    break;}
case 68:
#line 290 "parser.y"
{
				g_light = new rawray::ConstantLight();
				g_scene->AddLight( g_light );
			;
    break;}
case 70:
#line 298 "parser.y"
{ g_light->SetPosition( math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 71:
#line 299 "parser.y"
{ g_light->SetWattage( yyvsp[0].real ); ;
    break;}
case 72:
#line 300 "parser.y"
{ g_light->SetColor( math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 73:
#line 305 "parser.y"
{
				g_material = new rawray::Lambert();
				g_scene->AddMaterial( g_material );
			;
    break;}
case 75:
#line 311 "parser.y"
{
				g_material = new rawray::Plastica();
				g_scene->AddMaterial( g_material );
			;
    break;}
case 77:
#line 319 "parser.y"
{ ((rawray::Lambert*)g_material)->SetDiffuse( math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 78:
#line 320 "parser.y"
{ ((rawray::Lambert*)g_material)->SetAmbient( math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 79:
#line 324 "parser.y"
{ ((rawray::Plastica*)g_material)->SetDiffuse( math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 80:
#line 325 "parser.y"
{ ((rawray::Plastica*)g_material)->SetAmbient( math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 81:
#line 329 "parser.y"
{ rawray::options::p0::spiral_num_spheres = yyvsp[0].integer; ;
    break;}
case 82:
#line 330 "parser.y"
{ rawray::options::p0::spiral_radius = yyvsp[0].real; ;
    break;}
case 83:
#line 331 "parser.y"
{ rawray::options::p0::lorenz_dt = yyvsp[0].real; ;
    break;}
case 84:
#line 332 "parser.y"
{ rawray::options::p0::lorenz_min_distance = yyvsp[0].real; ;
    break;}
case 85:
#line 333 "parser.y"
{ rawray::options::p0::lorenz_max_distance = yyvsp[0].real; ;
    break;}
case 86:
#line 334 "parser.y"
{ rawray::options::p0::lorenz_sigma = yyvsp[0].real; ;
    break;}
case 87:
#line 335 "parser.y"
{ rawray::options::p0::lorenz_rho = yyvsp[0].real; ;
    break;}
case 88:
#line 336 "parser.y"
{ rawray::options::p0::lorenz_beta = yyvsp[0].real; ;
    break;}
case 89:
#line 337 "parser.y"
{ rawray::options::p0::lorenz_radius = yyvsp[0].real; ;
    break;}
case 90:
#line 338 "parser.y"
{ rawray::options::p0::lorenz_num_spheres = yyvsp[0].integer; ;
    break;}
case 91:
#line 339 "parser.y"
{ rawray::options::p0::lorenz_start = math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ); ;
    break;}
case 92:
#line 344 "parser.y"
{
				yyvsp[0].str[strlen(yyvsp[0].str)-1] = 0;
				printf( "Loading Mesh: '%s'\n", yyvsp[0].str+1 );
				g_mesh->LoadOBJ( yyvsp[0].str+1 );
				printf( "Found %d triangles in mesh\n", g_mesh->GetNumTriangles() );
				
				delete yyvsp[0].str;
			;
    break;}
case 93:
#line 355 "parser.y"
{ ((rawray::Sphere*)g_obj)->SetCenter( math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 94:
#line 356 "parser.y"
{ ((rawray::Sphere*)g_obj)->SetRadius( yyvsp[0].real ); ;
    break;}
case 95:
#line 360 "parser.y"
{ ;
    break;}
case 96:
#line 361 "parser.y"
{ ;
    break;}
case 97:
#line 362 "parser.y"
{ ;
    break;}
case 98:
#line 363 "parser.y"
{ ;
    break;}
case 99:
#line 364 "parser.y"
{ ;
    break;}
case 100:
#line 365 "parser.y"
{ ;
    break;}
case 101:
#line 369 "parser.y"
{ ((rawray::BLPatch*)g_obj)->SetP00( math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 102:
#line 370 "parser.y"
{ ((rawray::BLPatch*)g_obj)->SetP01( math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 103:
#line 371 "parser.y"
{ ((rawray::BLPatch*)g_obj)->SetP10( math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 104:
#line 372 "parser.y"
{ ((rawray::BLPatch*)g_obj)->SetP11( math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 105:
#line 377 "parser.y"
{
				g_mesh = new rawray::TriangleMesh();
				
				// TODO: implement
				// Create single triangle
			;
    break;}
case 106:
#line 384 "parser.y"
{
				g_scene->AddMesh( g_mesh );
				rawray::AddTrianglesOfMesh();
			;
    break;}
case 107:
#line 390 "parser.y"
{
				g_mesh = new rawray::TriangleMesh();
				
				// TODO: implement
				//g_objectMap[$2] = g_obj;
				// Create single triagnle
				
				delete yyvsp[-1].str;
			;
    break;}
case 108:
#line 400 "parser.y"
{
				g_scene->AddMesh( g_mesh );
				rawray::AddTrianglesOfMesh();
			;
    break;}
case 109:
#line 408 "parser.y"
{
				g_mesh = new rawray::TriangleMesh();
			;
    break;}
case 110:
#line 412 "parser.y"
{
				g_scene->AddMesh( g_mesh );
				rawray::AddTrianglesOfMesh();
			;
    break;}
case 111:
#line 417 "parser.y"
{
				g_mesh = new rawray::TriangleMesh();
				
				// TODO: implement
				//g_objectMap[$2] = g_obj;
				
				delete yyvsp[-1].str;
			;
    break;}
case 112:
#line 426 "parser.y"
{
				g_scene->AddMesh( g_mesh );
				rawray::AddTrianglesOfMesh();
			;
    break;}
case 113:
#line 434 "parser.y"
{
				g_obj = new rawray::Sphere( math::Vector3(0), 1.0f, g_material );
			;
    break;}
case 114:
#line 438 "parser.y"
{
				g_scene->AddObject( g_obj );
				g_obj = NULL;
			;
    break;}
case 115:
#line 443 "parser.y"
{
				g_obj = new rawray::Sphere( math::Vector3(0), 1.0f, g_material );
				g_objectMap[yyvsp[-1].str] = g_obj;
				
				delete yyvsp[-1].str;
			;
    break;}
case 116:
#line 450 "parser.y"
{
				g_scene->AddObject( g_obj );
				g_obj = NULL;
			;
    break;}
case 117:
#line 458 "parser.y"
{
				g_obj = new rawray::BLPatch( g_material );
			;
    break;}
case 118:
#line 462 "parser.y"
{
				g_scene->AddObject( g_obj );
				g_obj = NULL;
			;
    break;}
case 119:
#line 467 "parser.y"
{
				g_obj = new rawray::BLPatch( g_material );
				g_objectMap[yyvsp[-1].str] = g_obj;
				
				delete yyvsp[-1].str;
			;
    break;}
case 120:
#line 474 "parser.y"
{
				g_scene->AddObject( g_obj );
				g_obj = NULL;
			;
    break;}
case 121:
#line 481 "parser.y"
{  ;
    break;}
case 122:
#line 482 "parser.y"
{  ;
    break;}
case 123:
#line 483 "parser.y"
{  ;
    break;}
case 124:
#line 484 "parser.y"
{  ;
    break;}
case 125:
#line 485 "parser.y"
{  ;
    break;}
case 126:
#line 489 "parser.y"
{ yyval.vec[0] = yyvsp[-5].real; yyval.vec[1] = yyvsp[-3].real; yyval.vec[2] = yyvsp[-1].real; ;
    break;}
case 127:
#line 490 "parser.y"
{ yyval.vec[0] = yyvsp[-5].real; yyval.vec[1] = yyvsp[-3].real; yyval.vec[2] = yyvsp[-1].integer; ;
    break;}
case 128:
#line 491 "parser.y"
{ yyval.vec[0] = yyvsp[-5].real; yyval.vec[1] = yyvsp[-3].integer; yyval.vec[2] = yyvsp[-1].real; ;
    break;}
case 129:
#line 492 "parser.y"
{ yyval.vec[0] = yyvsp[-5].real; yyval.vec[1] = yyvsp[-3].integer; yyval.vec[2] = yyvsp[-1].integer; ;
    break;}
case 130:
#line 493 "parser.y"
{ yyval.vec[0] = yyvsp[-5].integer; yyval.vec[1] = yyvsp[-3].real; yyval.vec[2] = yyvsp[-1].real; ;
    break;}
case 131:
#line 494 "parser.y"
{ yyval.vec[0] = yyvsp[-5].integer; yyval.vec[1] = yyvsp[-3].real; yyval.vec[2] = yyvsp[-1].integer; ;
    break;}
case 132:
#line 495 "parser.y"
{ yyval.vec[0] = yyvsp[-5].integer; yyval.vec[1] = yyvsp[-3].integer; yyval.vec[2] = yyvsp[-1].real; ;
    break;}
case 133:
#line 496 "parser.y"
{ yyval.vec[0] = yyvsp[-5].integer; yyval.vec[1] = yyvsp[-3].integer; yyval.vec[2] = yyvsp[-1].integer; ;
    break;}
case 134:
#line 497 "parser.y"
{ yyval.vec[0] = yyvsp[-1].real; yyval.vec[1] = yyvsp[-1].real; yyval.vec[2] = yyvsp[-1].real; ;
    break;}
case 135:
#line 498 "parser.y"
{ yyval.vec[0] = yyvsp[-1].integer; yyval.vec[1] = yyvsp[-1].integer; yyval.vec[2] = yyvsp[-1].integer; ;
    break;}
case 136:
#line 502 "parser.y"
{ yyval.vec[0] = yyvsp[-7].real; yyval.vec[1] = yyvsp[-5].real; yyval.vec[2] = yyvsp[-3].real; yyval.vec[3] = yyvsp[-1].real; ;
    break;}
case 137:
#line 503 "parser.y"
{ yyval.vec[0] = yyvsp[-7].real; yyval.vec[1] = yyvsp[-5].real; yyval.vec[2] = yyvsp[-3].real; yyval.vec[3] = yyvsp[-1].integer; ;
    break;}
case 138:
#line 504 "parser.y"
{ yyval.vec[0] = yyvsp[-7].real; yyval.vec[1] = yyvsp[-5].real; yyval.vec[2] = yyvsp[-3].integer; yyval.vec[3] = yyvsp[-1].real; ;
    break;}
case 139:
#line 505 "parser.y"
{ yyval.vec[0] = yyvsp[-7].real; yyval.vec[1] = yyvsp[-5].real; yyval.vec[2] = yyvsp[-3].integer; yyval.vec[3] = yyvsp[-1].integer; ;
    break;}
case 140:
#line 506 "parser.y"
{ yyval.vec[0] = yyvsp[-7].real; yyval.vec[1] = yyvsp[-5].integer; yyval.vec[2] = yyvsp[-3].real; yyval.vec[3] = yyvsp[-1].real; ;
    break;}
case 141:
#line 507 "parser.y"
{ yyval.vec[0] = yyvsp[-7].real; yyval.vec[1] = yyvsp[-5].integer; yyval.vec[2] = yyvsp[-3].real; yyval.vec[3] = yyvsp[-1].integer; ;
    break;}
case 142:
#line 508 "parser.y"
{ yyval.vec[0] = yyvsp[-7].real; yyval.vec[1] = yyvsp[-5].integer; yyval.vec[2] = yyvsp[-3].integer; yyval.vec[3] = yyvsp[-1].real; ;
    break;}
case 143:
#line 509 "parser.y"
{ yyval.vec[0] = yyvsp[-7].real; yyval.vec[1] = yyvsp[-5].integer; yyval.vec[2] = yyvsp[-3].integer; yyval.vec[3] = yyvsp[-1].integer; ;
    break;}
case 144:
#line 510 "parser.y"
{ yyval.vec[0] = yyvsp[-7].integer; yyval.vec[1] = yyvsp[-5].real; yyval.vec[2] = yyvsp[-3].real; yyval.vec[3] = yyvsp[-1].real; ;
    break;}
case 145:
#line 511 "parser.y"
{ yyval.vec[0] = yyvsp[-7].integer; yyval.vec[1] = yyvsp[-5].real; yyval.vec[2] = yyvsp[-3].real; yyval.vec[3] = yyvsp[-1].integer; ;
    break;}
case 146:
#line 512 "parser.y"
{ yyval.vec[0] = yyvsp[-7].integer; yyval.vec[1] = yyvsp[-5].real; yyval.vec[2] = yyvsp[-3].integer; yyval.vec[3] = yyvsp[-1].real; ;
    break;}
case 147:
#line 513 "parser.y"
{ yyval.vec[0] = yyvsp[-7].integer; yyval.vec[1] = yyvsp[-5].real; yyval.vec[2] = yyvsp[-3].integer; yyval.vec[3] = yyvsp[-1].integer; ;
    break;}
case 148:
#line 514 "parser.y"
{ yyval.vec[0] = yyvsp[-7].integer; yyval.vec[1] = yyvsp[-5].integer; yyval.vec[2] = yyvsp[-3].real; yyval.vec[3] = yyvsp[-1].real; ;
    break;}
case 149:
#line 515 "parser.y"
{ yyval.vec[0] = yyvsp[-7].integer; yyval.vec[1] = yyvsp[-5].integer; yyval.vec[2] = yyvsp[-3].real; yyval.vec[3] = yyvsp[-1].integer; ;
    break;}
case 150:
#line 516 "parser.y"
{ yyval.vec[0] = yyvsp[-7].integer; yyval.vec[1] = yyvsp[-5].integer; yyval.vec[2] = yyvsp[-3].integer; yyval.vec[3] = yyvsp[-1].real; ;
    break;}
case 151:
#line 517 "parser.y"
{ yyval.vec[0] = yyvsp[-7].integer; yyval.vec[1] = yyvsp[-5].integer; yyval.vec[2] = yyvsp[-3].integer; yyval.vec[3] = yyvsp[-1].integer; ;
    break;}
case 152:
#line 518 "parser.y"
{ yyval.vec[0] = yyvsp[-1].real; yyval.vec[1] = yyvsp[-1].real; yyval.vec[2] = yyvsp[-1].real; yyval.vec[3] = yyvsp[-1].real; ;
    break;}
case 153:
#line 519 "parser.y"
{ yyval.vec[0] = yyvsp[-1].integer; yyval.vec[1] = yyvsp[-1].integer; yyval.vec[2] = yyvsp[-1].integer; yyval.vec[3] = yyvsp[-1].integer; ;
    break;}
case 154:
#line 522 "parser.y"
{ yyval.real = yyvsp[0].real; ;
    break;}
case 155:
#line 523 "parser.y"
{ yyval.real = yyvsp[0].real; ;
    break;}
case 156:
#line 524 "parser.y"
{ yyval.real = yyvsp[0].real; ;
    break;}
case 157:
#line 525 "parser.y"
{ yyval.real = yyvsp[-2].real + yyvsp[0].real; ;
    break;}
case 158:
#line 526 "parser.y"
{ yyval.real = yyvsp[-2].real - yyvsp[0].real; ;
    break;}
case 159:
#line 527 "parser.y"
{ yyval.real = yyvsp[-2].real * yyvsp[0].real; ;
    break;}
case 160:
#line 528 "parser.y"
{ yyval.real = yyvsp[-2].real / yyvsp[0].real; ;
    break;}
case 161:
#line 529 "parser.y"
{ yyval.real = pow( (float)yyvsp[-2].real, (float)yyvsp[0].real ); ;
    break;}
case 162:
#line 530 "parser.y"
{ yyval.real = -yyvsp[0].real; ;
    break;}
case 163:
#line 531 "parser.y"
{ yyval.real = yyvsp[-1].real; ;
    break;}
case 164:
#line 535 "parser.y"
{ yyval.integer = yyvsp[0].integer; ;
    break;}
case 165:
#line 536 "parser.y"
{ yyval.integer = yyvsp[-2].integer + yyvsp[0].integer; ;
    break;}
case 166:
#line 537 "parser.y"
{ yyval.integer = yyvsp[-2].integer - yyvsp[0].integer; ;
    break;}
case 167:
#line 538 "parser.y"
{ yyval.integer = yyvsp[-2].integer * yyvsp[0].integer; ;
    break;}
case 168:
#line 539 "parser.y"
{ yyval.integer = yyvsp[-2].integer / yyvsp[0].integer; ;
    break;}
case 169:
#line 540 "parser.y"
{ yyval.integer = (int)pow( (float)yyvsp[-2].integer, (float)yyvsp[0].integer ); ;
    break;}
case 170:
#line 541 "parser.y"
{ yyval.integer = -yyvsp[0].integer; ;
    break;}
case 171:
#line 542 "parser.y"
{ yyval.integer = yyvsp[-1].integer; ;
    break;}
case 172:
#line 546 "parser.y"
{yyval.real = sin(yyvsp[-1].real); ;
    break;}
case 173:
#line 547 "parser.y"
{yyval.real = sin((float)yyvsp[-1].integer); ;
    break;}
case 174:
#line 548 "parser.y"
{yyval.real = cos(yyvsp[-1].real); ;
    break;}
case 175:
#line 549 "parser.y"
{yyval.real = cos((float)yyvsp[-1].integer); ;
    break;}
case 176:
#line 550 "parser.y"
{yyval.real = tan(yyvsp[-1].real); ;
    break;}
case 177:
#line 551 "parser.y"
{yyval.real = tan((float)yyvsp[-1].integer); ;
    break;}
case 178:
#line 552 "parser.y"
{yyval.real = asin(yyvsp[-1].real); ;
    break;}
case 179:
#line 553 "parser.y"
{yyval.real = asin((float)yyvsp[-1].integer); ;
    break;}
case 180:
#line 554 "parser.y"
{yyval.real = acos(yyvsp[-1].real); ;
    break;}
case 181:
#line 555 "parser.y"
{yyval.real = acos((float)yyvsp[-1].integer); ;
    break;}
case 182:
#line 556 "parser.y"
{yyval.real = atan(yyvsp[-1].real); ;
    break;}
case 183:
#line 557 "parser.y"
{yyval.real = atan((float)yyvsp[-1].integer); ;
    break;}
case 184:
#line 558 "parser.y"
{yyval.real = log(yyvsp[-1].real); ;
    break;}
case 185:
#line 559 "parser.y"
{yyval.real = log((float)yyvsp[-1].integer); ;
    break;}
case 186:
#line 560 "parser.y"
{yyval.real = log10(yyvsp[-1].real); ;
    break;}
case 187:
#line 561 "parser.y"
{yyval.real = log10((float)yyvsp[-1].integer); ;
    break;}
case 188:
#line 562 "parser.y"
{yyval.real = exp(yyvsp[-1].real); ;
    break;}
case 189:
#line 563 "parser.y"
{yyval.real = exp((float)yyvsp[-1].integer); ;
    break;}
case 190:
#line 564 "parser.y"
{yyval.real = sqrt(yyvsp[-1].real); ;
    break;}
case 191:
#line 565 "parser.y"
{yyval.real = sqrt((float)yyvsp[-1].integer); ;
    break;}
case 192:
#line 569 "parser.y"
{ yyval.real = 2.718281828459f; ;
    break;}
case 193:
#line 570 "parser.y"
{ yyval.real = 3.141592653589793f; ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 487 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 574 "parser.y"


//Additional C code

namespace rawray {

void AddTrianglesOfMesh() {
    for( uint32 i=0; i<g_mesh->GetNumTriangles(); ++i ) {
        Triangle* t = rawray::TriangleFactory::NewTriangle( *g_mesh, i, g_material );
        g_scene->AddObject( t );
    }
    
    g_mesh = NULL;
}

void SetConfigSources(Scene* scene, Camera* cam, Image* img) {
    g_scene = scene;
    g_camera = cam;
    g_image = img;
}

bool ConfigParser(const char* filename) {
#ifdef YYDEBUG
#if YYDEBUG==1
    yydebug = 1;
#endif
#endif
    
    if( !g_scene || !g_camera || !g_image )
        return false;
    
    yyin = fopen( filename, "r" );
    if( !yyin )
        return false;

    yyparse();
    fclose( yyin );

	return yyerr == 0;
}

void DoneParsing() {
	yy_done_parsing();
}

} // namespace rawray
