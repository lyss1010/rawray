
/*  A Bison parser, made from parser.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	YY_REAL	258
#define	YY_PARSE_INT	259
#define	YY_STRING	260
#define	YY_PARSE_TRUE	261
#define	YY_PARSE_FALSE	262
#define	YY_TRUE	263
#define	YY_FALSE	264
#define	YY_MATH_COS	265
#define	YY_MATH_SIN	266
#define	YY_MATH_TAN	267
#define	YY_MATH_ACOS	268
#define	YY_MATH_ASIN	269
#define	YY_MATH_ATAN	270
#define	YY_MATH_ATAN2	271
#define	YY_MATH_LN	272
#define	YY_MATH_LOG	273
#define	YY_MATH_EXP	274
#define	YY_MATH_SQRT	275
#define	YY_MATH_E	276
#define	YY_MATH_PI	277
#define	YY_LT	278
#define	YY_GT	279
#define	YY_LBOX	280
#define	YY_RBOX	281
#define	YY_LCURLY	282
#define	YY_RCURLY	283
#define	YY_LPAREN	284
#define	YY_RPAREN	285
#define	YY_COMMA	286
#define	YY_EQUAL	287
#define	YY_PLUS	288
#define	YY_MINUS	289
#define	YY_DIV	290
#define	YY_MUL	291
#define	YY_CARAT	292
#define	YY_BSLASH	293
#define	YY_X	294
#define	YY_S_GLOBAL	295
#define	YY_SIZE	296
#define	YY_POS	297
#define	YY_IMG_BGCOLOR	298
#define	YY_IMG_FGCOLOR	299
#define	YY_GL_BGCOLOR	300
#define	YY_GL_SPHERE_SECTIONS	301
#define	YY_GL_RENDER_LIGHTS	302
#define	YY_GL_RENDER_BBOX	303
#define	YY_HEADLESS	304
#define	YY_NUM_THREADS	305
#define	YY_THREAD_JOB_SIZE	306
#define	YY_RENDER_HANDLER_SLEEP	307
#define	YY_RENDER_THREAD_SLEEP	308
#define	YY_RENDER_SPINLOCK_SLEEP	309
#define	YY_GAUSSIAN_BLUR_MAX	310
#define	YY_GAUSSIAN_BLUR_SIGMA	311
#define	YY_TRIANGLE_TEST	312
#define	YY_BARYCENTRIC	313
#define	YY_PROJECTION	314
#define	YY_PLUCKER	315
#define	YY_MOLLER	316
#define	YY_BOX_COST	317
#define	YY_OBJECT_COST	318
#define	YY_PFM	319
#define	YY_ANTI_ALIAS	320
#define	YY_MAX_DIFFUSE_BOUNCE	321
#define	YY_MAX_IOR_BOUNCE	322
#define	YY_HDR_BLOOM_POWER	323
#define	YY_S_CAMERA	324
#define	YY_DIR	325
#define	YY_LOOKAT	326
#define	YY_UP	327
#define	YY_FOV	328
#define	YY_ASPECT	329
#define	YY_MIN_DRAW	330
#define	YY_MAX_DRAW	331
#define	YY_S_P0	332
#define	YY_SPIRAL_NUM_SPHERES	333
#define	YY_SPIRAL_RADIUS	334
#define	YY_LORENZ_DT	335
#define	YY_LORENZ_MIN_DISTANCE	336
#define	YY_LORENZ_MAX_DISTANCE	337
#define	YY_LORENZ_SIGMA	338
#define	YY_LORENZ_RHO	339
#define	YY_LORENZ_BETA	340
#define	YY_LORENZ_RADIUS	341
#define	YY_LORENZ_NUM_SPHERES	342
#define	YY_LORENZ_START	343
#define	YY_S_TRIANGLE	344
#define	YY_V1	345
#define	YY_V2	346
#define	YY_V3	347
#define	YY_N1	348
#define	YY_N2	349
#define	YY_N3	350
#define	YY_S_MESH	351
#define	YY_LOAD	352
#define	YY_S_INSTANCE	353
#define	YY_GEOMETRY	354
#define	YY_S_MATRIX	355
#define	YY_PUSH	356
#define	YY_POP	357
#define	YY_ROTATE	358
#define	YY_TRANSLATE	359
#define	YY_SCALE	360
#define	YY_SET_IDENTITY	361
#define	YY_S_LIGHT	362
#define	YY_S_POINTLIGHT	363
#define	YY_S_SQUARELIGHT	364
#define	YY_S_SPHERELIGHT	365
#define	YY_WATTAGE	366
#define	YY_COLOR	367
#define	YY_NUM_SAMPLES	368
#define	YY_P1	369
#define	YY_P2	370
#define	YY_S_MULTIMATERIAL	371
#define	YY_S_MATERIAL	372
#define	YY_S_DIFFUSE	373
#define	YY_S_INDIRECT_DIFFUSE	374
#define	YY_S_PHONG	375
#define	YY_S_STONE	376
#define	YY_S_STONEBUMP	377
#define	YY_S_REFLECTIVE	378
#define	YY_S_REFRACTIVE	379
#define	YY_N	380
#define	YY_AMBIENT	381
#define	YY_COLOR_A	382
#define	YY_COLOR_B	383
#define	YY_AMPLITUDE	384
#define	YY_IOR	385
#define	YY_WEIGHT	386
#define	YY_S_SPHERE	387
#define	YY_CENTER	388
#define	YY_RADIUS	389
#define	YY_S_BLPATCH	390
#define	YY_P00	391
#define	YY_P01	392
#define	YY_P10	393
#define	YY_P11	394
#define	YY_U_CONSTRAINT	395
#define	YY_V_CONSTRAINT	396
#define	YY_EQUALS	397
#define	NEG	398

#line 1 "parser.y"

#ifdef WIN32
#pragma warning(disable:4244) // smaller type conversion warnings
#pragma warning(disable:4701) // variable used without being initialized
#ifdef NDEBUG
#pragma warning(disable:4702) // unreachable code in <vector> in release mode
#endif
#endif

#include "parser.h"
#include <stdlib.h>
#include <math.h>
#include <stack>
#include <queue>
#include <map>
#include <string>
#include <iostream>
#include "lexer.h"
#include "math/vector2.h"
#include "math/vector3.h"
#include "math/vector4.h"
#include "math/matrix4x4.h"
#include "object.h"
#include "multi_material.h"
#include "material.h"
#include "diffuse.h"
#include "indirect_diffuse.h"
#include "phong.h"
#include "stone.h"
#include "stone_bump.h"
#include "reflective.h"
#include "refractive.h"
#include "light.h"
#include "point_light.h"
#include "square_light.h"
#include "sphere_light.h"
#include "options.h"
#include "scene.h"
#include "camera.h"
#include "image.h"
#include "triangle_factory.h"
#include "sphere.h"
#include "bl_patch.h"

//#define YYDEBUG 1

#define yyerror(x) printf("Parser error #%d on line %d: %s\n", ++yyerr, yyline, x);

extern int yylex();
extern int yyline;
extern int yyerr;
extern FILE *yyin, *yyout;


// variables for adding objects, keeping track of variables
rawray::Camera*                         g_camera = NULL;
rawray::Scene*                          g_scene = NULL;
rawray::Image*                          g_image = NULL;

rawray::Object*                         g_obj = NULL;
rawray::Material*                       g_material = NULL;
rawray::MultiMaterial*					g_multimaterial = NULL;
rawray::Light*                          g_light = NULL;
rawray::TriangleMesh*                   g_mesh = NULL;

std::map<std::string, rawray::Object*>  g_objectMap;
std::stack<math::Matrix4x4>             g_matrixStack;


#line 71 "parser.y"
typedef union
{
    float			real;
    int				integer;
    char*			str;
    float			vec[4];
    bool			boolean;
    int				tritest;
} YYSTYPE;

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		532
#define	YYFLAG		-32768
#define	YYNTBASE	144

#define YYTRANSLATE(x) ((unsigned)(x) <= 398 ? yytranslate[x] : 216)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
   126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
   136,   137,   138,   139,   140,   141,   142,   143
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     1,     3,     5,     8,    10,    13,    15,    18,    20,
    23,    25,    28,    30,    33,    35,    38,    40,    43,    45,
    48,    50,    53,    55,    58,    60,    63,    65,    68,    70,
    73,    75,    78,    80,    83,    85,    88,    90,    93,    95,
    98,   103,   108,   113,   117,   121,   126,   128,   130,   132,
   134,   136,   139,   142,   145,   150,   153,   156,   159,   162,
   165,   168,   171,   174,   179,   182,   185,   188,   191,   194,
   197,   202,   205,   208,   211,   214,   217,   220,   223,   226,
   229,   230,   235,   236,   241,   242,   247,   250,   253,   256,
   259,   262,   265,   268,   271,   274,   277,   280,   283,   286,
   289,   292,   293,   298,   299,   304,   305,   310,   311,   316,
   317,   322,   323,   328,   329,   334,   335,   341,   344,   347,
   350,   353,   356,   359,   362,   365,   368,   371,   374,   377,
   380,   383,   386,   389,   391,   393,   395,   398,   401,   404,
   407,   410,   413,   416,   419,   422,   425,   428,   431,   434,
   437,   440,   443,   446,   449,   452,   455,   458,   461,   464,
   465,   471,   472,   479,   480,   486,   487,   494,   495,   501,
   502,   509,   515,   521,   527,   533,   537,   541,   549,   557,
   565,   573,   581,   589,   597,   605,   609,   613,   623,   633,
   643,   653,   663,   673,   683,   693,   703,   713,   723,   733,
   743,   753,   763,   773,   777,   781,   783,   785,   787,   791,
   795,   799,   803,   807,   810,   814,   816,   820,   824,   828,
   832,   836,   839,   843,   848,   853,   858,   863,   868,   873,
   878,   883,   888,   893,   898,   903,   908,   913,   918,   923,
   928,   933,   938,   943,   945,   947,   949,   951,   953,   956,
   958
};

static const short yyrhs[] = {    -1,
   145,     0,   164,     0,   145,   164,     0,   166,     0,   146,
   166,     0,   167,     0,   147,   167,     0,   172,     0,   148,
   172,     0,   173,     0,   149,   173,     0,   174,     0,   150,
   174,     0,   185,     0,   151,   185,     0,   186,     0,   152,
   186,     0,   187,     0,   153,   187,     0,   188,     0,   154,
   188,     0,   191,     0,   155,   191,     0,   192,     0,   156,
   192,     0,   190,     0,   157,   190,     0,   189,     0,   158,
   189,     0,   194,     0,   159,   194,     0,   195,     0,   160,
   195,     0,   196,     0,   161,   196,     0,   197,     0,   162,
   197,     0,   193,     0,   163,   193,     0,    40,    27,   146,
    28,     0,    69,    27,   147,    28,     0,    77,    27,   159,
    28,     0,   107,   168,    28,     0,   117,   175,    28,     0,
   100,    27,   163,    28,     0,   183,     0,   165,     0,   198,
     0,   201,     0,   204,     0,    49,   214,     0,    47,   214,
     0,    48,   214,     0,    41,   211,    39,   211,     0,    43,
   209,     0,    44,   209,     0,    45,   209,     0,    46,   211,
     0,    50,   211,     0,    52,   211,     0,    53,   211,     0,
    54,   211,     0,    51,   211,    39,   211,     0,    57,   215,
     0,    55,   211,     0,    56,   211,     0,    62,   210,     0,
    63,   210,     0,    64,     5,     0,    65,   211,    39,   211,
     0,    68,   210,     0,    42,   208,     0,    70,   208,     0,
    71,   208,     0,    72,   208,     0,    73,   210,     0,    74,
   210,     0,    75,   210,     0,    76,   210,     0,     0,   108,
    27,   169,   148,     0,     0,   109,    27,   170,   149,     0,
     0,   110,    27,   171,   150,     0,    42,   208,     0,   111,
   210,     0,   112,   209,     0,   113,   211,     0,    42,   208,
     0,   111,   210,     0,   112,   209,     0,   113,   211,     0,
   114,   208,     0,   115,   208,     0,    42,   208,     0,   111,
   210,     0,   112,   209,     0,   113,   211,     0,   134,   210,
     0,     0,   118,    27,   176,   152,     0,     0,   120,    27,
   177,   154,     0,     0,   121,    27,   178,   155,     0,     0,
   122,    27,   179,   156,     0,     0,   123,    27,   180,   158,
     0,     0,   124,    27,   181,   157,     0,     0,   119,    27,
   182,   153,     0,     0,   116,    27,   184,   151,    28,     0,
   126,   209,     0,   175,    28,     0,   112,   209,     0,   131,
   210,     0,   131,   210,     0,   112,   209,     0,   125,   210,
     0,   131,   210,     0,   131,   210,     0,   130,   210,     0,
   131,   210,     0,   127,   209,     0,   128,   209,     0,   131,
   210,     0,   129,   210,     0,   131,   210,     0,   101,     0,
   102,     0,   106,     0,   104,   208,     0,   105,   208,     0,
   103,   209,     0,    78,   211,     0,    79,   210,     0,    80,
   210,     0,    81,   210,     0,    82,   210,     0,    83,   210,
     0,    84,   210,     0,    85,   210,     0,    86,   210,     0,
    87,   211,     0,    88,   208,     0,    97,     5,     0,   133,
   208,     0,   134,   210,     0,   136,   208,     0,   137,   208,
     0,   138,   208,     0,   139,   208,     0,   140,   207,     0,
   141,   207,     0,     0,    96,    27,   199,   160,    28,     0,
     0,    96,     5,    27,   200,   160,    28,     0,     0,   132,
    27,   202,   161,    28,     0,     0,   132,     5,    27,   203,
   161,    28,     0,     0,   135,    27,   205,   162,    28,     0,
     0,   135,     5,    27,   206,   162,    28,     0,    23,   210,
    31,   210,    24,     0,    23,   210,    31,   211,    24,     0,
    23,   211,    31,   210,    24,     0,    23,   211,    31,   211,
    24,     0,    23,   210,    24,     0,    23,   211,    24,     0,
    23,   210,    31,   210,    31,   210,    24,     0,    23,   210,
    31,   210,    31,   211,    24,     0,    23,   210,    31,   211,
    31,   210,    24,     0,    23,   210,    31,   211,    31,   211,
    24,     0,    23,   211,    31,   210,    31,   210,    24,     0,
    23,   211,    31,   210,    31,   211,    24,     0,    23,   211,
    31,   211,    31,   210,    24,     0,    23,   211,    31,   211,
    31,   211,    24,     0,    23,   210,    24,     0,    23,   211,
    24,     0,    23,   210,    31,   210,    31,   210,    31,   210,
    24,     0,    23,   210,    31,   210,    31,   210,    31,   211,
    24,     0,    23,   210,    31,   210,    31,   211,    31,   210,
    24,     0,    23,   210,    31,   210,    31,   211,    31,   211,
    24,     0,    23,   210,    31,   211,    31,   210,    31,   210,
    24,     0,    23,   210,    31,   211,    31,   210,    31,   211,
    24,     0,    23,   210,    31,   211,    31,   211,    31,   210,
    24,     0,    23,   210,    31,   211,    31,   211,    31,   211,
    24,     0,    23,   211,    31,   210,    31,   210,    31,   210,
    24,     0,    23,   211,    31,   210,    31,   210,    31,   211,
    24,     0,    23,   211,    31,   210,    31,   211,    31,   210,
    24,     0,    23,   211,    31,   210,    31,   211,    31,   211,
    24,     0,    23,   211,    31,   211,    31,   210,    31,   210,
    24,     0,    23,   211,    31,   211,    31,   210,    31,   211,
    24,     0,    23,   211,    31,   211,    31,   211,    31,   210,
    24,     0,    23,   211,    31,   211,    31,   211,    31,   211,
    24,     0,    23,   210,    24,     0,    23,   211,    24,     0,
     3,     0,   212,     0,   213,     0,   210,    33,   210,     0,
   210,    34,   210,     0,   210,    36,   210,     0,   210,    35,
   210,     0,   210,    37,   210,     0,    34,   210,     0,    29,
   210,    30,     0,     4,     0,   211,    33,   211,     0,   211,
    34,   211,     0,   211,    36,   211,     0,   211,    35,   211,
     0,   211,    37,   211,     0,    34,   211,     0,    29,   211,
    30,     0,    11,    29,   210,    30,     0,    11,    29,   211,
    30,     0,    10,    29,   210,    30,     0,    10,    29,   211,
    30,     0,    12,    29,   210,    30,     0,    12,    29,   211,
    30,     0,    14,    29,   210,    30,     0,    14,    29,   211,
    30,     0,    13,    29,   210,    30,     0,    13,    29,   211,
    30,     0,    15,    29,   210,    30,     0,    15,    29,   211,
    30,     0,    17,    29,   210,    30,     0,    17,    29,   211,
    30,     0,    18,    29,   210,    30,     0,    18,    29,   211,
    30,     0,    19,    29,   210,    30,     0,    19,    29,   211,
    30,     0,    20,    29,   210,    30,     0,    20,    29,   211,
    30,     0,    21,     0,    22,     0,     8,     0,     9,     0,
    58,     0,    58,    59,     0,    60,     0,    61,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   254,   254,   255,   255,   259,   259,   260,   260,   261,   261,
   262,   262,   263,   263,   264,   264,   265,   265,   266,   266,
   267,   267,   268,   268,   269,   269,   270,   270,   271,   271,
   272,   272,   273,   273,   274,   274,   275,   275,   276,   276,
   280,   282,   283,   284,   285,   286,   287,   288,   291,   293,
   294,   297,   299,   300,   301,   302,   303,   304,   305,   306,
   307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
   317,   318,   321,   323,   324,   325,   326,   327,   328,   329,
   332,   339,   339,   345,   345,   351,   353,   355,   356,   357,
   360,   362,   363,   364,   365,   366,   369,   371,   372,   373,
   374,   377,   384,   384,   390,   390,   396,   396,   402,   402,
   408,   408,   414,   414,   420,   422,   428,   436,   438,   441,
   443,   446,   450,   452,   453,   456,   460,   462,   465,   467,
   468,   471,   473,   477,   479,   480,   481,   482,   483,   486,
   488,   489,   490,   491,   492,   493,   494,   495,   496,   497,
   500,   517,   519,   522,   524,   525,   526,   527,   528,   530,
   535,   545,   554,   566,   571,   576,   583,   590,   595,   600,
   607,   614,   616,   617,   618,   619,   620,   623,   625,   626,
   627,   628,   629,   630,   631,   632,   633,   636,   638,   639,
   640,   641,   642,   643,   644,   645,   646,   647,   648,   649,
   650,   651,   652,   653,   654,   656,   658,   659,   660,   661,
   662,   663,   664,   665,   666,   669,   671,   672,   673,   674,
   675,   676,   677,   680,   682,   683,   684,   685,   686,   687,
   688,   689,   690,   691,   692,   693,   694,   695,   696,   697,
   698,   699,   700,   703,   705,   708,   710,   713,   715,   716,
   717
};

static const char * const yytname[] = {   "$","error","$undefined.","YY_REAL",
"YY_PARSE_INT","YY_STRING","YY_PARSE_TRUE","YY_PARSE_FALSE","YY_TRUE","YY_FALSE",
"YY_MATH_COS","YY_MATH_SIN","YY_MATH_TAN","YY_MATH_ACOS","YY_MATH_ASIN","YY_MATH_ATAN",
"YY_MATH_ATAN2","YY_MATH_LN","YY_MATH_LOG","YY_MATH_EXP","YY_MATH_SQRT","YY_MATH_E",
"YY_MATH_PI","YY_LT","YY_GT","YY_LBOX","YY_RBOX","YY_LCURLY","YY_RCURLY","YY_LPAREN",
"YY_RPAREN","YY_COMMA","YY_EQUAL","YY_PLUS","YY_MINUS","YY_DIV","YY_MUL","YY_CARAT",
"YY_BSLASH","YY_X","YY_S_GLOBAL","YY_SIZE","YY_POS","YY_IMG_BGCOLOR","YY_IMG_FGCOLOR",
"YY_GL_BGCOLOR","YY_GL_SPHERE_SECTIONS","YY_GL_RENDER_LIGHTS","YY_GL_RENDER_BBOX",
"YY_HEADLESS","YY_NUM_THREADS","YY_THREAD_JOB_SIZE","YY_RENDER_HANDLER_SLEEP",
"YY_RENDER_THREAD_SLEEP","YY_RENDER_SPINLOCK_SLEEP","YY_GAUSSIAN_BLUR_MAX","YY_GAUSSIAN_BLUR_SIGMA",
"YY_TRIANGLE_TEST","YY_BARYCENTRIC","YY_PROJECTION","YY_PLUCKER","YY_MOLLER",
"YY_BOX_COST","YY_OBJECT_COST","YY_PFM","YY_ANTI_ALIAS","YY_MAX_DIFFUSE_BOUNCE",
"YY_MAX_IOR_BOUNCE","YY_HDR_BLOOM_POWER","YY_S_CAMERA","YY_DIR","YY_LOOKAT",
"YY_UP","YY_FOV","YY_ASPECT","YY_MIN_DRAW","YY_MAX_DRAW","YY_S_P0","YY_SPIRAL_NUM_SPHERES",
"YY_SPIRAL_RADIUS","YY_LORENZ_DT","YY_LORENZ_MIN_DISTANCE","YY_LORENZ_MAX_DISTANCE",
"YY_LORENZ_SIGMA","YY_LORENZ_RHO","YY_LORENZ_BETA","YY_LORENZ_RADIUS","YY_LORENZ_NUM_SPHERES",
"YY_LORENZ_START","YY_S_TRIANGLE","YY_V1","YY_V2","YY_V3","YY_N1","YY_N2","YY_N3",
"YY_S_MESH","YY_LOAD","YY_S_INSTANCE","YY_GEOMETRY","YY_S_MATRIX","YY_PUSH",
"YY_POP","YY_ROTATE","YY_TRANSLATE","YY_SCALE","YY_SET_IDENTITY","YY_S_LIGHT",
"YY_S_POINTLIGHT","YY_S_SQUARELIGHT","YY_S_SPHERELIGHT","YY_WATTAGE","YY_COLOR",
"YY_NUM_SAMPLES","YY_P1","YY_P2","YY_S_MULTIMATERIAL","YY_S_MATERIAL","YY_S_DIFFUSE",
"YY_S_INDIRECT_DIFFUSE","YY_S_PHONG","YY_S_STONE","YY_S_STONEBUMP","YY_S_REFLECTIVE",
"YY_S_REFRACTIVE","YY_N","YY_AMBIENT","YY_COLOR_A","YY_COLOR_B","YY_AMPLITUDE",
"YY_IOR","YY_WEIGHT","YY_S_SPHERE","YY_CENTER","YY_RADIUS","YY_S_BLPATCH","YY_P00",
"YY_P01","YY_P10","YY_P11","YY_U_CONSTRAINT","YY_V_CONSTRAINT","YY_EQUALS","NEG",
"input","option_blocks","global_stuff","camera_stuff","pointlight_stuff","squarelight_stuff",
"spherelight_stuff","multimaterial_stuff","diffuse_stuff","indirectdiffuse_stuff",
"phong_stuff","stone_stuff","stonebump_stuff","refractive_stuff","reflective_stuff",
"p0_stuff","mesh_stuff","sphere_stuff","blpatch_stuff","matrix_stuff","block",
"object_type","global_option","camera_option","light_type","@1","@2","@3","pointlight_option",
"squarelight_option","spherelight_option","material_type","@4","@5","@6","@7",
"@8","@9","@10","multimaterial_type","@11","multimaterial_option","diffuse_option",
"indirectdiffuse_option","phong_option","reflective_option","refractive_option",
"stone_option","stonebump_option","matrix_option","p0_option","mesh_option",
"sphere_option","blpatch_option","object_mesh","@12","@13","object_sphere","@14",
"@15","object_blpatch","@16","@17","vector2","vector3","vector4","rExp","iExp",
"fExp","constantExp","boolExp","triTestExp",""
};
#endif

static const short yyr1[] = {     0,
   144,   144,   145,   145,   146,   146,   147,   147,   148,   148,
   149,   149,   150,   150,   151,   151,   152,   152,   153,   153,
   154,   154,   155,   155,   156,   156,   157,   157,   158,   158,
   159,   159,   160,   160,   161,   161,   162,   162,   163,   163,
   164,   164,   164,   164,   164,   164,   164,   164,   165,   165,
   165,   166,   166,   166,   166,   166,   166,   166,   166,   166,
   166,   166,   166,   166,   166,   166,   166,   166,   166,   166,
   166,   166,   167,   167,   167,   167,   167,   167,   167,   167,
   169,   168,   170,   168,   171,   168,   172,   172,   172,   172,
   173,   173,   173,   173,   173,   173,   174,   174,   174,   174,
   174,   176,   175,   177,   175,   178,   175,   179,   175,   180,
   175,   181,   175,   182,   175,   184,   183,   185,   185,   186,
   186,   187,   188,   188,   188,   189,   190,   190,   191,   191,
   191,   192,   192,   193,   193,   193,   193,   193,   193,   194,
   194,   194,   194,   194,   194,   194,   194,   194,   194,   194,
   195,   196,   196,   197,   197,   197,   197,   197,   197,   199,
   198,   200,   198,   202,   201,   203,   201,   205,   204,   206,
   204,   207,   207,   207,   207,   207,   207,   208,   208,   208,
   208,   208,   208,   208,   208,   208,   208,   209,   209,   209,
   209,   209,   209,   209,   209,   209,   209,   209,   209,   209,
   209,   209,   209,   209,   209,   210,   210,   210,   210,   210,
   210,   210,   210,   210,   210,   211,   211,   211,   211,   211,
   211,   211,   211,   212,   212,   212,   212,   212,   212,   212,
   212,   212,   212,   212,   212,   212,   212,   212,   212,   212,
   212,   212,   212,   213,   213,   214,   214,   215,   215,   215,
   215
};

static const short yyr2[] = {     0,
     0,     1,     1,     2,     1,     2,     1,     2,     1,     2,
     1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
     1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
     1,     2,     1,     2,     1,     2,     1,     2,     1,     2,
     4,     4,     4,     3,     3,     4,     1,     1,     1,     1,
     1,     2,     2,     2,     4,     2,     2,     2,     2,     2,
     2,     2,     2,     4,     2,     2,     2,     2,     2,     2,
     4,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     0,     4,     0,     4,     0,     4,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     0,     4,     0,     4,     0,     4,     0,     4,     0,
     4,     0,     4,     0,     4,     0,     5,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     1,     1,     1,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     0,
     5,     0,     6,     0,     5,     0,     6,     0,     5,     0,
     6,     5,     5,     5,     5,     3,     3,     7,     7,     7,
     7,     7,     7,     7,     7,     3,     3,     9,     9,     9,
     9,     9,     9,     9,     9,     9,     9,     9,     9,     9,
     9,     9,     9,     3,     3,     1,     1,     1,     3,     3,
     3,     3,     3,     2,     3,     1,     3,     3,     3,     3,
     3,     2,     3,     4,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     1,     1,     1,     1,     1,     2,     1,
     1
};

static const short yydefact[] = {     1,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     2,     3,    48,    47,    49,    50,    51,     0,     0,     0,
     0,   160,     0,     0,     0,     0,     0,   116,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   164,     0,   168,
     4,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     5,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     7,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,    31,   162,     0,   134,
   135,     0,     0,     0,   136,     0,    39,    81,    83,    85,
    44,     0,   102,   114,   104,   106,   108,   110,   112,    45,
   166,     0,   170,     0,   216,     0,     0,     0,     0,    56,
    57,    58,    59,   246,   247,    53,    54,    52,    60,     0,
    61,    62,    63,    66,    67,   248,   250,   251,    65,   206,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   244,   245,     0,     0,    68,   207,   208,    69,    70,     0,
    72,    41,     6,     0,    73,    74,    75,    76,    77,    78,
    79,    80,    42,     8,   140,   141,   142,   143,   144,   145,
   146,   147,   148,   149,   150,    43,    32,     0,     0,     0,
    33,   139,   137,   138,    46,    40,     0,     0,     0,     0,
     0,     0,    15,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    35,     0,     0,     0,     0,     0,
     0,     0,     0,    37,     0,   222,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   249,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   214,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   151,
   161,    34,     0,     0,     0,     0,    82,     9,     0,     0,
     0,     0,     0,     0,    84,    11,     0,     0,     0,     0,
     0,    86,    13,   118,   117,    16,   119,     0,     0,   103,
    17,     0,   115,    19,     0,     0,     0,   105,    21,     0,
     0,     0,   107,    23,     0,     0,   109,    25,     0,   111,
    29,     0,     0,   113,    27,     0,   152,   153,   165,    36,
     0,   154,   155,   156,   157,     0,   158,   159,   169,    38,
   223,   217,   218,   220,   219,   221,    55,   204,     0,   205,
     0,    64,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   215,   209,   210,   212,   211,   213,    71,   186,
     0,   187,     0,   163,    87,    88,    89,    90,    10,    91,
    92,    93,    94,    95,    96,    12,    97,    98,    99,   100,
   101,    14,   120,   121,    18,   122,    20,   123,   124,   125,
    22,   129,   130,   131,    24,   132,   133,    26,   126,    30,
   127,   128,    28,   167,   171,     0,     0,     0,     0,     0,
     0,   226,   227,   224,   225,   228,   229,   232,   233,   230,
   231,   234,   235,   236,   237,   238,   239,   240,   241,   242,
   243,     0,     0,     0,     0,   176,     0,   177,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   172,   173,   174,
   175,     0,     0,     0,     0,     0,     0,     0,     0,   178,
   179,   180,   181,   182,   183,   184,   185,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   188,   189,   190,   191,   192,   193,   194,
   195,   196,   197,   198,   199,   200,   201,   202,   203,     0,
     0,     0
};

static const short yydefgoto[] = {   530,
    11,    63,    73,   267,   275,   282,   201,   290,   293,   298,
   303,   307,   314,   310,    86,   190,   214,   223,    96,    12,
    13,    64,    74,    27,   197,   198,   199,   268,   276,   283,
   202,   204,   206,   207,   208,   209,   210,   205,    14,   102,
   203,   291,   294,   299,   311,   315,   304,   308,    97,    87,
   191,   215,   224,    15,    89,   188,    16,   112,   211,    17,
   114,   216,   327,   165,   120,   249,   225,   156,   157,   126,
   139
};

static const short yypact[] = {   -34,
    -7,    -4,    28,    17,    30,    41,    45,   824,    20,    31,
   -34,-32768,-32768,-32768,-32768,-32768,-32768,   513,    94,   677,
    47,-32768,   316,    77,   117,   144,   -11,-32768,   155,   164,
   169,   189,   201,   208,   209,    10,   212,-32768,   213,-32768,
-32768,    12,    38,    38,    38,    12,    61,    61,    61,    12,
    12,    12,    12,    12,    12,    12,   123,   521,   521,    59,
    12,   521,   308,-32768,    98,    98,    98,    98,   521,   521,
   521,   521,   268,-32768,    12,   521,   521,   521,   521,   521,
   521,   521,   521,    12,    98,    74,-32768,-32768,   145,-32768,
-32768,    38,    98,    98,-32768,    37,-32768,-32768,-32768,-32768,
-32768,   648,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   -84,-32768,   931,-32768,    12,    12,   357,   496,-32768,
-32768,-32768,   176,-32768,-32768,-32768,-32768,-32768,   176,   512,
   176,   176,   176,   176,   176,   182,-32768,-32768,-32768,-32768,
   215,   216,   217,   218,   230,   237,   245,   246,   247,   248,
-32768,-32768,   521,   521,   453,-32768,-32768,   453,-32768,   916,
   453,-32768,-32768,   496,-32768,-32768,-32768,-32768,   453,   453,
   453,   453,-32768,-32768,   176,   453,   453,   453,   453,   453,
   453,   453,   453,   176,-32768,-32768,-32768,   145,   275,   -13,
-32768,-32768,-32768,-32768,-32768,-32768,    34,   -18,    14,    38,
    11,   253,-32768,   -83,   151,   -91,   -68,   -99,   152,    63,
   -84,    98,   521,   -26,-32768,   931,    98,    98,    98,    98,
   262,   262,   -27,-32768,   290,   251,    12,    12,    12,    12,
    12,    12,   496,   496,   184,   234,    12,-32768,   496,   496,
   496,   496,   496,   496,   496,   496,   496,   496,   743,   252,
   521,   521,   521,   521,   521,    12,   350,   364,     3,-32768,
-32768,-32768,    98,   521,    38,    12,    34,-32768,    98,   521,
    38,    12,    98,    98,   -18,-32768,    98,   521,    38,    12,
   521,    14,-32768,-32768,-32768,-32768,-32768,    38,   521,   -83,
-32768,   521,   151,-32768,    38,   521,   521,   -91,-32768,    38,
    38,   521,   -68,-32768,   521,   521,   -99,-32768,   521,   152,
-32768,   521,   521,    63,-32768,   -10,-32768,   453,-32768,-32768,
   -21,-32768,-32768,-32768,-32768,   496,-32768,-32768,-32768,-32768,
-32768,   139,   139,   251,   251,   251,   176,-32768,   496,-32768,
   496,   176,   751,   759,   767,   775,   783,   791,   799,   807,
   815,   823,   831,   839,   847,   855,   863,   871,   879,   887,
   895,   903,-32768,   190,   190,   252,   252,   252,   176,-32768,
   496,-32768,   496,-32768,-32768,   453,-32768,   176,-32768,-32768,
   453,-32768,   176,-32768,-32768,-32768,-32768,   453,-32768,   176,
   453,-32768,-32768,   453,-32768,   453,-32768,-32768,   453,   453,
-32768,-32768,-32768,   453,-32768,   453,   453,-32768,   453,-32768,
   453,   453,-32768,-32768,-32768,   392,   400,   923,   930,   937,
   944,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   951,   958,   965,   972,-32768,   496,-32768,   496,   496,
   496,   496,   496,   496,   496,   496,   496,   415,   443,   448,
   549,   979,   986,   993,  1000,  1007,  1014,  1021,  1028,   555,
   563,   569,   577,   583,   591,   597,   605,-32768,-32768,-32768,
-32768,   496,   496,   496,   496,   496,   496,   496,   496,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   611,   619,   625,
   633,   639,   647,   653,   661,   667,   675,   681,   689,   695,
   703,   709,   717,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   291,
   292,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,   105,    83,    84,-32768,   293,
-32768,   240,   236,-32768,-32768,-32768,-32768,    46,    42,    48,
   304,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   115,    29,    35,    36,    22,    19,    43,    40,   241,   259,
  -153,  -211,  -218,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   146,   -40,     7,     9,   -42,-32768,-32768,   183,
-32768
};


#define	YYLAST		1072


static const short yytable[] = {   118,
   329,   319,   320,   123,   330,     1,   415,   129,   130,   131,
   132,   133,   134,   135,   261,   115,   101,   414,   160,    18,
   295,    21,    19,   269,    37,   166,   167,   168,   288,   305,
   374,   306,   175,   296,     2,    39,   262,   110,   285,   297,
   116,   184,     3,    22,   185,   117,    38,   289,   212,   213,
   121,   122,   193,   194,    20,   277,    23,    40,   300,   301,
   119,     4,   302,   159,   195,     5,   155,   158,   124,   125,
   161,    28,     6,    88,   226,   263,   236,   169,   170,   171,
   172,     7,     8,   189,   176,   177,   178,   179,   180,   181,
   182,   183,   270,   271,   272,   273,   274,     9,   192,   189,
    10,   186,   330,    98,   320,   262,   212,   213,   217,   218,
   219,   220,   221,   222,   217,   218,   219,   220,   221,   222,
   164,   258,   212,   213,   278,   279,   280,   235,    29,    30,
    31,    32,    33,    34,    35,    65,   200,    90,    91,    92,
    93,    94,    95,    99,   264,   265,   266,   281,    24,    25,
    26,    75,    76,    77,    78,    79,    80,    81,    82,    83,
    84,    85,   250,    66,    67,    68,    69,    70,    71,    72,
   100,   317,   257,   229,   230,   231,   322,   323,   324,   325,
   136,   103,   137,   138,   332,   333,   334,   335,   336,   337,
   104,   226,   312,   313,   342,   105,   344,   346,   348,   350,
   352,   354,   356,   358,   360,   362,   284,   338,   227,   228,
   229,   230,   231,   369,   339,   106,   251,   252,   253,   254,
   255,   318,   375,   378,   253,   254,   255,   107,   380,   383,
   127,   128,   384,   385,   108,   109,   387,   390,   111,   113,
   238,   189,   250,   239,   240,   241,   242,   343,   345,   347,
   349,   351,   353,   355,   357,   359,   361,   340,   243,   364,
   365,   366,   367,   368,   341,   244,   227,   228,   229,   230,
   231,   377,   376,   245,   246,   247,   248,   382,   381,   260,
   287,   292,   309,   417,   326,   389,   388,   231,   255,   391,
   531,   532,   259,   316,   393,   173,   419,   394,   421,   321,
   396,   398,   163,    41,   399,   400,   402,   403,   174,    65,
   404,    36,   379,   406,   407,   286,   386,   409,   395,   331,
   411,   412,   227,   228,   229,   230,   231,   397,   443,   392,
   445,   410,   413,   401,   416,   162,   196,    66,    67,    68,
    69,    70,    71,    72,   187,   405,   408,   418,    42,   420,
    43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,     0,     0,   328,     0,    58,
    59,    60,    61,   370,     0,    62,     0,     0,     0,   442,
   371,   444,   251,   252,   253,   254,   255,   372,     0,   227,
   228,   229,   230,   231,   373,   232,   227,   228,   229,   230,
   231,     0,     0,     0,   459,     0,   461,   463,   465,   467,
   469,   471,   473,   475,   477,   446,    90,    91,    92,    93,
    94,    95,   447,   448,   251,   252,   253,   254,   255,     0,
   449,     0,   227,   228,   229,   230,   231,     0,   478,   499,
   501,   503,   505,   507,   509,   511,   513,   251,   252,   253,
   254,   255,     0,     0,     0,   458,     0,   460,   462,   464,
   466,   468,   470,   472,   474,   476,   479,     0,     0,     0,
     0,   480,     0,     0,     0,   227,   228,   229,   230,   231,
   251,   252,   253,   254,   255,   251,   252,   253,   254,   255,
   498,   500,   502,   504,   506,   508,   510,   512,   140,   115,
     0,     0,     0,     0,     0,   141,   142,   143,   144,   145,
   146,     0,   147,   148,   149,   150,   151,   152,     0,     0,
     0,     0,     0,   140,   233,     0,     0,     0,     0,   234,
   141,   142,   143,   144,   145,   146,     0,   147,   148,   149,
   150,   151,   152,     0,   227,   228,   229,   230,   231,   153,
   237,     0,     0,    42,   154,    43,    44,    45,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
     0,     0,   481,     0,    58,    59,    60,    61,   490,     0,
    62,   227,   228,   229,   230,   231,   491,   251,   252,   253,
   254,   255,   492,     0,     0,   227,   228,   229,   230,   231,
   493,   251,   252,   253,   254,   255,   494,     0,     0,   227,
   228,   229,   230,   231,   495,   251,   252,   253,   254,   255,
   496,     0,     0,   227,   228,   229,   230,   231,   497,   251,
   252,   253,   254,   255,   514,     0,     0,   227,   228,   229,
   230,   231,   515,   251,   252,   253,   254,   255,   516,     0,
     0,   227,   228,   229,   230,   231,   517,   251,   252,   253,
   254,   255,   518,     0,     0,   227,   228,   229,   230,   231,
   519,   251,   252,   253,   254,   255,   520,     0,     0,   227,
   228,   229,   230,   231,   521,   251,   252,   253,   254,   255,
   522,     0,     0,   227,   228,   229,   230,   231,   523,   251,
   252,   253,   254,   255,   524,     0,     0,   227,   228,   229,
   230,   231,   525,   251,   252,   253,   254,   255,   526,     0,
     0,   227,   228,   229,   230,   231,   527,   251,   252,   253,
   254,   255,   528,     0,     0,   227,   228,   229,   230,   231,
   529,   251,   252,   253,   254,   255,     0,     0,     0,   227,
   228,   229,   230,   231,    75,    76,    77,    78,    79,    80,
    81,    82,    83,    84,    85,    29,    30,    31,    32,    33,
    34,    35,   363,   200,     0,   251,   252,   253,   254,   255,
   422,     0,     0,   251,   252,   253,   254,   255,   423,     0,
     0,   227,   228,   229,   230,   231,   424,     0,     0,   251,
   252,   253,   254,   255,   425,     0,     0,   227,   228,   229,
   230,   231,   426,     0,     0,   251,   252,   253,   254,   255,
   427,     0,     0,   227,   228,   229,   230,   231,   428,     0,
     0,   251,   252,   253,   254,   255,   429,     0,     0,   227,
   228,   229,   230,   231,   430,     0,     0,   251,   252,   253,
   254,   255,   431,     0,     0,   227,   228,   229,   230,   231,
   432,     0,     0,   251,   252,   253,   254,   255,   433,     0,
     0,   227,   228,   229,   230,   231,   434,     0,     0,   251,
   252,   253,   254,   255,   435,     0,     0,   227,   228,   229,
   230,   231,   436,     0,     0,   251,   252,   253,   254,   255,
   437,     0,     0,   227,   228,   229,   230,   231,   438,     0,
     0,   251,   252,   253,   254,   255,   439,     0,     0,   227,
   228,   229,   230,   231,   440,     0,     0,   251,   252,   253,
   254,   255,   441,     0,     0,   227,   228,   229,   230,   231,
     0,    29,    30,    31,    32,    33,    34,    35,   227,   228,
   229,   230,   231,   450,   256,   251,   252,   253,   254,   255,
   451,     0,   227,   228,   229,   230,   231,   452,     0,   251,
   252,   253,   254,   255,   453,     0,   227,   228,   229,   230,
   231,   454,     0,   251,   252,   253,   254,   255,   455,     0,
   227,   228,   229,   230,   231,   456,     0,   251,   252,   253,
   254,   255,   457,     0,   227,   228,   229,   230,   231,   482,
     0,   251,   252,   253,   254,   255,   483,     0,   227,   228,
   229,   230,   231,   484,     0,   251,   252,   253,   254,   255,
   485,     0,   227,   228,   229,   230,   231,   486,     0,   251,
   252,   253,   254,   255,   487,     0,   227,   228,   229,   230,
   231,   488,     0,   251,   252,   253,   254,   255,   489,     0,
   227,   228,   229,   230,   231,     0,   217,   218,   219,   220,
   221,   222
};

static const short yycheck[] = {    42,
    28,    28,   214,    46,   223,    40,    28,    50,    51,    52,
    53,    54,    55,    56,    28,     4,    28,    28,    61,    27,
   112,     5,    27,    42,     5,    66,    67,    68,   112,   129,
    28,   131,    75,   125,    69,     5,   190,    28,    28,   131,
    29,    84,    77,    27,    85,    34,    27,   131,   133,   134,
    44,    45,    93,    94,    27,    42,    27,    27,   127,   128,
    23,    96,   131,     5,    28,   100,    58,    59,     8,     9,
    62,    27,   107,    27,   117,    42,   119,    69,    70,    71,
    72,   116,   117,    97,    76,    77,    78,    79,    80,    81,
    82,    83,   111,   112,   113,   114,   115,   132,    92,    97,
   135,    28,   321,    27,   316,   259,   133,   134,   136,   137,
   138,   139,   140,   141,   136,   137,   138,   139,   140,   141,
    23,   164,   133,   134,   111,   112,   113,   119,   118,   119,
   120,   121,   122,   123,   124,    42,   126,   101,   102,   103,
   104,   105,   106,    27,   111,   112,   113,   134,   108,   109,
   110,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,   154,    70,    71,    72,    73,    74,    75,    76,
    27,   212,   164,    35,    36,    37,   217,   218,   219,   220,
    58,    27,    60,    61,   227,   228,   229,   230,   231,   232,
    27,   234,   130,   131,   237,    27,   239,   240,   241,   242,
   243,   244,   245,   246,   247,   248,   200,    24,    33,    34,
    35,    36,    37,   256,    31,    27,    33,    34,    35,    36,
    37,   213,   263,   266,    35,    36,    37,    27,   269,   272,
    48,    49,   273,   274,    27,    27,   277,   280,    27,    27,
    59,    97,   234,    29,    29,    29,    29,   239,   240,   241,
   242,   243,   244,   245,   246,   247,   248,    24,    29,   251,
   252,   253,   254,   255,    31,    29,    33,    34,    35,    36,
    37,   265,   264,    29,    29,    29,    29,   271,   270,     5,
    28,   131,   131,   326,    23,   279,   278,    37,    37,   281,
     0,     0,   188,   211,   288,    28,   339,   289,   341,   216,
   292,   295,    63,    11,   296,   297,   300,   301,    73,    42,
   302,     8,   267,   305,   306,   201,   275,   309,   290,    30,
   312,   313,    33,    34,    35,    36,    37,   293,   371,   282,
   373,   310,   314,   298,   326,    28,    96,    70,    71,    72,
    73,    74,    75,    76,    86,   303,   307,   339,    41,   341,
    43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
    53,    54,    55,    56,    57,    -1,    -1,   222,    -1,    62,
    63,    64,    65,    24,    -1,    68,    -1,    -1,    -1,   371,
    31,   373,    33,    34,    35,    36,    37,    24,    -1,    33,
    34,    35,    36,    37,    31,    39,    33,    34,    35,    36,
    37,    -1,    -1,    -1,   447,    -1,   449,   450,   451,   452,
   453,   454,   455,   456,   457,    24,   101,   102,   103,   104,
   105,   106,    31,    24,    33,    34,    35,    36,    37,    -1,
    31,    -1,    33,    34,    35,    36,    37,    -1,    24,   482,
   483,   484,   485,   486,   487,   488,   489,    33,    34,    35,
    36,    37,    -1,    -1,    -1,   447,    -1,   449,   450,   451,
   452,   453,   454,   455,   456,   457,    24,    -1,    -1,    -1,
    -1,    24,    -1,    -1,    -1,    33,    34,    35,    36,    37,
    33,    34,    35,    36,    37,    33,    34,    35,    36,    37,
   482,   483,   484,   485,   486,   487,   488,   489,     3,     4,
    -1,    -1,    -1,    -1,    -1,    10,    11,    12,    13,    14,
    15,    -1,    17,    18,    19,    20,    21,    22,    -1,    -1,
    -1,    -1,    -1,     3,    29,    -1,    -1,    -1,    -1,    34,
    10,    11,    12,    13,    14,    15,    -1,    17,    18,    19,
    20,    21,    22,    -1,    33,    34,    35,    36,    37,    29,
    39,    -1,    -1,    41,    34,    43,    44,    45,    46,    47,
    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
    -1,    -1,    24,    -1,    62,    63,    64,    65,    24,    -1,
    68,    33,    34,    35,    36,    37,    24,    33,    34,    35,
    36,    37,    24,    -1,    -1,    33,    34,    35,    36,    37,
    24,    33,    34,    35,    36,    37,    24,    -1,    -1,    33,
    34,    35,    36,    37,    24,    33,    34,    35,    36,    37,
    24,    -1,    -1,    33,    34,    35,    36,    37,    24,    33,
    34,    35,    36,    37,    24,    -1,    -1,    33,    34,    35,
    36,    37,    24,    33,    34,    35,    36,    37,    24,    -1,
    -1,    33,    34,    35,    36,    37,    24,    33,    34,    35,
    36,    37,    24,    -1,    -1,    33,    34,    35,    36,    37,
    24,    33,    34,    35,    36,    37,    24,    -1,    -1,    33,
    34,    35,    36,    37,    24,    33,    34,    35,    36,    37,
    24,    -1,    -1,    33,    34,    35,    36,    37,    24,    33,
    34,    35,    36,    37,    24,    -1,    -1,    33,    34,    35,
    36,    37,    24,    33,    34,    35,    36,    37,    24,    -1,
    -1,    33,    34,    35,    36,    37,    24,    33,    34,    35,
    36,    37,    24,    -1,    -1,    33,    34,    35,    36,    37,
    24,    33,    34,    35,    36,    37,    -1,    -1,    -1,    33,
    34,    35,    36,    37,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,   118,   119,   120,   121,   122,
   123,   124,    30,   126,    -1,    33,    34,    35,    36,    37,
    30,    -1,    -1,    33,    34,    35,    36,    37,    30,    -1,
    -1,    33,    34,    35,    36,    37,    30,    -1,    -1,    33,
    34,    35,    36,    37,    30,    -1,    -1,    33,    34,    35,
    36,    37,    30,    -1,    -1,    33,    34,    35,    36,    37,
    30,    -1,    -1,    33,    34,    35,    36,    37,    30,    -1,
    -1,    33,    34,    35,    36,    37,    30,    -1,    -1,    33,
    34,    35,    36,    37,    30,    -1,    -1,    33,    34,    35,
    36,    37,    30,    -1,    -1,    33,    34,    35,    36,    37,
    30,    -1,    -1,    33,    34,    35,    36,    37,    30,    -1,
    -1,    33,    34,    35,    36,    37,    30,    -1,    -1,    33,
    34,    35,    36,    37,    30,    -1,    -1,    33,    34,    35,
    36,    37,    30,    -1,    -1,    33,    34,    35,    36,    37,
    30,    -1,    -1,    33,    34,    35,    36,    37,    30,    -1,
    -1,    33,    34,    35,    36,    37,    30,    -1,    -1,    33,
    34,    35,    36,    37,    30,    -1,    -1,    33,    34,    35,
    36,    37,    30,    -1,    -1,    33,    34,    35,    36,    37,
    -1,   118,   119,   120,   121,   122,   123,   124,    33,    34,
    35,    36,    37,    31,    39,    33,    34,    35,    36,    37,
    31,    -1,    33,    34,    35,    36,    37,    31,    -1,    33,
    34,    35,    36,    37,    31,    -1,    33,    34,    35,    36,
    37,    31,    -1,    33,    34,    35,    36,    37,    31,    -1,
    33,    34,    35,    36,    37,    31,    -1,    33,    34,    35,
    36,    37,    31,    -1,    33,    34,    35,    36,    37,    31,
    -1,    33,    34,    35,    36,    37,    31,    -1,    33,    34,
    35,    36,    37,    31,    -1,    33,    34,    35,    36,    37,
    31,    -1,    33,    34,    35,    36,    37,    31,    -1,    33,
    34,    35,    36,    37,    31,    -1,    33,    34,    35,    36,
    37,    31,    -1,    33,    34,    35,    36,    37,    31,    -1,
    33,    34,    35,    36,    37,    -1,   136,   137,   138,   139,
   140,   141
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 192 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

int
yyparse(YYPARSE_PARAM)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 41:
#line 281 "parser.y"
{ ;
    break;}
case 42:
#line 282 "parser.y"
{ ;
    break;}
case 43:
#line 283 "parser.y"
{ ;
    break;}
case 44:
#line 284 "parser.y"
{ ;
    break;}
case 45:
#line 285 "parser.y"
{ ;
    break;}
case 46:
#line 286 "parser.y"
{ ;
    break;}
case 47:
#line 287 "parser.y"
{ ;
    break;}
case 48:
#line 288 "parser.y"
{ ;
    break;}
case 52:
#line 298 "parser.y"
{ rawray::options::global::headless = yyvsp[0].boolean; ;
    break;}
case 53:
#line 299 "parser.y"
{ rawray::options::global::gl_render_lights = yyvsp[0].boolean; ;
    break;}
case 54:
#line 300 "parser.y"
{ rawray::options::global::gl_render_bbox = yyvsp[0].boolean; ;
    break;}
case 55:
#line 301 "parser.y"
{ g_image->Resize( rawray::options::global::win_width = yyvsp[-2].integer, rawray::options::global::win_height = yyvsp[0].integer ); ;
    break;}
case 56:
#line 302 "parser.y"
{ rawray::options::global::img_bg_color = math::Vector4( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2], yyvsp[0].vec[3] ); g_scene->GetBackground().SetBGColor(rawray::options::global::img_bg_color); ;
    break;}
case 57:
#line 303 "parser.y"
{ rawray::options::global::img_fg_color = math::Vector4( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2], yyvsp[0].vec[3] ); ;
    break;}
case 58:
#line 304 "parser.y"
{ rawray::options::global::gl_bg_color = math::Vector4( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2], yyvsp[0].vec[3] ); ;
    break;}
case 59:
#line 305 "parser.y"
{ rawray::options::global::gl_sphere_sections = yyvsp[0].integer; ;
    break;}
case 60:
#line 306 "parser.y"
{ rawray::options::global::num_threads = yyvsp[0].integer; ;
    break;}
case 61:
#line 307 "parser.y"
{ rawray::options::global::render_handler_sleep = yyvsp[0].integer; ;
    break;}
case 62:
#line 308 "parser.y"
{ rawray::options::global::render_thread_sleep = yyvsp[0].integer; ;
    break;}
case 63:
#line 309 "parser.y"
{ rawray::options::global::render_spinlock_sleep = yyvsp[0].integer; ;
    break;}
case 64:
#line 310 "parser.y"
{ rawray::options::global::thread_job_size_x = yyvsp[-2].integer; rawray::options::global::thread_job_size_y = yyvsp[0].integer; ;
    break;}
case 65:
#line 311 "parser.y"
{ rawray::options::global::triangle_intersection_algorithm = static_cast<rawray::options::TriangleIntersection>(yyvsp[0].tritest); ;
    break;}
case 66:
#line 312 "parser.y"
{ rawray::options::global::gaussian_blur_max = yyvsp[0].integer; ;
    break;}
case 67:
#line 313 "parser.y"
{ rawray::options::global::gaussian_blur_sigma = yyvsp[0].integer; ;
    break;}
case 68:
#line 314 "parser.y"
{ rawray::options::global::bvh_box_cost = yyvsp[0].real; ;
    break;}
case 69:
#line 315 "parser.y"
{ rawray::options::global::bvh_obj_cost = yyvsp[0].real; ;
    break;}
case 70:
#line 316 "parser.y"
{ yyvsp[0].str[strlen(yyvsp[0].str)-1] = 0; g_scene->GetBackground().LoadPFM( yyvsp[0].str+1 ); ;
    break;}
case 71:
#line 317 "parser.y"
{ rawray::options::global::aax = yyvsp[-2].integer; rawray::options::global::aay = yyvsp[0].integer; ;
    break;}
case 72:
#line 318 "parser.y"
{ rawray::options::global::hdr_bloom_power = yyvsp[0].real; ;
    break;}
case 73:
#line 322 "parser.y"
{ g_camera->SetEye(		rawray::options::camera::eye = math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 74:
#line 323 "parser.y"
{ g_camera->SetViewDir( rawray::options::camera::view = math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 75:
#line 324 "parser.y"
{ g_camera->SetLookAt(	rawray::options::camera::lookat = math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 76:
#line 325 "parser.y"
{ g_camera->SetUp(		rawray::options::camera::up = math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 77:
#line 326 "parser.y"
{ g_camera->SetFOV(		rawray::options::camera::fov = yyvsp[0].real ); ;
    break;}
case 78:
#line 327 "parser.y"
{ g_camera->SetAspect(	rawray::options::camera::aspect = yyvsp[0].real ); ;
    break;}
case 79:
#line 328 "parser.y"
{ g_camera->SetMinDraw( rawray::options::camera::min_draw = yyvsp[0].real ); ;
    break;}
case 80:
#line 329 "parser.y"
{ g_camera->SetMinDraw( rawray::options::camera::max_draw = yyvsp[0].real ); ;
    break;}
case 81:
#line 334 "parser.y"
{
				g_light = new rawray::PointLight();
				g_scene->AddLight( g_light );
			;
    break;}
case 83:
#line 340 "parser.y"
{
				g_light = new rawray::SquareLight();
				g_scene->AddLight( g_light );
			;
    break;}
case 85:
#line 346 "parser.y"
{
				g_light = new rawray::SphereLight();
				g_scene->AddLight( g_light );
			;
    break;}
case 87:
#line 354 "parser.y"
{ g_light->SetPosition( math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 88:
#line 355 "parser.y"
{ g_light->SetWattage( yyvsp[0].real ); ;
    break;}
case 89:
#line 356 "parser.y"
{ g_light->SetColor( math::Vector4( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2], yyvsp[0].vec[3] ) ); ;
    break;}
case 90:
#line 357 "parser.y"
{ g_light->SetNumSamples( yyvsp[0].integer ); ;
    break;}
case 91:
#line 361 "parser.y"
{ g_light->SetPosition( math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 92:
#line 362 "parser.y"
{ g_light->SetWattage( yyvsp[0].real ); ;
    break;}
case 93:
#line 363 "parser.y"
{ g_light->SetColor( math::Vector4( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2], yyvsp[0].vec[3] ) ); ;
    break;}
case 94:
#line 364 "parser.y"
{ g_light->SetNumSamples( yyvsp[0].integer ); ;
    break;}
case 95:
#line 365 "parser.y"
{ ((rawray::SquareLight*)g_light)->SetP1( math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 96:
#line 366 "parser.y"
{ ((rawray::SquareLight*)g_light)->SetP2( math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 97:
#line 370 "parser.y"
{ g_light->SetPosition( math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 98:
#line 371 "parser.y"
{ g_light->SetWattage( yyvsp[0].real ); ;
    break;}
case 99:
#line 372 "parser.y"
{ g_light->SetColor( math::Vector4( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2], yyvsp[0].vec[3] ) ); ;
    break;}
case 100:
#line 373 "parser.y"
{ g_light->SetNumSamples( yyvsp[0].integer ); ;
    break;}
case 101:
#line 374 "parser.y"
{ ((rawray::SphereLight*)g_light)->SetRadius( yyvsp[0].real ); ;
    break;}
case 102:
#line 379 "parser.y"
{
				g_material = new rawray::Diffuse();
				AddMaterial( g_material );
			;
    break;}
case 104:
#line 385 "parser.y"
{
				g_material = new rawray::Phong();
				AddMaterial( g_material );
			;
    break;}
case 106:
#line 391 "parser.y"
{
				g_material = new rawray::Stone();
				AddMaterial( g_material );
			;
    break;}
case 108:
#line 397 "parser.y"
{
				g_material = new rawray::StoneBump();
				AddMaterial( g_material );
			;
    break;}
case 110:
#line 403 "parser.y"
{
				g_material = new rawray::Reflective();
				AddMaterial( g_material );
			;
    break;}
case 112:
#line 409 "parser.y"
{
				g_material = new rawray::Refractive();
				AddMaterial( g_material );
			;
    break;}
case 114:
#line 415 "parser.y"
{
				g_material = new rawray::IndirectDiffuse();
				AddMaterial( g_material );
			;
    break;}
case 116:
#line 424 "parser.y"
{
				g_multimaterial = new rawray::MultiMaterial();
				g_scene->AddMaterial( g_multimaterial );
			;
    break;}
case 117:
#line 429 "parser.y"
{
				g_material = g_multimaterial;
				g_multimaterial = NULL;
			;
    break;}
case 118:
#line 437 "parser.y"
{ g_multimaterial->SetAmbient( math::Vector4( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2], yyvsp[0].vec[3] ) ); ;
    break;}
case 119:
#line 438 "parser.y"
{ ;
    break;}
case 120:
#line 442 "parser.y"
{ ((rawray::Diffuse*)g_material)->SetColor( math::Vector4( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2], yyvsp[0].vec[3] ) ); ;
    break;}
case 121:
#line 443 "parser.y"
{ g_material->SetWeight( yyvsp[0].real ); ;
    break;}
case 122:
#line 447 "parser.y"
{ g_material->SetWeight( yyvsp[0].real ); ;
    break;}
case 123:
#line 451 "parser.y"
{ ((rawray::Phong*)g_material)->SetColor( math::Vector4( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2], yyvsp[0].vec[3] ) ); ;
    break;}
case 124:
#line 452 "parser.y"
{ ((rawray::Phong*)g_material)->SetN( yyvsp[0].real ); ;
    break;}
case 125:
#line 453 "parser.y"
{ g_material->SetWeight( yyvsp[0].real ); ;
    break;}
case 126:
#line 457 "parser.y"
{ g_material->SetWeight( yyvsp[0].real ); ;
    break;}
case 127:
#line 461 "parser.y"
{ ((rawray::Refractive*)g_material)->SetIOR( yyvsp[0].real ); ;
    break;}
case 128:
#line 462 "parser.y"
{ g_material->SetWeight( yyvsp[0].real ); ;
    break;}
case 129:
#line 466 "parser.y"
{ ((rawray::Stone*)g_material)->SetColorA( math::Vector4( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2], yyvsp[0].vec[3] ) ); ;
    break;}
case 130:
#line 467 "parser.y"
{ ((rawray::Stone*)g_material)->SetColorB( math::Vector4( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2], yyvsp[0].vec[3] ) ); ;
    break;}
case 131:
#line 468 "parser.y"
{ g_material->SetWeight( yyvsp[0].real ); ;
    break;}
case 132:
#line 472 "parser.y"
{ ((rawray::StoneBump*)g_material)->SetAmplitude( yyvsp[0].real ); ;
    break;}
case 133:
#line 473 "parser.y"
{ g_material->SetWeight( yyvsp[0].real ); ;
    break;}
case 134:
#line 478 "parser.y"
{ if( g_matrixStack.size() > 0 ) g_matrixStack.push( g_matrixStack.top() ); else g_matrixStack.push( math::Matrix4x4() ); ;
    break;}
case 135:
#line 479 "parser.y"
{ if( g_matrixStack.size() > 0 )g_matrixStack.pop(); else printf( "ERROR: Popping empty stack" ); ;
    break;}
case 136:
#line 480 "parser.y"
{ g_matrixStack.top().SetIdentity(); ;
    break;}
case 137:
#line 481 "parser.y"
{ g_matrixStack.top().Translate( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ); ;
    break;}
case 138:
#line 482 "parser.y"
{ g_matrixStack.top().Scale( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ); ;
    break;}
case 139:
#line 483 "parser.y"
{ g_matrixStack.top().Rotate( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2], yyvsp[0].vec[3] ); ;
    break;}
case 140:
#line 487 "parser.y"
{ rawray::options::p0::spiral_num_spheres = yyvsp[0].integer; ;
    break;}
case 141:
#line 488 "parser.y"
{ rawray::options::p0::spiral_radius = yyvsp[0].real; ;
    break;}
case 142:
#line 489 "parser.y"
{ rawray::options::p0::lorenz_dt = yyvsp[0].real; ;
    break;}
case 143:
#line 490 "parser.y"
{ rawray::options::p0::lorenz_min_distance = yyvsp[0].real; ;
    break;}
case 144:
#line 491 "parser.y"
{ rawray::options::p0::lorenz_max_distance = yyvsp[0].real; ;
    break;}
case 145:
#line 492 "parser.y"
{ rawray::options::p0::lorenz_sigma = yyvsp[0].real; ;
    break;}
case 146:
#line 493 "parser.y"
{ rawray::options::p0::lorenz_rho = yyvsp[0].real; ;
    break;}
case 147:
#line 494 "parser.y"
{ rawray::options::p0::lorenz_beta = yyvsp[0].real; ;
    break;}
case 148:
#line 495 "parser.y"
{ rawray::options::p0::lorenz_radius = yyvsp[0].real; ;
    break;}
case 149:
#line 496 "parser.y"
{ rawray::options::p0::lorenz_num_spheres = yyvsp[0].integer; ;
    break;}
case 150:
#line 497 "parser.y"
{ rawray::options::p0::lorenz_start = math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ); ;
    break;}
case 151:
#line 502 "parser.y"
{
				yyvsp[0].str[strlen(yyvsp[0].str)-1] = 0;
				printf( "Loading Mesh: '%s'\n", yyvsp[0].str+1 );
				
				if( g_matrixStack.size() == 0 )
					g_mesh->LoadOBJ( yyvsp[0].str+1 );
				else
					g_mesh->LoadOBJ( yyvsp[0].str+1, g_matrixStack.top() );
					
				printf( "Found %d triangles in mesh\n", g_mesh->GetNumTriangles() );
				
				delete yyvsp[0].str;
			;
    break;}
case 152:
#line 518 "parser.y"
{ ((rawray::Sphere*)g_obj)->SetCenter( math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 153:
#line 519 "parser.y"
{ ((rawray::Sphere*)g_obj)->SetRadius( yyvsp[0].real ); ;
    break;}
case 154:
#line 523 "parser.y"
{ ((rawray::BLPatch*)g_obj)->SetP00( math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 155:
#line 524 "parser.y"
{ ((rawray::BLPatch*)g_obj)->SetP01( math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 156:
#line 525 "parser.y"
{ ((rawray::BLPatch*)g_obj)->SetP10( math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 157:
#line 526 "parser.y"
{ ((rawray::BLPatch*)g_obj)->SetP11( math::Vector3( yyvsp[0].vec[0], yyvsp[0].vec[1], yyvsp[0].vec[2] ) ); ;
    break;}
case 158:
#line 527 "parser.y"
{ ((rawray::BLPatch*)g_obj)->SetUConstraint( yyvsp[0].vec[0], yyvsp[0].vec[1] ); ;
    break;}
case 159:
#line 528 "parser.y"
{ ((rawray::BLPatch*)g_obj)->SetVConstraint( yyvsp[0].vec[0], yyvsp[0].vec[1] ); ;
    break;}
case 160:
#line 532 "parser.y"
{
				g_mesh = new rawray::TriangleMesh();
			;
    break;}
case 161:
#line 536 "parser.y"
{
				if( g_mesh->GetNumTriangles() > 0 ) {
					g_scene->AddMesh( g_mesh );
					rawray::AddTrianglesOfMesh();
				} else {
					delete g_mesh;
					g_mesh = NULL;
				}
			;
    break;}
case 162:
#line 546 "parser.y"
{
				g_mesh = new rawray::TriangleMesh();
				
				// TODO: implement
				//g_objectMap[$2] = g_obj;
				
				delete yyvsp[-1].str;
			;
    break;}
case 163:
#line 555 "parser.y"
{
				if( g_mesh->GetNumTriangles() > 0 ) {
					g_scene->AddMesh( g_mesh );
					rawray::AddTrianglesOfMesh();
				} else {
					delete g_mesh;
					g_mesh = NULL;
				}
			;
    break;}
case 164:
#line 568 "parser.y"
{
				g_obj = new rawray::Sphere( math::Vector3(0), 1.0f, g_material );
			;
    break;}
case 165:
#line 572 "parser.y"
{
				g_scene->AddObject( g_obj );
				g_obj = NULL;
			;
    break;}
case 166:
#line 577 "parser.y"
{
				g_obj = new rawray::Sphere( math::Vector3(0), 1.0f, g_material );
				g_objectMap[yyvsp[-1].str] = g_obj;
				
				delete yyvsp[-1].str;
			;
    break;}
case 167:
#line 584 "parser.y"
{
				g_scene->AddObject( g_obj );
				g_obj = NULL;
			;
    break;}
case 168:
#line 592 "parser.y"
{
				g_obj = new rawray::BLPatch( g_material );
			;
    break;}
case 169:
#line 596 "parser.y"
{
				g_scene->AddObject( g_obj );
				g_obj = NULL;
			;
    break;}
case 170:
#line 601 "parser.y"
{
				g_obj = new rawray::BLPatch( g_material );
				g_objectMap[yyvsp[-1].str] = g_obj;
				
				delete yyvsp[-1].str;
			;
    break;}
case 171:
#line 608 "parser.y"
{
				g_scene->AddObject( g_obj );
				g_obj = NULL;
			;
    break;}
case 172:
#line 615 "parser.y"
{ yyval.vec[0] = yyvsp[-3].real; yyval.vec[1] = yyvsp[-1].real; ;
    break;}
case 173:
#line 616 "parser.y"
{ yyval.vec[0] = yyvsp[-3].real; yyval.vec[1] = yyvsp[-1].integer; ;
    break;}
case 174:
#line 617 "parser.y"
{ yyval.vec[0] = yyvsp[-3].integer; yyval.vec[1] = yyvsp[-1].real; ;
    break;}
case 175:
#line 618 "parser.y"
{ yyval.vec[0] = yyvsp[-3].integer; yyval.vec[1] = yyvsp[-1].integer; ;
    break;}
case 176:
#line 619 "parser.y"
{ yyval.vec[0] = yyvsp[-1].real; yyval.vec[1] = yyvsp[-1].real; ;
    break;}
case 177:
#line 620 "parser.y"
{ yyval.vec[0] = yyvsp[-1].integer; yyval.vec[1] = yyvsp[-1].integer; ;
    break;}
case 178:
#line 624 "parser.y"
{ yyval.vec[0] = yyvsp[-5].real; yyval.vec[1] = yyvsp[-3].real; yyval.vec[2] = yyvsp[-1].real; ;
    break;}
case 179:
#line 625 "parser.y"
{ yyval.vec[0] = yyvsp[-5].real; yyval.vec[1] = yyvsp[-3].real; yyval.vec[2] = yyvsp[-1].integer; ;
    break;}
case 180:
#line 626 "parser.y"
{ yyval.vec[0] = yyvsp[-5].real; yyval.vec[1] = yyvsp[-3].integer; yyval.vec[2] = yyvsp[-1].real; ;
    break;}
case 181:
#line 627 "parser.y"
{ yyval.vec[0] = yyvsp[-5].real; yyval.vec[1] = yyvsp[-3].integer; yyval.vec[2] = yyvsp[-1].integer; ;
    break;}
case 182:
#line 628 "parser.y"
{ yyval.vec[0] = yyvsp[-5].integer; yyval.vec[1] = yyvsp[-3].real; yyval.vec[2] = yyvsp[-1].real; ;
    break;}
case 183:
#line 629 "parser.y"
{ yyval.vec[0] = yyvsp[-5].integer; yyval.vec[1] = yyvsp[-3].real; yyval.vec[2] = yyvsp[-1].integer; ;
    break;}
case 184:
#line 630 "parser.y"
{ yyval.vec[0] = yyvsp[-5].integer; yyval.vec[1] = yyvsp[-3].integer; yyval.vec[2] = yyvsp[-1].real; ;
    break;}
case 185:
#line 631 "parser.y"
{ yyval.vec[0] = yyvsp[-5].integer; yyval.vec[1] = yyvsp[-3].integer; yyval.vec[2] = yyvsp[-1].integer; ;
    break;}
case 186:
#line 632 "parser.y"
{ yyval.vec[0] = yyvsp[-1].real; yyval.vec[1] = yyvsp[-1].real; yyval.vec[2] = yyvsp[-1].real; ;
    break;}
case 187:
#line 633 "parser.y"
{ yyval.vec[0] = yyvsp[-1].integer; yyval.vec[1] = yyvsp[-1].integer; yyval.vec[2] = yyvsp[-1].integer; ;
    break;}
case 188:
#line 637 "parser.y"
{ yyval.vec[0] = yyvsp[-7].real; yyval.vec[1] = yyvsp[-5].real; yyval.vec[2] = yyvsp[-3].real; yyval.vec[3] = yyvsp[-1].real; ;
    break;}
case 189:
#line 638 "parser.y"
{ yyval.vec[0] = yyvsp[-7].real; yyval.vec[1] = yyvsp[-5].real; yyval.vec[2] = yyvsp[-3].real; yyval.vec[3] = yyvsp[-1].integer; ;
    break;}
case 190:
#line 639 "parser.y"
{ yyval.vec[0] = yyvsp[-7].real; yyval.vec[1] = yyvsp[-5].real; yyval.vec[2] = yyvsp[-3].integer; yyval.vec[3] = yyvsp[-1].real; ;
    break;}
case 191:
#line 640 "parser.y"
{ yyval.vec[0] = yyvsp[-7].real; yyval.vec[1] = yyvsp[-5].real; yyval.vec[2] = yyvsp[-3].integer; yyval.vec[3] = yyvsp[-1].integer; ;
    break;}
case 192:
#line 641 "parser.y"
{ yyval.vec[0] = yyvsp[-7].real; yyval.vec[1] = yyvsp[-5].integer; yyval.vec[2] = yyvsp[-3].real; yyval.vec[3] = yyvsp[-1].real; ;
    break;}
case 193:
#line 642 "parser.y"
{ yyval.vec[0] = yyvsp[-7].real; yyval.vec[1] = yyvsp[-5].integer; yyval.vec[2] = yyvsp[-3].real; yyval.vec[3] = yyvsp[-1].integer; ;
    break;}
case 194:
#line 643 "parser.y"
{ yyval.vec[0] = yyvsp[-7].real; yyval.vec[1] = yyvsp[-5].integer; yyval.vec[2] = yyvsp[-3].integer; yyval.vec[3] = yyvsp[-1].real; ;
    break;}
case 195:
#line 644 "parser.y"
{ yyval.vec[0] = yyvsp[-7].real; yyval.vec[1] = yyvsp[-5].integer; yyval.vec[2] = yyvsp[-3].integer; yyval.vec[3] = yyvsp[-1].integer; ;
    break;}
case 196:
#line 645 "parser.y"
{ yyval.vec[0] = yyvsp[-7].integer; yyval.vec[1] = yyvsp[-5].real; yyval.vec[2] = yyvsp[-3].real; yyval.vec[3] = yyvsp[-1].real; ;
    break;}
case 197:
#line 646 "parser.y"
{ yyval.vec[0] = yyvsp[-7].integer; yyval.vec[1] = yyvsp[-5].real; yyval.vec[2] = yyvsp[-3].real; yyval.vec[3] = yyvsp[-1].integer; ;
    break;}
case 198:
#line 647 "parser.y"
{ yyval.vec[0] = yyvsp[-7].integer; yyval.vec[1] = yyvsp[-5].real; yyval.vec[2] = yyvsp[-3].integer; yyval.vec[3] = yyvsp[-1].real; ;
    break;}
case 199:
#line 648 "parser.y"
{ yyval.vec[0] = yyvsp[-7].integer; yyval.vec[1] = yyvsp[-5].real; yyval.vec[2] = yyvsp[-3].integer; yyval.vec[3] = yyvsp[-1].integer; ;
    break;}
case 200:
#line 649 "parser.y"
{ yyval.vec[0] = yyvsp[-7].integer; yyval.vec[1] = yyvsp[-5].integer; yyval.vec[2] = yyvsp[-3].real; yyval.vec[3] = yyvsp[-1].real; ;
    break;}
case 201:
#line 650 "parser.y"
{ yyval.vec[0] = yyvsp[-7].integer; yyval.vec[1] = yyvsp[-5].integer; yyval.vec[2] = yyvsp[-3].real; yyval.vec[3] = yyvsp[-1].integer; ;
    break;}
case 202:
#line 651 "parser.y"
{ yyval.vec[0] = yyvsp[-7].integer; yyval.vec[1] = yyvsp[-5].integer; yyval.vec[2] = yyvsp[-3].integer; yyval.vec[3] = yyvsp[-1].real; ;
    break;}
case 203:
#line 652 "parser.y"
{ yyval.vec[0] = yyvsp[-7].integer; yyval.vec[1] = yyvsp[-5].integer; yyval.vec[2] = yyvsp[-3].integer; yyval.vec[3] = yyvsp[-1].integer; ;
    break;}
case 204:
#line 653 "parser.y"
{ yyval.vec[0] = yyvsp[-1].real; yyval.vec[1] = yyvsp[-1].real; yyval.vec[2] = yyvsp[-1].real; yyval.vec[3] = 0.0f; ;
    break;}
case 205:
#line 654 "parser.y"
{ yyval.vec[0] = yyvsp[-1].integer; yyval.vec[1] = yyvsp[-1].integer; yyval.vec[2] = yyvsp[-1].integer; yyval.vec[3] = 0.0f; ;
    break;}
case 206:
#line 657 "parser.y"
{ yyval.real = yyvsp[0].real; ;
    break;}
case 207:
#line 658 "parser.y"
{ yyval.real = yyvsp[0].real; ;
    break;}
case 208:
#line 659 "parser.y"
{ yyval.real = yyvsp[0].real; ;
    break;}
case 209:
#line 660 "parser.y"
{ yyval.real = yyvsp[-2].real + yyvsp[0].real; ;
    break;}
case 210:
#line 661 "parser.y"
{ yyval.real = yyvsp[-2].real - yyvsp[0].real; ;
    break;}
case 211:
#line 662 "parser.y"
{ yyval.real = yyvsp[-2].real * yyvsp[0].real; ;
    break;}
case 212:
#line 663 "parser.y"
{ yyval.real = yyvsp[-2].real / yyvsp[0].real; ;
    break;}
case 213:
#line 664 "parser.y"
{ yyval.real = pow( (float)yyvsp[-2].real, (float)yyvsp[0].real ); ;
    break;}
case 214:
#line 665 "parser.y"
{ yyval.real = -yyvsp[0].real; ;
    break;}
case 215:
#line 666 "parser.y"
{ yyval.real = yyvsp[-1].real; ;
    break;}
case 216:
#line 670 "parser.y"
{ yyval.integer = yyvsp[0].integer; ;
    break;}
case 217:
#line 671 "parser.y"
{ yyval.integer = yyvsp[-2].integer + yyvsp[0].integer; ;
    break;}
case 218:
#line 672 "parser.y"
{ yyval.integer = yyvsp[-2].integer - yyvsp[0].integer; ;
    break;}
case 219:
#line 673 "parser.y"
{ yyval.integer = yyvsp[-2].integer * yyvsp[0].integer; ;
    break;}
case 220:
#line 674 "parser.y"
{ yyval.integer = yyvsp[-2].integer / yyvsp[0].integer; ;
    break;}
case 221:
#line 675 "parser.y"
{ yyval.integer = (int)pow( (float)yyvsp[-2].integer, (float)yyvsp[0].integer ); ;
    break;}
case 222:
#line 676 "parser.y"
{ yyval.integer = -yyvsp[0].integer; ;
    break;}
case 223:
#line 677 "parser.y"
{ yyval.integer = yyvsp[-1].integer; ;
    break;}
case 224:
#line 681 "parser.y"
{yyval.real = sin(yyvsp[-1].real); ;
    break;}
case 225:
#line 682 "parser.y"
{yyval.real = sin((float)yyvsp[-1].integer); ;
    break;}
case 226:
#line 683 "parser.y"
{yyval.real = cos(yyvsp[-1].real); ;
    break;}
case 227:
#line 684 "parser.y"
{yyval.real = cos((float)yyvsp[-1].integer); ;
    break;}
case 228:
#line 685 "parser.y"
{yyval.real = tan(yyvsp[-1].real); ;
    break;}
case 229:
#line 686 "parser.y"
{yyval.real = tan((float)yyvsp[-1].integer); ;
    break;}
case 230:
#line 687 "parser.y"
{yyval.real = asin(yyvsp[-1].real); ;
    break;}
case 231:
#line 688 "parser.y"
{yyval.real = asin((float)yyvsp[-1].integer); ;
    break;}
case 232:
#line 689 "parser.y"
{yyval.real = acos(yyvsp[-1].real); ;
    break;}
case 233:
#line 690 "parser.y"
{yyval.real = acos((float)yyvsp[-1].integer); ;
    break;}
case 234:
#line 691 "parser.y"
{yyval.real = atan(yyvsp[-1].real); ;
    break;}
case 235:
#line 692 "parser.y"
{yyval.real = atan((float)yyvsp[-1].integer); ;
    break;}
case 236:
#line 693 "parser.y"
{yyval.real = log(yyvsp[-1].real); ;
    break;}
case 237:
#line 694 "parser.y"
{yyval.real = log((float)yyvsp[-1].integer); ;
    break;}
case 238:
#line 695 "parser.y"
{yyval.real = log10(yyvsp[-1].real); ;
    break;}
case 239:
#line 696 "parser.y"
{yyval.real = log10((float)yyvsp[-1].integer); ;
    break;}
case 240:
#line 697 "parser.y"
{yyval.real = exp(yyvsp[-1].real); ;
    break;}
case 241:
#line 698 "parser.y"
{yyval.real = exp((float)yyvsp[-1].integer); ;
    break;}
case 242:
#line 699 "parser.y"
{yyval.real = sqrt(yyvsp[-1].real); ;
    break;}
case 243:
#line 700 "parser.y"
{yyval.real = sqrt((float)yyvsp[-1].integer); ;
    break;}
case 244:
#line 704 "parser.y"
{ yyval.real = 2.718281828459f; ;
    break;}
case 245:
#line 705 "parser.y"
{ yyval.real = 3.141592653589793f; ;
    break;}
case 246:
#line 709 "parser.y"
{ yyval.boolean = true; ;
    break;}
case 247:
#line 710 "parser.y"
{ yyval.boolean = false; ;
    break;}
case 248:
#line 714 "parser.y"
{ yyval.tritest = rawray::options::BARYCENTRIC; ;
    break;}
case 249:
#line 715 "parser.y"
{ yyval.tritest = rawray::options::BARYCENTRIC_PROJECTION; ;
    break;}
case 250:
#line 716 "parser.y"
{ yyval.tritest = rawray::options::PLUCKER; ;
    break;}
case 251:
#line 717 "parser.y"
{ yyval.tritest = rawray::options::MOLLER; ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 487 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 721 "parser.y"


//Additional C code

namespace rawray {

void AddTrianglesOfMesh() {
    for( int i=0; i<g_mesh->GetNumTriangles(); ++i ) {
        Triangle* t = rawray::TriangleFactory::NewTriangle( g_mesh, i, g_material );
        g_scene->AddObject( t );
    }
    
    g_mesh = NULL;
}

void SetConfigSources(Scene* scene, Camera* cam, Image* img) {
	printf( "Setting config sources\n");
    g_scene = scene;
    g_camera = cam;
    g_image = img;
}

bool ConfigParser(const char* filename) {
#ifdef YYDEBUG
#if YYDEBUG==1
    yydebug = 1;
#endif
#endif
    
    if( !g_scene || !g_camera || !g_image )
        return false;
    
    yyin = fopen( filename, "r" );
    if( !yyin )
        return false;

    yyparse();
    fclose( yyin );
    
    printf( "Done Parsing...\n" );
	return yyerr == 0;
}

void DoneParsing() {
	printf( "Cleaning up parser...\n" );
	yy_done_parsing();
}

void AddMaterial( Material* material ) {
	if( g_multimaterial ) {
		g_multimaterial->AddMaterial( material );
	} else {
		g_scene->AddMaterial( material );
	}
}

} // namespace rawray
