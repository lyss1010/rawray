
/*  A Bison parser, made from parser.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	YY_REAL	258
#define	YY_PARSE_INT	259
#define	YY_STRING	260
#define	YY_PARSE_TRUE	261
#define	YY_PARSE_FALSE	262
#define	YY_ENABLE	263
#define	YY_DISABLE	264
#define	YY_MATH_COS	265
#define	YY_MATH_SIN	266
#define	YY_MATH_TAN	267
#define	YY_MATH_ACOS	268
#define	YY_MATH_ASIN	269
#define	YY_MATH_ATAN	270
#define	YY_MATH_ATAN2	271
#define	YY_MATH_LN	272
#define	YY_MATH_LOG	273
#define	YY_MATH_EXP	274
#define	YY_MATH_SQRT	275
#define	YY_MATH_E	276
#define	YY_MATH_PI	277
#define	YY_GLOBAL	278
#define	YY_WIDTH	279
#define	YY_HEIGHT	280
#define	YY_POS	281
#define	YY_IMG_BGCOLOR	282
#define	YY_IMG_FGCOLOR	283
#define	YY_GL_BGCOLOR	284
#define	YY_GL_SPHERE_SECTIONS	285
#define	YY_NUM_THREADS	286
#define	YY_RENDER_X_BLOCK	287
#define	YY_RENDER_Y_BLOCK	288
#define	YY_RENDER_HANDLER_SLEEP	289
#define	YY_RENDER_THREAD_SLEEP	290
#define	YY_RENDER_SPINLOCK_SLEEP	291
#define	YY_GAUSSIAN_BLUR_MAX	292
#define	YY_GAUSSIAN_BLUR_SIGMA	293
#define	YY_TRIANGLE_TEST	294
#define	YY_BARYCENTRIC	295
#define	YY_PROJECTION	296
#define	YY_PLUCKER	297
#define	YY_MOLLER	298
#define	YY_GL_RENDER_LIGHTS	299
#define	YY_HEADLESS	300
#define	YY_CAMERA	301
#define	YY_DIR	302
#define	YY_LOOKAT	303
#define	YY_UP	304
#define	YY_FOV	305
#define	YY_ASPECT	306
#define	YY_MIN_DRAW	307
#define	YY_MAX_DRAW	308
#define	YY_P0	309
#define	YY_SPIRAL_NUM_SPHERES	310
#define	YY_SPIRAL_RADIUS	311
#define	YY_LORENZ_DT	312
#define	YY_LORENZ_MIN_DISTANCE	313
#define	YY_LORENZ_MAX_DISTANCE	314
#define	YY_LORENZ_SIGMA	315
#define	YY_LORENZ_RHO	316
#define	YY_LORENZ_BETA	317
#define	YY_LORENZ_RADIUS	318
#define	YY_LORENZ_NUM_SPHERES	319
#define	YY_LORENZ_START	320
#define	YY_TRIANGLE	321
#define	YY_V1	322
#define	YY_V2	323
#define	YY_V3	324
#define	YY_N1	325
#define	YY_N2	326
#define	YY_N3	327
#define	YY_MESH	328
#define	YY_LOAD	329
#define	YY_INSTANCE	330
#define	YY_GEOMETRY	331
#define	YY_PUSHMATRIX	332
#define	YY_POPMATRIX	333
#define	YY_ROTATE	334
#define	YY_TRANSLATE	335
#define	YY_SCALE	336
#define	YY_LIGHT	337
#define	YY_POINTLIGHT	338
#define	YY_WATTAGE	339
#define	YY_COLOR	340
#define	YY_MATERIAL	341
#define	YY_LAMBERT	342
#define	YY_DIFFUSE	343
#define	YY_AMBIENT	344
#define	YY_SPHERE	345
#define	YY_CENTER	346
#define	YY_RADIUS	347
#define	YY_BLPATCH	348
#define	YY_P00	349
#define	YY_P01	350
#define	YY_P10	351
#define	YY_P11	352
#define	NEG	353

#line 1 "parser.y"

#ifdef WIN32
#pragma warning(disable:4244) // smaller type conversion warnings
#pragma warning(disable:4701) // variable used without being initialized
#endif

#include "parser.h"
#include <malloc.h>
#include <stdlib.h>
#include <math.h>
#include <stack>
#include <queue>
#include <map>
#include <string>
#include <iostream>
#include "math/vector3.h"
#include "math/matrix4x4.h"
#include "object.h"
#include "material.h"
#include "lambert.h"
#include "light.h"
#include "options.h"
#include "scene.h"
#include "camera.h"
#include "image.h"
#include "triangle_factory.h"
#include "sphere.h"
#include "bl_patch.h"

//#define YYDEBUG 1

#define yyerror(x) printf("Parser error on line %d: %s\n", yyline, x); 

extern int yylex();
extern int yyline;
extern FILE *yyin, *yyout;


// variables for adding objects, keeping track of variables
rawray::Camera*                         g_camera = NULL;
rawray::Scene*                          g_scene = NULL;
rawray::Image*                          g_image = NULL;

rawray::Object*                         g_obj = NULL;
rawray::Material*                       g_material = NULL;
rawray::Light*                          g_light = NULL;
rawray::TriangleMesh*                   g_mesh = NULL;

math::Vector3                           g_vector;
std::map<std::string, rawray::Object*>  g_objectMap;
std::stack<math::Matrix4x4>             g_matrixStack;


#line 55 "parser.y"
typedef union
{
    float real;
    int integer;
    char* str;
} YYSTYPE;

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		428
#define	YYFLAG		-32768
#define	YYNTBASE	110

#define YYTRANSLATE(x) ((unsigned)(x) <= 353 ? yytranslate[x] : 139)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   108,
   109,   101,   100,   107,    99,     2,   102,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    98,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,   104,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   105,     2,   106,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
    96,    97,   103
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     1,     4,     9,    14,    18,    22,    27,    29,    31,
    32,    38,    39,    46,    47,    53,    54,    61,    62,    68,
    69,    76,    77,    83,    84,    91,    92,   100,   108,   116,
   124,   132,   140,   141,   149,   153,   154,   156,   158,   167,
   174,   181,   182,   187,   188,   193,   194,   202,   206,   214,
   215,   223,   231,   232,   235,   236,   240,   244,   252,   260,
   268,   272,   276,   280,   285,   289,   293,   297,   301,   305,
   309,   313,   317,   321,   325,   329,   333,   337,   338,   346,
   354,   362,   370,   374,   378,   382,   386,   387,   391,   395,
   399,   403,   407,   411,   415,   419,   423,   427,   435,   437,
   439,   441,   445,   449,   453,   457,   461,   465,   469,   473,
   477,   481,   485,   489,   493,   497,   501,   504,   508,   510,
   515,   520,   525,   530,   535,   540,   545,   550,   555,   560,
   562,   564,   566,   570,   574,   578,   582,   585,   589
};

static const short yyrhs[] = {    -1,
   110,   111,     0,    23,   105,   132,   106,     0,    46,   105,
   133,   106,     0,    82,   125,   106,     0,    86,   127,   106,
     0,    54,   105,   134,   106,     0,   112,     0,   124,     0,
     0,    66,   105,   113,   121,   106,     0,     0,    66,     5,
   105,   114,   121,   106,     0,     0,    73,   105,   115,   131,
   106,     0,     0,    73,     5,   105,   116,   131,   106,     0,
     0,    90,   105,   117,   122,   106,     0,     0,    90,     5,
   105,   118,   122,   106,     0,     0,    93,   105,   119,   123,
   106,     0,     0,    93,     5,   105,   120,   123,   106,     0,
     0,    67,   135,   107,   135,   107,   135,   121,     0,    68,
   135,   107,   135,   107,   135,   121,     0,    69,   135,   107,
   135,   107,   135,   121,     0,    70,   135,   107,   135,   107,
   135,   121,     0,    71,   135,   107,   135,   107,   135,   121,
     0,    72,   135,   107,   135,   107,   135,   121,     0,     0,
    91,   135,   107,   135,   107,   135,   122,     0,    92,   135,
   122,     0,     0,    77,     0,    78,     0,    79,   135,   107,
   135,   107,   135,   107,   135,     0,    80,   135,   107,   135,
   107,   135,     0,    81,   135,   107,   135,   107,   135,     0,
     0,    83,   105,   126,   129,     0,     0,    87,   105,   128,
   130,     0,     0,    26,   135,   107,   135,   107,   135,   129,
     0,    84,   135,   129,     0,    85,   135,   107,   135,   107,
   135,   129,     0,     0,    88,   135,   107,   135,   107,   135,
   130,     0,    89,   135,   107,   135,   107,   135,   130,     0,
     0,    74,     5,     0,     0,    25,   138,   132,     0,    24,
   138,   132,     0,    29,   135,   107,   135,   107,   135,   132,
     0,    27,   135,   107,   135,   107,   135,   132,     0,    28,
   135,   107,   135,   107,   135,   132,     0,    30,   138,   132,
     0,    31,   138,   132,     0,    39,    40,   132,     0,    39,
    40,    41,   132,     0,    39,    42,   132,     0,    39,    43,
   132,     0,    32,   138,   132,     0,    33,   138,   132,     0,
    34,   138,   132,     0,    35,   138,   132,     0,    36,   138,
   132,     0,    37,   135,   132,     0,    38,   135,   132,     0,
     8,    44,   132,     0,     9,    44,   132,     0,     8,    45,
   132,     0,     9,    45,   132,     0,     0,    26,   135,   107,
   135,   107,   135,   133,     0,    47,   135,   107,   135,   107,
   135,   133,     0,    48,   135,   107,   135,   107,   135,   133,
     0,    49,   135,   107,   135,   107,   135,   133,     0,    50,
   135,   133,     0,    51,   135,   133,     0,    52,   135,   133,
     0,    53,   135,   133,     0,     0,    55,   138,   134,     0,
    56,   135,   134,     0,    57,   135,   134,     0,    58,   135,
   134,     0,    59,   135,   134,     0,    60,   135,   134,     0,
    61,   135,   134,     0,    62,   135,   134,     0,    63,   135,
   134,     0,    64,   138,   134,     0,    65,   135,   107,   135,
   107,   135,   134,     0,     3,     0,   138,     0,   136,     0,
   135,   100,   135,     0,   138,   100,   135,     0,   135,   100,
   138,     0,   135,    99,   135,     0,   138,    99,   135,     0,
   135,    99,   138,     0,   135,   101,   135,     0,   138,   101,
   135,     0,   135,   101,   138,     0,   135,   102,   135,     0,
   138,   102,   135,     0,   135,   102,   138,     0,   135,   104,
   135,     0,   138,   104,   135,     0,   135,   104,   138,     0,
    99,   135,     0,   108,   135,   109,     0,   137,     0,    11,
   108,   135,   109,     0,    10,   108,   135,   109,     0,    12,
   108,   135,   109,     0,    14,   108,   135,   109,     0,    13,
   108,   135,   109,     0,    15,   108,   135,   109,     0,    17,
   108,   135,   109,     0,    18,   108,   135,   109,     0,    19,
   108,   135,   109,     0,    20,   108,   135,   109,     0,    21,
     0,    22,     0,     4,     0,   138,   100,   138,     0,   138,
    99,   138,     0,   138,   101,   138,     0,   138,   102,   138,
     0,    99,   138,     0,   138,   104,   138,     0,   108,   138,
   109,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   187,   188,   191,   192,   193,   194,   195,   196,   197,   200,
   209,   215,   225,   231,   238,   244,   253,   259,   269,   275,
   287,   293,   301,   307,   316,   341,   342,   344,   346,   348,
   350,   352,   356,   357,   359,   363,   388,   389,   391,   393,
   395,   399,   410,   412,   423,   425,   426,   428,   430,   434,
   435,   437,   441,   442,   450,   451,   453,   455,   457,   459,
   461,   463,   465,   467,   469,   471,   473,   475,   477,   479,
   481,   483,   485,   487,   489,   491,   493,   497,   498,   500,
   502,   504,   506,   508,   510,   512,   516,   517,   519,   521,
   523,   525,   527,   529,   531,   533,   535,   537,   541,   542,
   543,   545,   546,   547,   549,   550,   551,   553,   554,   555,
   557,   558,   559,   561,   562,   563,   565,   566,   567,   570,
   571,   572,   573,   574,   575,   576,   577,   578,   579,   582,
   584,   587,   588,   589,   590,   591,   592,   593,   594
};

static const char * const yytname[] = {   "$","error","$undefined.","YY_REAL",
"YY_PARSE_INT","YY_STRING","YY_PARSE_TRUE","YY_PARSE_FALSE","YY_ENABLE","YY_DISABLE",
"YY_MATH_COS","YY_MATH_SIN","YY_MATH_TAN","YY_MATH_ACOS","YY_MATH_ASIN","YY_MATH_ATAN",
"YY_MATH_ATAN2","YY_MATH_LN","YY_MATH_LOG","YY_MATH_EXP","YY_MATH_SQRT","YY_MATH_E",
"YY_MATH_PI","YY_GLOBAL","YY_WIDTH","YY_HEIGHT","YY_POS","YY_IMG_BGCOLOR","YY_IMG_FGCOLOR",
"YY_GL_BGCOLOR","YY_GL_SPHERE_SECTIONS","YY_NUM_THREADS","YY_RENDER_X_BLOCK",
"YY_RENDER_Y_BLOCK","YY_RENDER_HANDLER_SLEEP","YY_RENDER_THREAD_SLEEP","YY_RENDER_SPINLOCK_SLEEP",
"YY_GAUSSIAN_BLUR_MAX","YY_GAUSSIAN_BLUR_SIGMA","YY_TRIANGLE_TEST","YY_BARYCENTRIC",
"YY_PROJECTION","YY_PLUCKER","YY_MOLLER","YY_GL_RENDER_LIGHTS","YY_HEADLESS",
"YY_CAMERA","YY_DIR","YY_LOOKAT","YY_UP","YY_FOV","YY_ASPECT","YY_MIN_DRAW",
"YY_MAX_DRAW","YY_P0","YY_SPIRAL_NUM_SPHERES","YY_SPIRAL_RADIUS","YY_LORENZ_DT",
"YY_LORENZ_MIN_DISTANCE","YY_LORENZ_MAX_DISTANCE","YY_LORENZ_SIGMA","YY_LORENZ_RHO",
"YY_LORENZ_BETA","YY_LORENZ_RADIUS","YY_LORENZ_NUM_SPHERES","YY_LORENZ_START",
"YY_TRIANGLE","YY_V1","YY_V2","YY_V3","YY_N1","YY_N2","YY_N3","YY_MESH","YY_LOAD",
"YY_INSTANCE","YY_GEOMETRY","YY_PUSHMATRIX","YY_POPMATRIX","YY_ROTATE","YY_TRANSLATE",
"YY_SCALE","YY_LIGHT","YY_POINTLIGHT","YY_WATTAGE","YY_COLOR","YY_MATERIAL",
"YY_LAMBERT","YY_DIFFUSE","YY_AMBIENT","YY_SPHERE","YY_CENTER","YY_RADIUS","YY_BLPATCH",
"YY_P00","YY_P01","YY_P10","YY_P11","'='","'-'","'+'","'*'","'/'","NEG","'^'",
"'{'","'}'","','","'('","')'","input","block","objectTypes","@1","@2","@3","@4",
"@5","@6","@7","@8","triangleOptions","sphereOptions","blPatchOptions","transform",
"lightTypes","@9","materialTypes","@10","lightOptions","lambertOptions","meshOptions",
"globalOptions","cameraOptions","p0Options","rExp","fExp","constantExp","iExp",
""
};
#endif

static const short yyr1[] = {     0,
   110,   110,   111,   111,   111,   111,   111,   111,   111,   113,
   112,   114,   112,   115,   112,   116,   112,   117,   112,   118,
   112,   119,   112,   120,   112,   121,   121,   121,   121,   121,
   121,   121,   122,   122,   122,   123,   124,   124,   124,   124,
   124,   126,   125,   128,   127,   129,   129,   129,   129,   130,
   130,   130,   131,   131,   132,   132,   132,   132,   132,   132,
   132,   132,   132,   132,   132,   132,   132,   132,   132,   132,
   132,   132,   132,   132,   132,   132,   132,   133,   133,   133,
   133,   133,   133,   133,   133,   133,   134,   134,   134,   134,
   134,   134,   134,   134,   134,   134,   134,   134,   135,   135,
   135,   135,   135,   135,   135,   135,   135,   135,   135,   135,
   135,   135,   135,   135,   135,   135,   135,   135,   135,   136,
   136,   136,   136,   136,   136,   136,   136,   136,   136,   137,
   137,   138,   138,   138,   138,   138,   138,   138,   138
};

static const short yyr2[] = {     0,
     0,     2,     4,     4,     3,     3,     4,     1,     1,     0,
     5,     0,     6,     0,     5,     0,     6,     0,     5,     0,
     6,     0,     5,     0,     6,     0,     7,     7,     7,     7,
     7,     7,     0,     7,     3,     0,     1,     1,     8,     6,
     6,     0,     4,     0,     4,     0,     7,     3,     7,     0,
     7,     7,     0,     2,     0,     3,     3,     7,     7,     7,
     3,     3,     3,     4,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     0,     7,     7,
     7,     7,     3,     3,     3,     3,     0,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     7,     1,     1,
     1,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     2,     3,     1,     4,
     4,     4,     4,     4,     4,     4,     4,     4,     4,     1,
     1,     1,     3,     3,     3,     3,     2,     3,     3
};

static const short yydefact[] = {     1,
     0,     0,     0,     0,     0,     0,    37,    38,     0,     0,
     0,     0,     0,     0,     0,     2,     8,     9,    55,    78,
    87,     0,    10,     0,    14,    99,   132,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   130,   131,     0,
     0,     0,   101,   119,   100,     0,     0,     0,     0,     0,
     0,     0,    18,     0,    22,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    12,    26,    16,    53,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   117,   100,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    42,     5,    44,     6,    20,
    33,    24,    36,    55,    55,    55,    55,     0,     0,    55,
    55,     0,     0,     0,    55,    55,    55,    55,    55,    55,
    55,    55,    55,    55,    55,    55,     3,     0,     0,     0,
     0,    78,    78,    78,    78,     4,    87,    87,    87,    87,
    87,    87,    87,    87,    87,    87,     0,     7,    26,     0,
     0,     0,     0,     0,     0,     0,    53,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   118,
   139,   105,   100,   102,   100,   108,   100,   111,   100,   114,
   100,     0,   106,   100,   103,   100,   109,   100,   112,   100,
   115,   100,     0,     0,    46,    50,    33,     0,     0,     0,
    36,     0,    74,    76,    75,    77,   137,     0,     0,     0,
     0,     0,     0,    57,    56,     0,     0,     0,    61,    62,
    67,    68,    69,    70,    71,    72,    73,    55,    63,    65,
    66,     0,     0,     0,     0,    83,    84,    85,    86,    88,
    89,    90,    91,    92,    93,    94,    95,    96,    97,     0,
     0,     0,     0,     0,     0,     0,     0,    11,     0,    54,
    15,   121,   120,   122,   124,   123,   125,   126,   127,   128,
   129,     0,     0,     0,     0,     0,     0,    43,     0,     0,
    45,     0,     0,    33,    19,     0,    23,   134,   133,   135,
   136,   138,     0,     0,     0,    64,     0,     0,     0,     0,
     0,    13,     0,     0,     0,     0,     0,     0,    17,     0,
    40,    41,     0,    46,     0,     0,     0,    21,     0,    35,
    25,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    48,     0,     0,
     0,     0,    55,    55,    55,    78,    78,    78,    78,    87,
     0,     0,     0,     0,     0,     0,    39,     0,     0,     0,
     0,     0,    59,    60,    58,    79,    80,    81,    82,    98,
    26,    26,    26,    26,    26,    26,     0,     0,     0,     0,
    33,    27,    28,    29,    30,    31,    32,    46,    46,    50,
    50,    34,    47,    49,    51,    52,     0,     0
};

static const short yydefgoto[] = {     1,
    16,    17,    96,   179,    98,   187,   131,   227,   133,   231,
   186,   230,   232,    18,    49,   225,    51,   226,   308,   311,
   189,    73,    82,    94,    42,    43,    44,    45
};

static const short yypact[] = {-32768,
   396,   -98,   -79,   -76,    22,    23,-32768,-32768,   254,   254,
   254,   -34,   -29,    32,    43,-32768,-32768,-32768,   558,   236,
   348,   -52,-32768,   -23,-32768,-32768,-32768,    -8,    24,    25,
    41,    42,    50,    52,    57,    61,    68,-32768,-32768,   254,
   254,   -45,-32768,-32768,   922,   364,   529,    26,    82,    31,
    88,    33,-32768,    95,-32768,   -33,    28,    21,    21,   254,
   254,   254,    21,    21,    21,    21,    21,    21,    21,   254,
   254,    59,    96,   254,   254,   254,   254,   254,   254,   254,
   254,   101,    21,   254,   254,   254,   254,   254,   254,   254,
   254,    21,   254,   105,-32768,   948,-32768,    93,   254,   254,
   254,   254,   254,   254,   254,   254,   254,   254,    97,   109,
   334,   345,   254,   254,   254,   254,   254,   254,   254,   254,
   254,   254,   254,   254,   254,-32768,-32768,-32768,-32768,-32768,
    -5,-32768,-32768,   558,   558,   558,   558,    21,    21,   356,
   356,   538,   547,   556,   356,   356,   356,   356,   356,   356,
   356,   393,   393,   524,   558,   558,-32768,   565,   574,   583,
   592,   104,   104,   104,   104,-32768,   122,   443,   443,   443,
   443,   443,   443,   443,   443,   122,   601,-32768,   948,   254,
   254,   254,   254,   254,   254,   110,    93,   212,   119,   410,
   416,   422,   437,   469,   475,   499,   505,   511,   517,-32768,
-32768,   108,   159,   108,   159,    97,   109,    97,   109,    97,
   109,   610,   108,   159,   108,   159,    97,   109,    97,   109,
    97,   109,   619,   628,    37,    30,    -5,   254,   254,   121,
-32768,   128,-32768,-32768,-32768,-32768,   131,   523,    21,    21,
    21,    21,    21,-32768,-32768,   254,   254,   254,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,   558,-32768,-32768,
-32768,   254,   254,   254,   254,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   254,
   133,   637,   646,   655,   664,   673,   682,-32768,   134,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   254,   254,   254,   254,   254,   254,-32768,   254,   254,
-32768,   138,   691,   230,-32768,   139,-32768,   234,   234,   131,
   131,   131,   700,   709,   718,-32768,   727,   736,   745,   754,
   763,-32768,   254,   254,   254,   254,   254,   254,-32768,   772,
   928,   928,   781,    62,   790,   799,   808,-32768,   254,-32768,
-32768,   254,   254,   254,   254,   254,   254,   254,   254,   817,
   826,   835,   844,   853,   862,   254,   254,-32768,   254,   254,
   254,   871,   393,   393,   393,   104,   104,   104,   104,   443,
   254,   254,   254,   254,   254,   254,   928,   880,   889,   898,
   907,   254,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   210,   210,   210,   210,   210,   210,   254,   254,   254,   254,
   230,-32768,-32768,-32768,-32768,-32768,-32768,    62,    62,   202,
   202,-32768,-32768,-32768,-32768,-32768,   250,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -173,  -191,    67,-32768,-32768,-32768,-32768,-32768,  -334,  -296,
    69,  -132,  -130,  -129,   -10,-32768,-32768,    76
};


#define	YYLAST		1032


static const short yytable[] = {    46,
    47,   233,   234,   235,   236,   281,    19,   244,   245,   368,
   134,   135,   249,   250,   251,   252,   253,   254,   255,   256,
   257,   259,   260,   261,    27,    20,    22,    24,    21,   109,
   111,   266,   267,   268,   269,   312,    52,   270,   271,   272,
   273,   274,   275,   276,   277,   278,   279,    54,    48,   142,
   143,   144,    95,   113,   114,   115,   116,    50,   117,   152,
   153,   118,   305,   158,   159,   160,   161,   162,   163,   164,
   165,   136,   137,   168,   169,   170,   171,   172,   173,   174,
   175,    97,   177,   423,   424,   228,   229,   305,   190,   191,
   192,   193,   194,   195,   196,   197,   198,   199,   154,    99,
   155,   156,   202,   204,   206,   208,   210,   212,   213,   215,
   217,   219,   221,   223,   224,   110,   112,   309,   310,   138,
   306,   307,   350,   425,   426,   326,    23,    25,   139,    74,
   126,   100,   101,   140,   141,   128,    53,   130,   145,   146,
   147,   148,   149,   150,   151,   306,   307,    55,   102,   103,
    75,    76,    77,    78,    79,    80,    81,   104,   167,   105,
   113,   114,   115,   116,   106,   117,   188,   176,   107,   282,
   283,   284,   285,   286,   287,   108,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,   127,   203,   205,
   207,   209,   211,   129,   214,   216,   218,   220,   222,   132,
   117,   157,   113,   114,   115,   116,   166,   117,   115,   116,
   178,   117,   123,   237,   238,   288,   290,   313,   314,   422,
   239,   240,   241,   242,   291,   243,   315,   412,   413,   414,
   415,   416,   417,   317,   243,   323,   324,   325,   332,   339,
   393,   394,   395,   348,   351,   396,   397,   398,   399,   428,
   400,   327,   328,   329,   330,   289,    26,    27,     0,   121,
   122,    74,   123,    28,    29,    30,    31,    32,    33,   331,
    34,    35,    36,    37,    38,    39,   180,   181,   182,   183,
   184,   185,    75,    76,    77,    78,    79,    80,    81,   309,
   310,   340,   341,   342,   343,   344,   345,   316,   346,   347,
   113,   114,   115,   116,     0,   117,     0,     0,   113,   114,
   115,   116,     0,   117,   318,   319,   320,   321,   322,     0,
   228,   229,   360,   361,   362,   363,   364,   365,   113,   114,
   115,   116,     0,   117,   241,   242,     0,   243,   372,     0,
     0,   373,   374,   375,   376,   377,   378,   379,   380,     0,
     0,     0,    40,     0,     0,   387,   388,     0,   389,   390,
   391,    41,     0,    56,    57,     0,     0,     0,     0,     0,
   401,   402,   403,   404,   405,   406,     0,     0,     0,    58,
    59,   411,    60,    61,    62,    63,    64,    65,    66,    67,
    68,    69,    70,    71,    72,   427,   418,   419,   420,   421,
    56,    57,    83,    84,    85,    86,    87,    88,    89,    90,
    91,    92,    93,     0,     0,     0,    58,    59,     2,    60,
    61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
    71,    72,   113,   114,   115,   116,     0,   117,     0,     0,
     0,     3,   200,   119,   120,   121,   122,     0,   123,     4,
     0,     0,     0,   201,   239,   240,   241,   242,     0,   243,
     0,     5,   113,   114,   115,   116,     0,   117,     6,     0,
   124,     0,     7,     8,     9,    10,    11,    12,     0,     0,
     0,    13,     0,     0,     0,    14,     0,     0,    15,     0,
     0,   113,   114,   115,   116,     0,   117,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,   113,   114,
   115,   116,     0,   117,   113,   114,   115,   116,   292,   117,
   113,   114,   115,   116,   293,   117,     0,     0,     0,     0,
   294,    56,    57,     0,     0,   113,   114,   115,   116,     0,
   117,   113,   114,   115,   116,   295,   117,    58,    59,     0,
    60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
    70,    71,    72,     0,   258,    56,    57,   113,   114,   115,
   116,     0,   117,   113,   114,   115,   116,   296,   117,     0,
     0,    58,    59,   297,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,   113,   114,   115,
   116,     0,   117,   113,   114,   115,   116,   298,   117,   113,
   114,   115,   116,   299,   117,   113,   114,   115,   116,   300,
   117,   239,   240,   241,   242,   301,   243,   113,   114,   115,
   116,   201,   117,     0,     0,   125,   113,   114,   115,   116,
     0,   117,     0,     0,   246,   113,   114,   115,   116,     0,
   117,     0,     0,   247,   113,   114,   115,   116,     0,   117,
     0,     0,   248,   113,   114,   115,   116,     0,   117,     0,
     0,   262,   113,   114,   115,   116,     0,   117,     0,     0,
   263,   113,   114,   115,   116,     0,   117,     0,     0,   264,
   113,   114,   115,   116,     0,   117,     0,     0,   265,   113,
   114,   115,   116,     0,   117,     0,     0,   280,   113,   114,
   115,   116,     0,   117,     0,     0,   302,   113,   114,   115,
   116,     0,   117,     0,     0,   303,   113,   114,   115,   116,
     0,   117,     0,     0,   304,   113,   114,   115,   116,     0,
   117,     0,     0,   333,   113,   114,   115,   116,     0,   117,
     0,     0,   334,   113,   114,   115,   116,     0,   117,     0,
     0,   335,   113,   114,   115,   116,     0,   117,     0,     0,
   336,   113,   114,   115,   116,     0,   117,     0,     0,   337,
   113,   114,   115,   116,     0,   117,     0,     0,   338,   113,
   114,   115,   116,     0,   117,     0,     0,   349,   113,   114,
   115,   116,     0,   117,     0,     0,   352,   113,   114,   115,
   116,     0,   117,     0,     0,   353,   113,   114,   115,   116,
     0,   117,     0,     0,   354,   113,   114,   115,   116,     0,
   117,     0,     0,   355,   113,   114,   115,   116,     0,   117,
     0,     0,   356,   113,   114,   115,   116,     0,   117,     0,
     0,   357,   113,   114,   115,   116,     0,   117,     0,     0,
   358,   113,   114,   115,   116,     0,   117,     0,     0,   359,
   113,   114,   115,   116,     0,   117,     0,     0,   366,   113,
   114,   115,   116,     0,   117,     0,     0,   367,   113,   114,
   115,   116,     0,   117,     0,     0,   369,   113,   114,   115,
   116,     0,   117,     0,     0,   370,   113,   114,   115,   116,
     0,   117,     0,     0,   371,   113,   114,   115,   116,     0,
   117,     0,     0,   381,   113,   114,   115,   116,     0,   117,
     0,     0,   382,   113,   114,   115,   116,     0,   117,     0,
     0,   383,   113,   114,   115,   116,     0,   117,     0,     0,
   384,   113,   114,   115,   116,     0,   117,     0,     0,   385,
   113,   114,   115,   116,     0,   117,     0,     0,   386,   113,
   114,   115,   116,     0,   117,     0,     0,   392,   113,   114,
   115,   116,     0,   117,     0,     0,   407,   113,   114,   115,
   116,     0,   117,     0,     0,   408,   113,   114,   115,   116,
     0,   117,     0,     0,   409,   113,   114,   115,   116,     0,
   117,     0,     0,   410,   180,   181,   182,   183,   184,   185,
   119,   120,   121,   122,     0,   123,   113,   114,   115,   116,
     0,   117
};

static const short yycheck[] = {    10,
    11,   134,   135,   136,   137,   179,   105,   140,   141,   344,
    44,    45,   145,   146,   147,   148,   149,   150,   151,   152,
   153,   154,   155,   156,     4,   105,     5,     5,   105,    40,
    41,   162,   163,   164,   165,   227,     5,   167,   168,   169,
   170,   171,   172,   173,   174,   175,   176,     5,    83,    60,
    61,    62,   105,    99,   100,   101,   102,    87,   104,    70,
    71,   107,    26,    74,    75,    76,    77,    78,    79,    80,
    81,    44,    45,    84,    85,    86,    87,    88,    89,    90,
    91,   105,    93,   418,   419,    91,    92,    26,    99,   100,
   101,   102,   103,   104,   105,   106,   107,   108,    40,   108,
    42,    43,   113,   114,   115,   116,   117,   118,   119,   120,
   121,   122,   123,   124,   125,    40,    41,    88,    89,    99,
    84,    85,   314,   420,   421,   258,   105,   105,   108,    26,
   105,   108,   108,    58,    59,   105,   105,   105,    63,    64,
    65,    66,    67,    68,    69,    84,    85,   105,   108,   108,
    47,    48,    49,    50,    51,    52,    53,   108,    83,   108,
    99,   100,   101,   102,   108,   104,    74,    92,   108,   180,
   181,   182,   183,   184,   185,   108,    55,    56,    57,    58,
    59,    60,    61,    62,    63,    64,    65,   106,   113,   114,
   115,   116,   117,   106,   119,   120,   121,   122,   123,   105,
   104,   106,    99,   100,   101,   102,   106,   104,   101,   102,
   106,   104,   104,   138,   139,   106,     5,   228,   229,   411,
    99,   100,   101,   102,   106,   104,   106,   401,   402,   403,
   404,   405,   406,   106,   104,   246,   247,   248,   106,   106,
   373,   374,   375,   106,   106,   376,   377,   378,   379,     0,
   380,   262,   263,   264,   265,   187,     3,     4,    -1,   101,
   102,    26,   104,    10,    11,    12,    13,    14,    15,   280,
    17,    18,    19,    20,    21,    22,    67,    68,    69,    70,
    71,    72,    47,    48,    49,    50,    51,    52,    53,    88,
    89,   302,   303,   304,   305,   306,   307,   231,   309,   310,
    99,   100,   101,   102,    -1,   104,    -1,    -1,    99,   100,
   101,   102,    -1,   104,   239,   240,   241,   242,   243,    -1,
    91,    92,   333,   334,   335,   336,   337,   338,    99,   100,
   101,   102,    -1,   104,   101,   102,    -1,   104,   349,    -1,
    -1,   352,   353,   354,   355,   356,   357,   358,   359,    -1,
    -1,    -1,    99,    -1,    -1,   366,   367,    -1,   369,   370,
   371,   108,    -1,     8,     9,    -1,    -1,    -1,    -1,    -1,
   381,   382,   383,   384,   385,   386,    -1,    -1,    -1,    24,
    25,   392,    27,    28,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,    39,     0,   407,   408,   409,   410,
     8,     9,    55,    56,    57,    58,    59,    60,    61,    62,
    63,    64,    65,    -1,    -1,    -1,    24,    25,    23,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
    38,    39,    99,   100,   101,   102,    -1,   104,    -1,    -1,
    -1,    46,   109,    99,   100,   101,   102,    -1,   104,    54,
    -1,    -1,    -1,   109,    99,   100,   101,   102,    -1,   104,
    -1,    66,    99,   100,   101,   102,    -1,   104,    73,    -1,
   107,    -1,    77,    78,    79,    80,    81,    82,    -1,    -1,
    -1,    86,    -1,    -1,    -1,    90,    -1,    -1,    93,    -1,
    -1,    99,   100,   101,   102,    -1,   104,    55,    56,    57,
    58,    59,    60,    61,    62,    63,    64,    65,    99,   100,
   101,   102,    -1,   104,    99,   100,   101,   102,   109,   104,
    99,   100,   101,   102,   109,   104,    -1,    -1,    -1,    -1,
   109,     8,     9,    -1,    -1,    99,   100,   101,   102,    -1,
   104,    99,   100,   101,   102,   109,   104,    24,    25,    -1,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    -1,    41,     8,     9,    99,   100,   101,
   102,    -1,   104,    99,   100,   101,   102,   109,   104,    -1,
    -1,    24,    25,   109,    27,    28,    29,    30,    31,    32,
    33,    34,    35,    36,    37,    38,    39,    99,   100,   101,
   102,    -1,   104,    99,   100,   101,   102,   109,   104,    99,
   100,   101,   102,   109,   104,    99,   100,   101,   102,   109,
   104,    99,   100,   101,   102,   109,   104,    99,   100,   101,
   102,   109,   104,    -1,    -1,   107,    99,   100,   101,   102,
    -1,   104,    -1,    -1,   107,    99,   100,   101,   102,    -1,
   104,    -1,    -1,   107,    99,   100,   101,   102,    -1,   104,
    -1,    -1,   107,    99,   100,   101,   102,    -1,   104,    -1,
    -1,   107,    99,   100,   101,   102,    -1,   104,    -1,    -1,
   107,    99,   100,   101,   102,    -1,   104,    -1,    -1,   107,
    99,   100,   101,   102,    -1,   104,    -1,    -1,   107,    99,
   100,   101,   102,    -1,   104,    -1,    -1,   107,    99,   100,
   101,   102,    -1,   104,    -1,    -1,   107,    99,   100,   101,
   102,    -1,   104,    -1,    -1,   107,    99,   100,   101,   102,
    -1,   104,    -1,    -1,   107,    99,   100,   101,   102,    -1,
   104,    -1,    -1,   107,    99,   100,   101,   102,    -1,   104,
    -1,    -1,   107,    99,   100,   101,   102,    -1,   104,    -1,
    -1,   107,    99,   100,   101,   102,    -1,   104,    -1,    -1,
   107,    99,   100,   101,   102,    -1,   104,    -1,    -1,   107,
    99,   100,   101,   102,    -1,   104,    -1,    -1,   107,    99,
   100,   101,   102,    -1,   104,    -1,    -1,   107,    99,   100,
   101,   102,    -1,   104,    -1,    -1,   107,    99,   100,   101,
   102,    -1,   104,    -1,    -1,   107,    99,   100,   101,   102,
    -1,   104,    -1,    -1,   107,    99,   100,   101,   102,    -1,
   104,    -1,    -1,   107,    99,   100,   101,   102,    -1,   104,
    -1,    -1,   107,    99,   100,   101,   102,    -1,   104,    -1,
    -1,   107,    99,   100,   101,   102,    -1,   104,    -1,    -1,
   107,    99,   100,   101,   102,    -1,   104,    -1,    -1,   107,
    99,   100,   101,   102,    -1,   104,    -1,    -1,   107,    99,
   100,   101,   102,    -1,   104,    -1,    -1,   107,    99,   100,
   101,   102,    -1,   104,    -1,    -1,   107,    99,   100,   101,
   102,    -1,   104,    -1,    -1,   107,    99,   100,   101,   102,
    -1,   104,    -1,    -1,   107,    99,   100,   101,   102,    -1,
   104,    -1,    -1,   107,    99,   100,   101,   102,    -1,   104,
    -1,    -1,   107,    99,   100,   101,   102,    -1,   104,    -1,
    -1,   107,    99,   100,   101,   102,    -1,   104,    -1,    -1,
   107,    99,   100,   101,   102,    -1,   104,    -1,    -1,   107,
    99,   100,   101,   102,    -1,   104,    -1,    -1,   107,    99,
   100,   101,   102,    -1,   104,    -1,    -1,   107,    99,   100,
   101,   102,    -1,   104,    -1,    -1,   107,    99,   100,   101,
   102,    -1,   104,    -1,    -1,   107,    99,   100,   101,   102,
    -1,   104,    -1,    -1,   107,    99,   100,   101,   102,    -1,
   104,    -1,    -1,   107,    67,    68,    69,    70,    71,    72,
    99,   100,   101,   102,    -1,   104,    99,   100,   101,   102,
    -1,   104
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 192 "bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

int
yyparse(YYPARSE_PARAM)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 3:
#line 191 "parser.y"
{ memmove( &yyval, &yyval, sizeof(yyval) ); printf("\n"); ;
    break;}
case 4:
#line 192 "parser.y"
{ printf("\n"); ;
    break;}
case 5:
#line 193 "parser.y"
{ printf("\n"); g_scene->AddLight( g_light ); g_light = NULL; ;
    break;}
case 6:
#line 194 "parser.y"
{ printf("\n"); g_scene->AddMaterial( g_material ); ;
    break;}
case 7:
#line 195 "parser.y"
{ printf("\n"); ;
    break;}
case 8:
#line 196 "parser.y"
{ printf("\n"); ;
    break;}
case 9:
#line 197 "parser.y"
{ printf("\n"); ;
    break;}
case 10:
#line 202 "parser.y"
{
                g_mesh = new rawray::TriangleMesh();
                #ifdef VERBOSE_NEW
                printf( "MESH: %x", g_mesh );
                #endif
                //((TriangleMesh*)pObj)->CreateSingleTriangle();
            ;
    break;}
case 11:
#line 210 "parser.y"
{
                g_scene->AddMesh( g_mesh );
                rawray::AddTrianglesOfMesh();
            ;
    break;}
case 12:
#line 216 "parser.y"
{
                g_mesh = new rawray::TriangleMesh();
                #ifdef VERBOSE_NEW
                printf( "MESH: %x", g_mesh );
                #endif
                
                //g_objectMap[$2] = pObj;
                //((TriangleMesh*)pObj)->CreateSingleTriangle();
            ;
    break;}
case 13:
#line 226 "parser.y"
{
                g_scene->AddMesh( g_mesh );
                rawray::AddTrianglesOfMesh();
            ;
    break;}
case 14:
#line 232 "parser.y"
{
                g_mesh = new rawray::TriangleMesh();
                #ifdef VERBOSE_NEW
                printf( "MESH: %x", g_mesh );
                #endif
            ;
    break;}
case 15:
#line 239 "parser.y"
{
                g_scene->AddMesh( g_mesh );
                rawray::AddTrianglesOfMesh();
            ;
    break;}
case 16:
#line 245 "parser.y"
{
                g_mesh = new rawray::TriangleMesh();
                #ifdef VERBOSE_NEW
                printf( "MESH: %x", g_mesh );
                #endif
                
                //g_objectMap[$2] = pObj;
            ;
    break;}
case 17:
#line 254 "parser.y"
{
                g_scene->AddMesh( g_mesh );
                rawray::AddTrianglesOfMesh();
            ;
    break;}
case 18:
#line 260 "parser.y"
{
                g_obj = new rawray::Sphere( math::Vector3(0),
                                            1.0f,
                                            g_material );
                                            
                #ifdef VERBOSE_NEW
                printf( "SPHERE: %x", g_obj );
                #endif
            ;
    break;}
case 19:
#line 270 "parser.y"
{
                g_scene->AddObject( g_obj );
                g_obj = NULL;
            ;
    break;}
case 20:
#line 276 "parser.y"
{
                g_obj = new rawray::Sphere( math::Vector3(0),
                                            1.0f,
                                            g_material );
                
                #ifdef VERBOSE_NEW
                printf( "SPHERE: %x", g_obj );
                #endif
                
                g_objectMap[yyvsp[-1].str] = g_obj;
            ;
    break;}
case 21:
#line 288 "parser.y"
{
                g_scene->AddObject( g_obj );
                g_obj = NULL;
            ;
    break;}
case 22:
#line 294 "parser.y"
{
                g_obj = new rawray::BLPatch( g_material );
                                             
                #ifdef VERBOSE_NEW
                printf( "BLPATCH: %d", g_obj );
                #endif
            ;
    break;}
case 23:
#line 302 "parser.y"
{
                g_scene->AddObject( g_obj );
                g_obj = NULL;
            ;
    break;}
case 24:
#line 308 "parser.y"
{
                g_obj = new rawray::BLPatch( g_material );
                #ifdef VERBOSE_NEW
                printf( "BLPATCH: %d", g_obj );
                #endif
                
                g_objectMap[yyvsp[-1].str] = g_obj;
            ;
    break;}
case 25:
#line 317 "parser.y"
{
                g_scene->AddObject( g_obj );
                g_obj = NULL;
            ;
    break;}
case 27:
#line 343 "parser.y"
{ printf( "Triangles not supported" ); ;
    break;}
case 28:
#line 345 "parser.y"
{ printf( "Triangles not supported" ); ;
    break;}
case 29:
#line 347 "parser.y"
{ printf( "Triangles not supported" ); ;
    break;}
case 30:
#line 349 "parser.y"
{ printf( "Triangles not supported" ); ;
    break;}
case 31:
#line 351 "parser.y"
{ printf( "Triangles not supported" ); ;
    break;}
case 32:
#line 353 "parser.y"
{ printf( "Triangles not supported" ); ;
    break;}
case 34:
#line 358 "parser.y"
{ ((rawray::Sphere*)g_obj)->SetCenter( math::Vector3(yyvsp[-5].real,yyvsp[-3].real,yyvsp[-1].real) ); ;
    break;}
case 35:
#line 360 "parser.y"
{ ((rawray::Sphere*)g_obj)->SetRadius( yyvsp[-1].real ); ;
    break;}
case 37:
#line 388 "parser.y"
{ /*PushMatrix();*/ ;
    break;}
case 38:
#line 390 "parser.y"
{ /*PopMatrix();*/ ;
    break;}
case 39:
#line 392 "parser.y"
{ /*Rotate($2, $4, $6, $8);*/ ;
    break;}
case 40:
#line 394 "parser.y"
{ /*Translate($2, $4, $6);*/ ;
    break;}
case 41:
#line 396 "parser.y"
{ /*Scale($2, $4, $6);*/ ;
    break;}
case 42:
#line 400 "parser.y"
{
                printf( "new point light\n" ); 
                g_light = new rawray::Light();
                
                #ifdef VERBOSE_NEW
                printf( "LIGHT: %x\n", g_light );
                #endif
            ;
    break;}
case 44:
#line 413 "parser.y"
{
                printf( "new lambert material\n" ); 
                g_material = new rawray::Lambert();
                
                #ifdef VERBOSE_NEW
                printf( "LAMVERT: %x\n", g_material );
                #endif
            ;
    break;}
case 47:
#line 427 "parser.y"
{ printf( "pos = %f, %f, %f\n", yyvsp[-5].real, yyvsp[-3].real, yyvsp[-1].real ); g_light->SetPosition( math::Vector3(yyvsp[-5].real,yyvsp[-3].real,yyvsp[-1].real) ); ;
    break;}
case 48:
#line 429 "parser.y"
{ printf( "wattage = %f\n", yyvsp[-1].real ); g_light->SetWattage( yyvsp[-1].real ); ;
    break;}
case 49:
#line 431 "parser.y"
{ printf( "color = %f, %f, %f\n", yyvsp[-5].real, yyvsp[-3].real, yyvsp[-1].real ); g_light->SetColor( math::Vector3(yyvsp[-5].real,yyvsp[-3].real,yyvsp[-1].real) ); ;
    break;}
case 51:
#line 436 "parser.y"
{ printf( "diffuse = %f, %f, %f\n", yyvsp[-5].real, yyvsp[-3].real, yyvsp[-1].real ); ((rawray::Lambert*)g_material)->SetDiffuse( math::Vector3(yyvsp[-5].real,yyvsp[-3].real,yyvsp[-1].real) ); ;
    break;}
case 52:
#line 438 "parser.y"
{ printf( "ambient = %f, %f, %f\n", yyvsp[-5].real, yyvsp[-3].real, yyvsp[-1].real ); ((rawray::Lambert*)g_material)->SetAmbient( math::Vector3(yyvsp[-5].real,yyvsp[-3].real,yyvsp[-1].real) ); ;
    break;}
case 54:
#line 443 "parser.y"
{
                yyvsp[0].str[strlen(yyvsp[0].str)-1]=0;
                printf( "Loading Mesh: '%s'\n", yyvsp[0].str+1 );
                g_mesh->LoadOBJ( yyvsp[0].str+1 );
            ;
    break;}
case 56:
#line 452 "parser.y"
{ printf( "height = %d\n", yyvsp[-1].integer ); g_image->Resize( g_image->GetWidth(), rawray::options::global::win_height = yyvsp[-1].integer ); ;
    break;}
case 57:
#line 454 "parser.y"
{ printf( "width = %d\n", yyvsp[-1].integer ); g_image->Resize( rawray::options::global::win_width = yyvsp[-1].integer, g_image->GetHeight() ); ;
    break;}
case 58:
#line 456 "parser.y"
{ printf( "gl bg color = %f, %f, %f\n", yyvsp[-5].real, yyvsp[-3].real, yyvsp[-1].real ); rawray::options::global::gl_bg_color = math::Vector3(yyvsp[-5].real,yyvsp[-3].real,yyvsp[-1].real); ;
    break;}
case 59:
#line 458 "parser.y"
{ printf( "img bg color = %f, %f, %f\n", yyvsp[-5].real, yyvsp[-3].real, yyvsp[-1].real ); rawray::options::global::img_bg_color = math::Vector3(yyvsp[-5].real,yyvsp[-3].real,yyvsp[-1].real); ;
    break;}
case 60:
#line 460 "parser.y"
{ printf( "img fg color = %f, %f, %f\n", yyvsp[-5].real, yyvsp[-3].real, yyvsp[-1].real ); rawray::options::global::img_fg_color = math::Vector3(yyvsp[-5].real,yyvsp[-3].real,yyvsp[-1].real); ;
    break;}
case 61:
#line 462 "parser.y"
{ printf( "gl sphere sections = %d\n", rawray::options::global::gl_sphere_sections = yyvsp[-1].integer ); ;
    break;}
case 62:
#line 464 "parser.y"
{ printf( "num threads = %d\n", rawray::options::global::num_threads = yyvsp[-1].integer ); ;
    break;}
case 63:
#line 466 "parser.y"
{ printf( "triangle test = barycentric\n", rawray::options::global::triangle_intersection_algorithm = rawray::options::BARYCENTRIC ); ;
    break;}
case 64:
#line 468 "parser.y"
{ printf( "triangle test = barycentric projection\n", rawray::options::global::triangle_intersection_algorithm = rawray::options::BARYCENTRIC_PROJECTION ); ;
    break;}
case 65:
#line 470 "parser.y"
{ printf( "triangle test = plucker\n", rawray::options::global::triangle_intersection_algorithm = rawray::options::PLUCKER ); ;
    break;}
case 66:
#line 472 "parser.y"
{ printf( "triangle test = moller\n", rawray::options::global::triangle_intersection_algorithm = rawray::options::MOLLER ); ;
    break;}
case 67:
#line 474 "parser.y"
{ printf( "render x block = %d\n", rawray::options::global::render_x_block = yyvsp[-1].integer ); ;
    break;}
case 68:
#line 476 "parser.y"
{ printf( "render y block = %d\n", rawray::options::global::render_y_block = yyvsp[-1].integer ); ;
    break;}
case 69:
#line 478 "parser.y"
{ printf( "render handler sleep = %d\n", rawray::options::global::render_handler_sleep = yyvsp[-1].integer ); ;
    break;}
case 70:
#line 480 "parser.y"
{ printf( "render thread sleep = %d\n", rawray::options::global::render_thread_sleep = yyvsp[-1].integer ); ;
    break;}
case 71:
#line 482 "parser.y"
{ printf( "render spinlock sleep = %d\n", rawray::options::global::render_spinlock_sleep = yyvsp[-1].integer ); ;
    break;}
case 72:
#line 484 "parser.y"
{ printf( "gaussian blur max = %f\n", rawray::options::global::gaussian_blur_max = yyvsp[-1].real ); ;
    break;}
case 73:
#line 486 "parser.y"
{ printf( "gaussian blur sigma = %f\n", rawray::options::global::gaussian_blur_sigma = yyvsp[-1].real ); ;
    break;}
case 74:
#line 488 "parser.y"
{ printf( "enabling rendering of lights in gl\n" ); rawray::options::global::gl_render_lights = true; ;
    break;}
case 75:
#line 490 "parser.y"
{ printf( "disabling rendering of lights in gl\n" ); rawray::options::global::gl_render_lights = false; ;
    break;}
case 76:
#line 492 "parser.y"
{ printf( "enabling headless mode\n" ); rawray::options::global::headless = true; ;
    break;}
case 77:
#line 494 "parser.y"
{ printf( "disabling headless mode\n" ); rawray::options::global::headless = false; ;
    break;}
case 79:
#line 499 "parser.y"
{ printf( "camera pos = %f, %f, %f\n", yyvsp[-5].real, yyvsp[-3].real, yyvsp[-1].real ); g_camera->SetEye( rawray::options::camera::eye = math::Vector3(yyvsp[-5].real,yyvsp[-3].real,yyvsp[-1].real) ); ;
    break;}
case 80:
#line 501 "parser.y"
{ printf( "camera dir = %f, %f, %f\n", yyvsp[-5].real, yyvsp[-3].real, yyvsp[-1].real ); g_camera->SetViewDir( rawray::options::camera::view = math::Vector3(yyvsp[-5].real,yyvsp[-3].real,yyvsp[-1].real) ); ;
    break;}
case 81:
#line 503 "parser.y"
{ printf( "camera look at = %f, %f, %f\n", yyvsp[-5].real, yyvsp[-3].real, yyvsp[-1].real ); g_camera->SetLookAt( rawray::options::camera::lookat = math::Vector3(yyvsp[-5].real,yyvsp[-3].real,yyvsp[-1].real) ); ;
    break;}
case 82:
#line 505 "parser.y"
{ printf( "camera up = %f, %f, %f\n", yyvsp[-5].real, yyvsp[-3].real, yyvsp[-1].real ); g_camera->SetUp( rawray::options::camera::up = math::Vector3(yyvsp[-5].real,yyvsp[-3].real,yyvsp[-1].real) ); ;
    break;}
case 83:
#line 507 "parser.y"
{ printf( "camera fov = %f\n", yyvsp[-1].real ); g_camera->SetFOV( rawray::options::camera::fov = yyvsp[-1].real ); ;
    break;}
case 84:
#line 509 "parser.y"
{ printf( "camera aspect ratio = %f\n", yyvsp[-1].real ); g_camera->SetAspect( rawray::options::camera::aspect = yyvsp[-1].real ); ;
    break;}
case 85:
#line 511 "parser.y"
{ printf( "camera min draw = %f\n", yyvsp[-1].real ); g_camera->SetMinDraw( rawray::options::camera::min_draw = yyvsp[-1].real ); ;
    break;}
case 86:
#line 513 "parser.y"
{ printf( "camera max draw = %f\n", yyvsp[-1].real ); g_camera->SetMaxDraw( rawray::options::camera::max_draw = yyvsp[-1].real ); ;
    break;}
case 88:
#line 518 "parser.y"
{ printf( "spiral num spheres = %d\n", rawray::options::p0::spiral_num_spheres = yyvsp[-1].integer ); ;
    break;}
case 89:
#line 520 "parser.y"
{ printf( "spiral radius = %f\n", rawray::options::p0::spiral_radius = yyvsp[-1].real ); ;
    break;}
case 90:
#line 522 "parser.y"
{ printf( "lorenz dt = %f\n", rawray::options::p0::lorenz_dt = yyvsp[-1].real ); ;
    break;}
case 91:
#line 524 "parser.y"
{ printf( "lorenz min distance = %f\n", rawray::options::p0::lorenz_min_distance = yyvsp[-1].real ); ;
    break;}
case 92:
#line 526 "parser.y"
{ printf( "lorenz max distance = %f\n", rawray::options::p0::lorenz_max_distance = yyvsp[-1].real ); ;
    break;}
case 93:
#line 528 "parser.y"
{ printf( "lorenz sigma = %f\n", rawray::options::p0::lorenz_sigma = yyvsp[-1].real ); ;
    break;}
case 94:
#line 530 "parser.y"
{ printf( "lorenz rho = %f\n", rawray::options::p0::lorenz_rho = yyvsp[-1].real ); ;
    break;}
case 95:
#line 532 "parser.y"
{ printf( "lorenz beta = %f\n", rawray::options::p0::lorenz_beta = yyvsp[-1].real ); ;
    break;}
case 96:
#line 534 "parser.y"
{ printf( "lorenz radius = %f\n", rawray::options::p0::lorenz_radius = yyvsp[-1].real ); ;
    break;}
case 97:
#line 536 "parser.y"
{ printf( "lorenz num spheres = %d\n", rawray::options::p0::lorenz_num_spheres = yyvsp[-1].integer ); ;
    break;}
case 98:
#line 538 "parser.y"
{ printf( "lorenz start = %f, %f, %f\n", yyvsp[-5].real, yyvsp[-3].real, yyvsp[-1].real ); rawray::options::p0::lorenz_start = math::Vector3(yyvsp[-5].real,yyvsp[-3].real,yyvsp[-1].real); ;
    break;}
case 99:
#line 541 "parser.y"
{ yyval.real = yyvsp[0].real; ;
    break;}
case 100:
#line 542 "parser.y"
{ yyval.real = yyvsp[0].integer; ;
    break;}
case 101:
#line 543 "parser.y"
{ yyval.real = yyvsp[0].real; ;
    break;}
case 102:
#line 545 "parser.y"
{ yyval.real = yyvsp[-2].real + yyvsp[0].real; ;
    break;}
case 103:
#line 546 "parser.y"
{ yyval.real = yyvsp[-2].integer + yyvsp[0].real; ;
    break;}
case 104:
#line 547 "parser.y"
{ yyval.real = yyvsp[-2].real + yyvsp[0].integer; ;
    break;}
case 105:
#line 549 "parser.y"
{ yyval.real = yyvsp[-2].real - yyvsp[0].real; ;
    break;}
case 106:
#line 550 "parser.y"
{ yyval.real = yyvsp[-2].integer - yyvsp[0].real; ;
    break;}
case 107:
#line 551 "parser.y"
{ yyval.real = yyvsp[-2].real - yyvsp[0].integer; ;
    break;}
case 108:
#line 553 "parser.y"
{ yyval.real = yyvsp[-2].real * yyvsp[0].real; ;
    break;}
case 109:
#line 554 "parser.y"
{ yyval.real = yyvsp[-2].integer * yyvsp[0].real; ;
    break;}
case 110:
#line 555 "parser.y"
{ yyval.real = yyvsp[-2].real * yyvsp[0].integer; ;
    break;}
case 111:
#line 557 "parser.y"
{ yyval.real = yyvsp[-2].real / yyvsp[0].real; ;
    break;}
case 112:
#line 558 "parser.y"
{ yyval.real = yyvsp[-2].integer / yyvsp[0].real; ;
    break;}
case 113:
#line 559 "parser.y"
{ yyval.real = yyvsp[-2].real / yyvsp[0].integer; ;
    break;}
case 114:
#line 561 "parser.y"
{ yyval.real = pow (float (yyvsp[-2].real), float (yyvsp[0].real)); ;
    break;}
case 115:
#line 562 "parser.y"
{ yyval.real = pow (float (yyvsp[-2].integer), float (yyvsp[0].real)); ;
    break;}
case 116:
#line 563 "parser.y"
{ yyval.real = pow (float (yyvsp[-2].real), float (yyvsp[0].integer)); ;
    break;}
case 117:
#line 565 "parser.y"
{ yyval.real = -yyvsp[0].real; ;
    break;}
case 118:
#line 566 "parser.y"
{ yyval.real = yyvsp[-1].real; ;
    break;}
case 120:
#line 570 "parser.y"
{yyval.real = sin(yyvsp[-1].real); ;
    break;}
case 121:
#line 571 "parser.y"
{yyval.real = cos(yyvsp[-1].real); ;
    break;}
case 122:
#line 572 "parser.y"
{yyval.real = tan(yyvsp[-1].real); ;
    break;}
case 123:
#line 573 "parser.y"
{yyval.real = asin(yyvsp[-1].real); ;
    break;}
case 124:
#line 574 "parser.y"
{yyval.real = acos(yyvsp[-1].real); ;
    break;}
case 125:
#line 575 "parser.y"
{yyval.real = atan(yyvsp[-1].real); ;
    break;}
case 126:
#line 576 "parser.y"
{yyval.real = log(yyvsp[-1].real); ;
    break;}
case 127:
#line 577 "parser.y"
{yyval.real = log10(yyvsp[-1].real); ;
    break;}
case 128:
#line 578 "parser.y"
{yyval.real = exp(yyvsp[-1].real); ;
    break;}
case 129:
#line 579 "parser.y"
{yyval.real = sqrt(yyvsp[-1].real); ;
    break;}
case 130:
#line 583 "parser.y"
{ yyval.real = 2.718281828459f; ;
    break;}
case 131:
#line 584 "parser.y"
{ yyval.real = 3.141592653589793f; ;
    break;}
case 132:
#line 587 "parser.y"
{ yyval.integer = yyvsp[0].integer; ;
    break;}
case 133:
#line 588 "parser.y"
{ yyval.integer = yyvsp[-2].integer + yyvsp[0].integer; ;
    break;}
case 134:
#line 589 "parser.y"
{ yyval.integer = yyvsp[-2].integer - yyvsp[0].integer; ;
    break;}
case 135:
#line 590 "parser.y"
{ yyval.integer = yyvsp[-2].integer * yyvsp[0].integer; ;
    break;}
case 136:
#line 591 "parser.y"
{ yyval.integer = yyvsp[-2].integer / yyvsp[0].integer; ;
    break;}
case 137:
#line 592 "parser.y"
{ yyval.integer = -yyvsp[0].integer; ;
    break;}
case 138:
#line 593 "parser.y"
{ yyval.integer = (int)pow((float)yyvsp[-2].integer, (float)yyvsp[0].integer); ;
    break;}
case 139:
#line 594 "parser.y"
{ yyval.integer = yyvsp[-1].integer; ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 487 "bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 598 "parser.y"

//Additional C code

namespace rawray {

void AddTrianglesOfMesh() {
    for( uint32 i=0; i<g_mesh->GetNumTriangles(); ++i ) {
        Triangle* t = rawray::TriangleFactory::NewTriangle( *g_mesh, i, g_material );
        g_scene->AddObject( t );
        
        #ifdef VERBOSE_NEW
        printf( "TRIANGLE: %x\n", t );
        #endif
    }
    
    g_mesh = NULL;
}

void SetConfigSources(Scene* scene, Camera* cam, Image* img) {
    g_scene = scene;
    g_camera = cam;
    g_image = img;
}

bool ConfigParser(const char* filename) {
#ifdef YYDEBUG
#if YYDEBUG==1
    yydebug = 1;
#endif
#endif
    
    if( !g_scene || !g_camera || !g_image )
        return false;
    
    yyin = fopen( filename, "r" );
    if( !yyin )
        return false;

    yyparse();
    fclose( yyin );

    printf( "Parse of '%s' success\n", filename );
    return true;
}

} // namespace rawray
