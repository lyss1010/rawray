#line 2 "lexer.yy.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.85 95/04/24 10:48:47 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
class istream;
//#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 46
#define YY_END_OF_BUFFER 47
static yyconst short int yy_accept[246] =
    {   0,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   47,   45,   43,   44,   43,   45,   45,   42,
       43,   37,   45,   36,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   41,   46,   43,   43,   46,   46,   42,
       43,   37,   46,   36,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   41,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   43,
       44,   40,    0,   42,   40,   37,    0,   39,   37,   36,
        0,    0,    0,    0,    0,   11,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   38,    0,    0,    0,
        0,    0,   37,    0,    0,    0,    7,    0,    0,   12,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   22,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    1,    9,    0,    0,
        8,    0,    2,    0,    0,    3,    0,    0,    0,    0,
       23,    0,   19,    0,    0,    0,    0,   26,    0,    0,
        0,   33,    0,    4,    5,    6,    0,    0,    0,    0,
        0,   10,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   31,    0,    0,    0,   13,   24,   30,    0,
       16,    0,    0,   14,    0,    0,    0,    0,    0,    0,
       35,    0,   18,   13,   32,   15,   17,    0,    0,    0,
        0,    0,    0,   34,   21,    0,   28,   27,    0,   29,
       20,    0,    0,   25,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    1,    1,    1,    1,    6,
        6,    9,   10,   11,   10,   12,   13,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   15,    1,    1,
        6,    1,    1,    1,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   27,   27,
        1,   16,    1,    1,   17,    1,   18,   19,   20,   21,

       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       27,   27,    6,    1,   42,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[43] =
    {   0,
        1,    1,    2,    1,    3,    1,    3,    1,    1,    1,
        1,    3,    3,    3,    3,    3,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    1
    } ;

static yyconst short int yy_base[249] =
    {   0,
        0,    0,   42,    0,   62,    0,   85,  108,   68,   88,
      129,  150,  574,  575,   94,  575,  119,  133,    0,    0,
      140,   93,  154,  138,  141,   72,  163,  544,  140,  540,
      545,  113,  552,  575,  575,  177,  189,  182,    0,    0,
      194,  105,  204,  189,  182,  537,  210,  539,  545,  536,
      185,  539,  163,  546,  537,  575,  530,  190,  197,  528,
      534,  204,  533,  199,  540,  195,  525,  204,  538,  233,
      575,  241,  548,    0,  245,  238,  544,  575,  239,  243,
      521,  526,  533,  520,  513,  262,  534,  514,  514,  517,
      266,  513,  512,  270,  498,  500,  486,  486,  496,  483,

      481,  480,  458,  230,  457,  274,  467,  466,  458,  206,
      440,  215,  107,  437,  448,  458,  454,  421,  422,  418,
      423,  278,  427,  282,  418,  408,  286,  290,  407,  294,
      298,  403,  384,  302,  398,  389,  392,  368,  306,  373,
      310,  314,  357,  367,  366,  354,  318,  344,  356,  341,
      322,  343,  326,  330,  334,  330,  338,  342,  343,  320,
      346,  324,  350,  314,  354,  358,  321,  316,  318,  308,
      362,  312,  366,  308,  299,  279,  276,  370,  291,  374,
      270,  378,  263,  382,  386,  390,  279,  264,  394,  398,
      267,  402,  406,  248,  257,  410,  259,  252,  238,  227,

      230,  234,  414,  418,  212,  422,  426,  430,  434,  438,
      442,  446,  450,  454,  191,  184,  170,  173,  154,  135,
      458,  462,  466,  470,  474,  478,  482,  486,  105,  490,
      494,  107,  498,  502,  506,  510,  514,  518,   95,  522,
      526,   79,  530,  534,  575,   85,  539,  541
    } ;

static yyconst short int yy_def[249] =
    {   0,
      245,    1,  245,    3,    3,    5,    3,    3,    3,    3,
        3,    3,  245,  245,  245,  245,  245,  245,  246,  247,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  246,  247,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  248,  247,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,

      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  248,  248,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,

      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,    0,  245,  245,  245
    } ;

static yyconst short int yy_nxt[618] =
    {   0,
       14,   15,   16,   17,   15,   18,   19,   20,   18,   18,
       21,   22,   23,   24,   14,   18,   14,   25,   14,   26,
       14,   27,   14,   28,   14,   14,   14,   14,   29,   30,
       14,   14,   31,   14,   14,   32,   33,   14,   14,   14,
       14,   34,   35,   36,   16,   37,   36,   38,   39,   40,
       38,   38,   41,   42,   43,   44,   35,   38,   35,   45,
       35,   46,   35,   47,   35,   48,   49,   50,   35,   35,
       51,   35,   35,   35,   52,   35,   35,   53,   54,   35,
       35,   55,   35,   56,   57,   35,   35,   35,   73,   84,
       58,   35,   35,   35,   59,   70,   66,   70,   70,   60,

       61,   35,   62,   85,   70,   63,   76,   35,   35,   35,
       35,   35,   35,   35,   77,  243,   66,   64,   76,  242,
       70,   71,   70,   70,   65,   62,   77,   35,   63,   70,
      239,   35,   35,   35,   72,  150,   72,   72,   95,  236,
       64,   75,  122,   75,   75,   96,   97,   65,   67,   79,
       70,   80,   35,   35,   35,   72,  233,   72,   72,   77,
       81,   68,   78,   69,   86,   90,   86,   86,   35,   67,
       91,   92,   87,   35,   35,   35,   82,   83,   70,  232,
       70,   70,   68,   72,   69,   72,   72,   70,   95,   35,
       70,   71,   70,   70,  231,   75,   97,   75,   75,   70,

       79,   81,   80,   88,   70,   72,  230,   72,   72,  229,
       77,   86,   78,   86,   86,   91,   92,   82,   83,   87,
       91,  104,   94,   81,   94,   91,  112,  228,  105,   94,
      110,  146,  149,  108,   70,  114,   70,   70,  128,   82,
       83,  147,   72,   70,   72,   72,   75,  222,   75,   75,
       88,   76,   76,  128,   79,   70,   80,  220,  219,   77,
       77,  140,  218,   86,   77,   86,   86,  127,  217,  127,
      127,  130,  216,  130,  130,  142,  215,  142,  142,  157,
      213,  157,  157,  158,  212,  158,  158,  127,  210,  127,
      127,  161,  207,  161,  161,  130,  206,  130,  130,  163,

      205,  163,  163,  166,  204,  166,  166,  171,  202,  171,
      171,  173,  201,  173,  173,  142,  200,  142,  142,  178,
      199,  178,  178,  182,  198,  182,  182,  184,  197,  184,
      184,  185,  196,  185,  185,  186,  195,  186,  186,  157,
      194,  157,  157,  158,  193,  158,  158,  161,  191,  161,
      161,  163,  190,  163,  163,  192,  189,  192,  192,  166,
      188,  166,  166,  171,  187,  171,  171,  173,  183,  173,
      173,  178,  181,  178,  178,  203,  180,  203,  203,  182,
      179,  182,  182,  184,  177,  184,  184,  185,  176,  185,
      185,  186,  175,  186,  186,  208,  174,  208,  208,  209,

      172,  209,  209,  192,  170,  192,  192,  211,  169,  211,
      211,  214,  168,  214,  214,  203,  167,  203,  203,  221,
      165,  221,  221,  223,  164,  223,  223,  224,  162,  224,
      224,  208,  160,  208,  208,  209,  159,  209,  209,  225,
      123,  225,  225,  211,  156,  211,  211,  226,  155,  226,
      226,  227,  154,  227,  227,  214,  153,  214,  214,  221,
      117,  221,  221,  234,  117,  234,  234,  223,  152,  223,
      223,  224,  151,  224,  224,  225,  148,  225,  225,  226,
      145,  226,  226,  227,  144,  227,  227,  235,  143,  235,
      235,  237,  141,  237,  237,  238,  139,  238,  238,  240,

      138,  240,  240,  234,  137,  234,  234,  235,  136,  235,
      235,  241,  135,  241,  241,  237,  134,  237,  237,  238,
      133,  238,  238,  240,  132,  240,  240,  241,  131,  241,
      241,  244,  129,  244,  244,  244,  128,  244,  244,   74,
      126,   74,   74,  116,  116,  125,  124,  123,  122,  121,
      120,  119,  118,   87,  117,  115,  113,  111,  109,  107,
      106,  103,  102,   98,   94,  101,  100,   99,   85,   98,
       94,   93,   89,  245,   13,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,

      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245
    } ;

static yyconst short int yy_chk[618] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    5,    5,    5,    5,  246,   26,
        5,    9,    9,    9,    5,   15,    9,   15,   15,    5,

        5,    5,    7,   26,   15,    7,   22,    9,    7,    7,
        7,   10,   10,   10,   22,  242,   10,    7,   42,  239,
       17,   17,   17,   17,    7,    8,   42,   10,    8,   17,
      232,    8,    8,    8,   18,  113,   18,   18,   32,  229,
        8,   21,  113,   21,   21,   32,   32,    8,   11,   24,
       21,   24,   11,   11,   11,   23,  220,   23,   23,   24,
       25,   11,   23,   11,   27,   29,   27,   27,   11,   12,
       29,   29,   27,   12,   12,   12,   25,   25,   36,  219,
       36,   36,   12,   38,   12,   38,   38,   36,   53,   12,
       37,   37,   37,   37,  218,   41,   53,   41,   41,   37,

       44,   45,   44,   27,   41,   43,  217,   43,   43,  216,
       44,   47,   43,   47,   47,   51,   51,   45,   45,   47,
       58,   58,   59,   62,   64,   66,   66,  215,   59,   68,
       64,  110,  112,   62,   70,   68,   70,   70,  112,   62,
       62,  110,   72,   70,   72,   72,   75,  205,   75,   75,
       47,   76,   79,  104,   80,   75,   80,  202,  201,   76,
       79,  104,  200,   86,   80,   86,   86,   91,  199,   91,
       91,   94,  198,   94,   94,  106,  197,  106,  106,  122,
      195,  122,  122,  124,  194,  124,  124,  127,  191,  127,
      127,  128,  188,  128,  128,  130,  187,  130,  130,  131,

      183,  131,  131,  134,  181,  134,  134,  139,  179,  139,
      139,  141,  177,  141,  141,  142,  176,  142,  142,  147,
      175,  147,  147,  151,  174,  151,  151,  153,  172,  153,
      153,  154,  170,  154,  154,  155,  169,  155,  155,  157,
      168,  157,  157,  158,  167,  158,  158,  161,  164,  161,
      161,  163,  162,  163,  163,  165,  160,  165,  165,  166,
      159,  166,  166,  171,  156,  171,  171,  173,  152,  173,
      173,  178,  150,  178,  178,  180,  149,  180,  180,  182,
      148,  182,  182,  184,  146,  184,  184,  185,  145,  185,
      185,  186,  144,  186,  186,  189,  143,  189,  189,  190,

      140,  190,  190,  192,  138,  192,  192,  193,  137,  193,
      193,  196,  136,  196,  196,  203,  135,  203,  203,  204,
      133,  204,  204,  206,  132,  206,  206,  207,  129,  207,
      207,  208,  126,  208,  208,  209,  125,  209,  209,  210,
      123,  210,  210,  211,  121,  211,  211,  212,  120,  212,
      212,  213,  119,  213,  213,  214,  118,  214,  214,  221,
      117,  221,  221,  222,  116,  222,  222,  223,  115,  223,
      223,  224,  114,  224,  224,  225,  111,  225,  225,  226,
      109,  226,  226,  227,  108,  227,  227,  228,  107,  228,
      228,  230,  105,  230,  230,  231,  103,  231,  231,  233,

      102,  233,  233,  234,  101,  234,  234,  235,  100,  235,
      235,  236,   99,  236,  236,  237,   98,  237,  237,  238,
       97,  238,  238,  240,   96,  240,  240,  241,   95,  241,
      241,  243,   93,  243,  243,  244,   92,  244,  244,  247,
       90,  247,  247,  248,  248,   89,   88,   87,   85,   84,
       83,   82,   81,   77,   73,   69,   67,   65,   63,   61,
       60,   57,   55,   54,   52,   50,   49,   48,   46,   33,
       31,   30,   28,   13,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,

      245,  245,  245,  245,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#line 1 "lexer.lex"
#define INITIAL 0
#define YY_NEVER_INTERACTIVE 1
#define YY_STACK_USED 1
#line 6 "lexer.lex"
#include <stdio.h>
#include <string.h>
#include <math.h>
#include "symbols.yy.h"

int yyline=1;
#define global 1

#define camera 2

#define light 3

#define model 4

#define sphere 5

#line 559 "lexer.yy.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 30 "lexer.lex"


#line 685 "lexer.yy.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 246 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 575 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 32 "lexer.lex"
{ return YY_MATH_COS; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 33 "lexer.lex"
{ return YY_MATH_SIN; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 34 "lexer.lex"
{ return YY_MATH_TAN; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 35 "lexer.lex"
{ return YY_MATH_ACOS; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 36 "lexer.lex"
{ return YY_MATH_ASIN; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 37 "lexer.lex"
{ return YY_MATH_ATAN; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 38 "lexer.lex"
{ return YY_MATH_LN; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 39 "lexer.lex"
{ return YY_MATH_LOG; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 40 "lexer.lex"
{ return YY_MATH_EXP; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 41 "lexer.lex"
{ return YY_MATH_SQRT; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 42 "lexer.lex"
{ return YY_MATH_E; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 43 "lexer.lex"
{ return YY_MATH_PI; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 45 "lexer.lex"
{ yy_push_state(global); return YY_STATE_GLOBAL; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 46 "lexer.lex"
{ return YY_SYM_WIDTH; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 47 "lexer.lex"
{ return YY_SYM_HEIGHT; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 48 "lexer.lex"
{ return YY_SYM_GL_BG; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 49 "lexer.lex"
{ return YY_SYM_IMG_BG; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 51 "lexer.lex"
{ yy_push_state(camera); return YY_STATE_CAMERA; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 52 "lexer.lex"
{ return YY_SYM_CAMERA_POS; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 53 "lexer.lex"
{ return YY_SYM_CAMERA_DIR; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 54 "lexer.lex"
{ return YY_SYM_CAMERA_LOOK_AT; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 55 "lexer.lex"
{ return YY_SYM_CAMREA_UP; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 56 "lexer.lex"
{ return YY_SYM_CAMERA_FOV; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 58 "lexer.lex"
{ yy_push_state(light); return YY_STATE_LIGHT; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 59 "lexer.lex"
{ return YY_SYM_LIGHT_POINTLIGHT; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 60 "lexer.lex"
{ return YY_SYM_LIGHT_POS; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 61 "lexer.lex"
{ return YY_SYM_LIGHT_DIFFUSE; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 62 "lexer.lex"
{ return YY_SYM_LIGHT_AMBIENT; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 63 "lexer.lex"
{ return YY_SYM_LIGHT_WATTAGE; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 65 "lexer.lex"
{ yy_push_state(model); return YY_STATE_MODEL; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 66 "lexer.lex"
{ return YY_SYM_MODEL; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 68 "lexer.lex"
{ yy_push_state(sphere); return YY_STATE_SPHERE; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 69 "lexer.lex"
{ return YY_SYM_SPHERE_POS; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 70 "lexer.lex"
{ return YY_SYM_SPHERE_RADIUS; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 71 "lexer.lex"
{ return YY_SYM_SPHERE_COLOR; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 73 "lexer.lex"
{ yyval.integer = atoi(yytext); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 74 "lexer.lex"
{ yyval.real = atof(yytext); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 75 "lexer.lex"
{ yyval.string = strdup(yytext); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 77 "lexer.lex"
{ // C style comments
  register int c;
  for ( ; ; ) {
    while ((c = yyinput()) != '*' && c != EOF ) if (c == '\n') yyline++;
    if ( c == '*' ) {
      while ( (c = yyinput()) == '*' ) if (c == '\n') yyline++;
	  if ( c == '/' )
	    break;    /* found the end */
      if ( c == EOF ) {
	    fprintf(stderr, "EOF in comment");
	    printf("Press Enter to continue...");
	  }
	}
  }
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 93 "lexer.lex"
{ return yytext[0]; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 95 "lexer.lex"
{ yy_pop_state(); return yytext[0]; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 97 "lexer.lex"
// eat up comments
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 99 "lexer.lex"
// eat up whitespace
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 101 "lexer.lex"
{ yyline++; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 103 "lexer.lex"
{ printf( "\nParse error line %d near %s\n", yyline, yytext ); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 105 "lexer.lex"
ECHO;
	YY_BREAK
#line 1012 "lexer.yy.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(global):
case YY_STATE_EOF(camera):
case YY_STATE_EOF(light):
case YY_STATE_EOF(model):
case YY_STATE_EOF(sphere):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( istream* arg_yyin, ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( istream* new_in, ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a singled characater, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 246 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 246 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 245);

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yytext_ptr = yy_c_buf_p;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						{
						yy_c_buf_p =
						yytext_ptr + YY_MORE_ADJ;
						return EOF;
						}

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
					break;

				case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
					YY_FATAL_ERROR(
					"unexpected last match in yyinput()" );
#else
					YY_FATAL_ERROR(
					"unexpected last match in input()" );
#endif
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


void yyFlexLexer::yyrestart( istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


extern "C" int isatty YY_PROTO(( int ));
void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n - YY_MORE_ADJ; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 105 "lexer.lex"

